courseCode,name,Academic Unit,URL,Course Description,Course Aims,Course Learning Outcomes,details,Skills,All_Skills,Topics,Knowledge,Summary
BINF3010,Applied Bioinformatics,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=BINF3010&activityGroupId=1,"Bioinformatics (the use of computing methods for the management and analysis of molecular biology data) has become an integral component of biomolecular sciences, especially genomics and proteomics. This course focuses on the principles and practical use of bioinformatics methods and resources for the analysis of DNA and protein sequences and structures, as well as results from genomic, transcriptomic and proteomic experiments, with emphasis on their evolutionary underpinnings and statistical foundations. This course does not require programming, however it does involve the use of Linux.","Bioinformatics now pervades biological research, and new methods and technologies are constantly developed. This course is aimed at teaching bioinformatics from a user’s perspective (as opposed to that of a developer), to emphasise the use of bioinformatics to assist in biological discovery.
BINF3010 is the second bioinformatics course taken by students in a bioinformatics major, and is also available as an elective for students in a biology major who want to apply bioinformatics as part of biology research.
BINF9010 is available as an elective for postgraduate students with the assumed biology knowledge.
Since bioinformatics constantly evolves the goal is not to teach the use of specific tools and methods but to focus on principles, limitations and assumptions of common approaches to provide the means for students to research and evaluate new methods and apply them intelligently to produce meaningful results.","Choose and use bioinformatics tools and databases to analyse biological sequences, structures and functional genomics data
Analyse data from high-throughput molecular biology experiments using the R environment
Choose and apply computational methods for predicting protein tertiary structure
Explain the fundamental biology concepts that provide the context for bioinformatics, including sequence, structure and function as they relate to biological information macromolecules and molecular evolution
Identify the strengths and limitations of the main approaches used in sequence and structural bioinformatics, functional genomics and systems biology
Interpret and analyze data generated by proteomics experiments using bioinformatics
Use the UNIX shell to manage and analyse biological sequence and functional genomics data","Course Description: Bioinformatics (the use of computing methods for the management and analysis of molecular biology data) has become an integral component of biomolecular sciences, especially genomics and proteomics. This course focuses on the principles and practical use of bioinformatics methods and resources for the analysis of DNA and protein sequences and structures, as well as results from genomic, transcriptomic and proteomic experiments, with emphasis on their evolutionary underpinnings and statistical foundations. This course does not require programming, however it does involve the use of Linux.
Course Aims: Bioinformatics now pervades biological research, and new methods and technologies are constantly developed. This course is aimed at teaching bioinformatics from a user’s perspective (as opposed to that of a developer), to emphasise the use of bioinformatics to assist in biological discovery.
BINF3010 is the second bioinformatics course taken by students in a bioinformatics major, and is also available as an elective for students in a biology major who want to apply bioinformatics as part of biology research.
BINF9010 is available as an elective for postgraduate students with the assumed biology knowledge.
Since bioinformatics constantly evolves the goal is not to teach the use of specific tools and methods but to focus on principles, limitations and assumptions of common approaches to provide the means for students to research and evaluate new methods and apply them intelligently to produce meaningful results.
Course Learning Outcomes: Choose and use bioinformatics tools and databases to analyse biological sequences, structures and functional genomics data
Analyse data from high-throughput molecular biology experiments using the R environment
Choose and apply computational methods for predicting protein tertiary structure
Explain the fundamental biology concepts that provide the context for bioinformatics, including sequence, structure and function as they relate to biological information macromolecules and molecular evolution
Identify the strengths and limitations of the main approaches used in sequence and structural bioinformatics, functional genomics and systems biology
Interpret and analyze data generated by proteomics experiments using bioinformatics
Use the UNIX shell to manage and analyse biological sequence and functional genomics data",bioinformatics tool usage; biological data analysis; protein structure prediction; UNIX shell proficiency; R programming for bioinformatics; data interpretation in proteomics,bioinformatics tool usage; biological data analysis; protein structure prediction; UNIX shell proficiency; R programming for bioinformatics; data interpretation in proteomics; DNA analysis; protein analysis; genomic data management; transcriptomic analysis; proteomic analysis; functional genomics; systems biology; evolutionary foundations of bioinformatics; statistical principles in bioinformatics; molecular biology context for bioinformatics; limitations of bioinformatics methods; application of computational methods in biology,DNA and protein sequence analysis; protein structure analysis; genomic data management; transcriptomic analysis; proteomic analysis; functional genomics; systems biology,evolutionary foundations of bioinformatics; statistical principles in bioinformatics; molecular biology context for bioinformatics; limitations of bioinformatics methods; application of computational methods in biology,"This course applies bioinformatics principles and resources to analyze DNA, protein sequences, and structures, as well as experimental results, emphasizing evolutionary underpinnings and statistical foundations."
BINF9010,Applied Bioinformatics,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=BINF9010&activityGroupId=1,"Dive into the dynamic world of Applied Bioinformatics, a course designed to bridge the gap between computational technology and biological discovery. This course will give you the opportunity to apply computational strategies in tackling pressing challenges in biology, focusing on the practical aspects of managing, analysing, and interpreting complex biological data. Through a blend of theoretical foundations and hands-on practice, you will become proficient in utilizing cutting-edge bioinformatics tools and techniques. This includes the analysis of DNA, RNA, and protein data, as well as the exploration of molecular structure and function.
Structured to mirror real-life bioinformatics inquiries, this course emphasizes the application of bioinformatics in understanding and solving biological problems. As you progress, you will acquire a toolkit that prepares you to contribute to the fields of genomics, proteomics, and more. This course is more than an educational journey; it is a step towards diverse career paths, from bioinformatician to wet-lab scientist seeking an introduction to essential bioinformatic tools. No prior programming experience is necessary; it will be taught in the course.","This course aims to equip students with critical bioinformatic skills from a user perspective, emphasizing the application of computational tools to assist in biological discovery. Through hands-on practice and engagement with current research, students will develop the ability to analyse complex biological data and communicate their findings effectively. Ultimately, this course prepares students for a future in which they can contribute innovatively to the fields of genomics, proteomics, and beyond, leveraging bioinformatics to drive scientific advancements.
BINF3010 is the second bioinformatics course taken by students in a bioinformatics major, and is also available as an elective for students in a biology major who want to apply bioinformatics as part of biology research. BINF9010 is available as an elective for postgraduate students with the assumed biology knowledge.","Analyze, manage and interpret sequence, structure and functional data
Apply and evaluate sequence, structure and functional databases and associated tools to address biological problems
Explain the biology concepts that provide the context for bioinformatics analysis of biological data, including sequence, structure and function
Identify the strengths and limitations of the key bioinformatics approaches used in sequence, structure and functional data","Course Description: Dive into the dynamic world of Applied Bioinformatics, a course designed to bridge the gap between computational technology and biological discovery. This course will give you the opportunity to apply computational strategies in tackling pressing challenges in biology, focusing on the practical aspects of managing, analysing, and interpreting complex biological data. Through a blend of theoretical foundations and hands-on practice, you will become proficient in utilizing cutting-edge bioinformatics tools and techniques. This includes the analysis of DNA, RNA, and protein data, as well as the exploration of molecular structure and function.
Structured to mirror real-life bioinformatics inquiries, this course emphasizes the application of bioinformatics in understanding and solving biological problems. As you progress, you will acquire a toolkit that prepares you to contribute to the fields of genomics, proteomics, and more. This course is more than an educational journey; it is a step towards diverse career paths, from bioinformatician to wet-lab scientist seeking an introduction to essential bioinformatic tools. No prior programming experience is necessary; it will be taught in the course.
Course Aims: This course aims to equip students with critical bioinformatic skills from a user perspective, emphasizing the application of computational tools to assist in biological discovery. Through hands-on practice and engagement with current research, students will develop the ability to analyse complex biological data and communicate their findings effectively. Ultimately, this course prepares students for a future in which they can contribute innovatively to the fields of genomics, proteomics, and beyond, leveraging bioinformatics to drive scientific advancements.
BINF3010 is the second bioinformatics course taken by students in a bioinformatics major, and is also available as an elective for students in a biology major who want to apply bioinformatics as part of biology research. BINF9010 is available as an elective for postgraduate students with the assumed biology knowledge.
Course Learning Outcomes: Analyze, manage and interpret sequence, structure and functional data
Apply and evaluate sequence, structure and functional databases and associated tools to address biological problems
Explain the biology concepts that provide the context for bioinformatics analysis of biological data, including sequence, structure and function
Identify the strengths and limitations of the key bioinformatics approaches used in sequence, structure and functional data",Bioinformatics analysis and application; data management and interpretation; effective use of bioinformatics tools and databases; understanding of biological concepts relevant to bioinformatics,Bioinformatics analysis and application; data management and interpretation; bioinformatics tool usage; DNA analysis; RNA analysis; protein analysis; molecular structure and function exploration; application of computational methods in biology; communication and evaluation of bioinformatics research,"DNA analysis; RNA analysis; protein analysis; molecular structure and function exploration; application of computational strategies to biological problems; use of bioinformatics in genomics and proteomics; sequence, structure, and functional data management",practical and theoretical aspects of bioinformatics; application of bioinformatics in genomics and proteomics; communication and evaluation of bioinformatics research; understanding biological concepts through bioinformatics methods,"This course applies computational strategies to tackle pressing biological challenges by teaching students to manage, analyze, and interpret complex biological data."
COMP1010,The Art of Computing,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP1010&activityGroupId=1,"This course aims to provide a grounding in computational thinking for anyone who wants one. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium and use real world examples from a variety of domains to motivate understanding.","This course aims to provide a grounding in programming and computational thinking for any undergraduate interested in learning these essential skills. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium.
The course is a purely elective course, intended to be available as a General Education course for non-CSE students.
Topics: computer systems, computational problem solving, spreadsheets, programming in Python.","Use a spreadsheet for simple data management tasks
Write Python programs to solve simple computational problems
Build simple human-centered interfaces to computers
Solve problemsvia computer systems","Course Description: This course aims to provide a grounding in computational thinking for anyone who wants one. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium and use real world examples from a variety of domains to motivate understanding.
Course Aims: This course aims to provide a grounding in programming and computational thinking for any undergraduate interested in learning these essential skills. It assumes no previous programming background, but does assume that all incoming students have used digital devices, such as tablets and smart phones, for a range of tasks (e.g. social networking, reading, essay writing, etc.). The course will use Python as the programming medium.
The course is a purely elective course, intended to be available as a General Education course for non-CSE students.
Topics: computer systems, computational problem solving, spreadsheets, programming in Python.
Course Learning Outcomes: Use a spreadsheet for simple data management tasks
Write Python programs to solve simple computational problems
Build simple human-centered interfaces to computers
Solve problemsvia computer systems",Python programming; spreadsheet data management; computational problem solving; human-centered interface design,Python; spreadsheet data management; problem-solving; UI design; computer systems,Python programming; computational thinking; computer systems; spreadsheet usage, basics of computer systems; principles of computational problem solving; application of Python in various domains,"This course introduces students to computational thinking and programming using Python, assuming no prior experience with coding."
COMP1511,Programming Fundamentals,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP1511&activityGroupId=1,"From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.
In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.
The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.
This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:
Fundamental programming conceptsIntroduction to Computer ScienceThe C programming language and use of a C compilerProgramming styleProgram design and organisation conceptsProgram testing and debugging","The importance of this course lies in its role as the foundation of your programming journey, providing essential knowledge and skills vital for your success in the field. By focusing on proficiency in the high-level programming language C and fostering problem-solving abilities, this course equips you with the fundamental tools and mindset necessary to think like a programmer.
As the first course in the program, it plays a crucial role in setting the stage for your future learning. It serves as a prerequisite for many of the core courses, ensuring that all students begin with a solid understanding of the fundamental concepts required to progress further. By establishing a common knowledge base and skills, this course ensures that everyone starts on an equal footing and can effectively tackle more advanced topics.
This course intends to guide you through the initial stages of your programming education, imparting technical proficiency in C and the ability to approach problems systematically and think critically. By emphasizing problem-solving strategies, debugging techniques, and testing methodologies, the course aims to instill in you a resilient and adaptable mindset that will serve as a solid foundation for your future development as a programmer.","Read and understand coding solutions
Apply basic data structures, such as arrays and linked lists, to solve complex problems
Review the produced code against specification criteria by applying testing techniques
Apply C programming language to solve simple decision, looping, array, and linked list problems programmatically","Course Description: From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.
In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.
The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.
This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:
Fundamental programming conceptsIntroduction to Computer ScienceThe C programming language and use of a C compilerProgramming styleProgram design and organisation conceptsProgram testing and debugging
Course Aims: The importance of this course lies in its role as the foundation of your programming journey, providing essential knowledge and skills vital for your success in the field. By focusing on proficiency in the high-level programming language C and fostering problem-solving abilities, this course equips you with the fundamental tools and mindset necessary to think like a programmer.
As the first course in the program, it plays a crucial role in setting the stage for your future learning. It serves as a prerequisite for many of the core courses, ensuring that all students begin with a solid understanding of the fundamental concepts required to progress further. By establishing a common knowledge base and skills, this course ensures that everyone starts on an equal footing and can effectively tackle more advanced topics.
This course intends to guide you through the initial stages of your programming education, imparting technical proficiency in C and the ability to approach problems systematically and think critically. By emphasizing problem-solving strategies, debugging techniques, and testing methodologies, the course aims to instill in you a resilient and adaptable mindset that will serve as a solid foundation for your future development as a programmer.
Course Learning Outcomes: Read and understand coding solutions
Apply basic data structures, such as arrays and linked lists, to solve complex problems
Review the produced code against specification criteria by applying testing techniques
Apply C programming language to solve simple decision, looping, array, and linked list problems programmatically",C programming; code debugging and testing; problem-solving strategies; applying basic data structures,C; code debugging and testing; problem-solving; data structures; computer systems,Fundamental programming concepts; computer science introduction; C programming language; programming design and organization; program testing and debugging,architecture and mechanics of computers; translating real-world problems into computer programs; foundational computer programming principles,"This course teaches you how to instruct computers to solve problems by learning fundamental programming concepts, computer architecture, and problem-solving strategies."
COMP1521,Computer Systems Fundamentals,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP1521&activityGroupId=1,"This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems.","Provide a programmer's view on how a computer system executes programs, manipulates data and communicates
Enable students to become effective programmers in dealing with issues of performance, portability, and robustness
Serve as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required","Describe the relationship between a high-level procedural language (C
Describe the components comprising, and the services offered by, an operating system
Design, implement, and analyse small programs at the assembly/machine level
Describe the architectural layers (fundamental parts
Explain how the major components of a CPU work together, including how data and instructions are represented in a computer
Implement simple programs involving communication and concurrency
Describe the principles of memory management and explain the workings of a system with virtual memory management","Course Description: This course introduces students to how computer systems are structured in terms of basic electronic components, how they are used to implement procedural programs, and how they are structured as a collection of software layers. It introduces students to low-level software layers such as operating systems, and introduces concurrency concepts. The goal is to give students a solid understanding of what happens when high-level programs are executed, as a basis for further study in important areas of computing such as computer architecture, operating systems.
Course Aims: Provide a programmer's view on how a computer system executes programs, manipulates data and communicates
Enable students to become effective programmers in dealing with issues of performance, portability, and robustness
Serve as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required
Course Learning Outcomes: Describe the relationship between a high-level procedural language (C
Describe the components comprising, and the services offered by, an operating system
Design, implement, and analyse small programs at the assembly/machine level
Describe the architectural layers (fundamental parts
Explain how the major components of a CPU work together, including how data and instructions are represented in a computer
Implement simple programs involving communication and concurrency
Describe the principles of memory management and explain the workings of a system with virtual memory management",C programming; assembly language programming; systems-level programming; understanding CPU architecture; implementing concurrency; memory management techniques,"C; systems-level programming; understanding CPU architecture; implementing concurrency; memory management techniques; computer systems; operating systems; procedural programming; assembly/machine level programming; CPU component functionality; performance, portability, and robustness in programming; relationship between high-level languages and system execution; structure of software layers; Basic electronic components of computers",Computer system architecture; operating systems; procedural programming; assembly/machine level programming; CPU component functionality; concurrency in computing; virtual memory management,"Basic electronic components of computers; structure of software layers; execution of high-level programs; performance, portability, and robustness in programming; relationship between high-level languages and system execution","This course analyzes how computer systems execute programs, manipulating data and communicating, to provide a solid foundation for studying computer architecture, operating systems, and more."
COMP1531,Software Engineering Fundamentals,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP1531&activityGroupId=1,"This course teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams.
You will be exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that require you to analyse, design, build and deploy a web-based application. This course is typically taken soon after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.","This course aims to provide the students with a strong foundation in the fundamental principles and practices of software engineering that will prepare them for the advanced software engineering workshops. As such, a broad range of key software engineering topics will be taught and reinforced through a group project, that will enable students to apply the theoretical concepts acquired to solve a practical software engineering problem. An agile software delivery style has been chosen for the implementation of the group project, to make students familiar with modern agile development methodologies.","Demonstrate an understanding of how to use version control, continuous integration, and deployment tooling to sustainably integrate code from multiple parties
Understand key characteristics of a functioning team in terms of understanding professional expectations, maintaining healthy relationships, and managing conflict
Understand the software engineering life cycle in the context of modern and iterative software development practices in order to elicit requirements, design systems thoughtfully, and implement software correctly
Demonstrate effective use of software development tools to build full-stack end-user applications
Demonstrate effective use of static testing, dynamic testing, and user testing to validate and verify software systems
Demonstrate an ability to analyse complex software systems in terms of their data model, state model, and more","Course Description: This course teaches students about software engineering principles via exposure to the important practice of building correct products in effectively functioning teams.
You will be exposed to agile software practices, team collaboration and effective communication through implementing a group project based on agile software methodologies that require you to analyse, design, build and deploy a web-based application. This course is typically taken soon after completing COMP1511 but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.
Course Aims: This course aims to provide the students with a strong foundation in the fundamental principles and practices of software engineering that will prepare them for the advanced software engineering workshops. As such, a broad range of key software engineering topics will be taught and reinforced through a group project, that will enable students to apply the theoretical concepts acquired to solve a practical software engineering problem. An agile software delivery style has been chosen for the implementation of the group project, to make students familiar with modern agile development methodologies.
Course Learning Outcomes: Demonstrate an understanding of how to use version control, continuous integration, and deployment tooling to sustainably integrate code from multiple parties
Understand key characteristics of a functioning team in terms of understanding professional expectations, maintaining healthy relationships, and managing conflict
Understand the software engineering life cycle in the context of modern and iterative software development practices in order to elicit requirements, design systems thoughtfully, and implement software correctly
Demonstrate effective use of software development tools to build full-stack end-user applications
Demonstrate effective use of static testing, dynamic testing, and user testing to validate and verify software systems
Demonstrate an ability to analyse complex software systems in terms of their data model, state model, and more","Version control systems usage; continuous integration and deployment; agile software development practices; software testing (static, dynamic, user); full-stack software development; conflict management in teams","Version control systems: Git, GitHub, GitLab; continuous integration and deployment; software system design; agile software development; Front-end; Back-end; testing frameworks and practices; team collaboration; project management in software development; web application development; software testing, building and deployment


",Software engineering principles; agile methodologies; team collaboration; project management in software development; software development life cycle; software system analysis; ,Building and deploying web-based applications; use of development tools for creating end-user applications; understanding and managing software project workflows; eliciting software requirements and system design; maintaining effective team dynamics in a professional setting,"This course applies fundamental principles and practices of software engineering through a group project, emphasizing agile methodologies, teamwork, and communication."
COMP1911,Computing 1A,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP1911&activityGroupId=1,"From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.
In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.
The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.
This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:
Fundamental programming conceptsIntroduction to Computer ScienceThe C programming language and use of a C compilerProgramming styleProgram design and organisation conceptsProgram testing and debugging
Additional Information:
This course is taught within COMP1511.","This course intends to guide you through the initial stages of your programming education, imparting technical proficiency in C and the ability to approach problems systematically and think critically. By emphasizing problem-solving strategies, debugging techniques, and testing methodologies, the course aims to instill in you a resilient and adaptable mindset that will serve as a solid foundation for your future development as a programmer.","Read and understand coding solutions
Apply basic data structures, such as arrays and linked lists, to solve complex problems
Review the produced code against specification criteria by applying testing techniques
Apply C programming language to solve simple decision, looping, array, and linked list problems programmatically","Course Description: From recent innovations in AI like self-driving cars to humanoid robotics navigating complex environments, leapfrogs in battery technology to sequencing the human genome - the world is benefiting and evolving thanks to computer systems. At the core of all these systems are computers executing instructions to solve exciting problems.
In this course, you will learn the fundamentals of how we instruct computers to solve problems. You will explore the architecture and mechanics of how computers operate and how you can translate real-world problems to computer programs that solve these problems.
The concepts you learn will provide a foundation for your future endeavours in computing and, we hope, will begin to change the way you think about real-world problems.
This course is an introductory course to the basics of Computer Programming and Computer Science. It is intended as an introduction to studying further in Computer Science or related fields. Topics include:
Fundamental programming conceptsIntroduction to Computer ScienceThe C programming language and use of a C compilerProgramming styleProgram design and organisation conceptsProgram testing and debugging
Additional Information:
This course is taught within COMP1511.
Course Aims: This course intends to guide you through the initial stages of your programming education, imparting technical proficiency in C and the ability to approach problems systematically and think critically. By emphasizing problem-solving strategies, debugging techniques, and testing methodologies, the course aims to instill in you a resilient and adaptable mindset that will serve as a solid foundation for your future development as a programmer.
Course Learning Outcomes: Read and understand coding solutions
Apply basic data structures, such as arrays and linked lists, to solve complex problems
Review the produced code against specification criteria by applying testing techniques
Apply C programming language to solve simple decision, looping, array, and linked list problems programmatically",C programming; problem-solving using data structures; code testing and debugging; critical thinking and systematic problem solving,"C; problem-solving; data structures; code debugging and testing
",Fundamental programming concepts; introduction to computer science; C programming language; program design and organization; program testing and debugging,Basics of computer programming; mechanics of computer operation; translating real-world problems into computer programs; foundational computer science principles; effective programming style and practices,This course teaches students how to instruct computers to solve problems by learning fundamental programming concepts and the C programming language.
COMP2041,Software Construction: Techniques and Tools,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP2041&activityGroupId=1,"This course is designed for students who have mastered the basics of programming. It aims to broaden your knowledge of techniques and tools for software construction. It covers: Unix filters, shell scripting and Python (for programming), git (for version control), docker (for portable deployment), package managers (for configuration and deployment). At the end of this course, you should be able to build moderate-sized software systems and configure them so that others can download and deploy your work.","This course aims to expand your programming and system configuration ability to the point where you can put your own software on github and have others make use of it. It is core for the Bioinformatics and Software Engineering programs, and is a popular elective in other CSE programs. It is also valuable in giving you exposure to common industry tools.","Understand when to use of specific technologies and strategies during software development
Build software systems using a range of techniques and strategies
Solve problems by writing Unix shell scripts and Python programs
Use tools for version control, system configuration, debugging, and performance improvement
Articulate and communicate effectively concepts related to programming and systems","Course Description: This course is designed for students who have mastered the basics of programming. It aims to broaden your knowledge of techniques and tools for software construction. It covers: Unix filters, shell scripting and Python (for programming), git (for version control), docker (for portable deployment), package managers (for configuration and deployment). At the end of this course, you should be able to build moderate-sized software systems and configure them so that others can download and deploy your work.
Course Aims: This course aims to expand your programming and system configuration ability to the point where you can put your own software on github and have others make use of it. It is core for the Bioinformatics and Software Engineering programs, and is a popular elective in other CSE programs. It is also valuable in giving you exposure to common industry tools.
Course Learning Outcomes: Understand when to use of specific technologies and strategies during software development
Build software systems using a range of techniques and strategies
Solve problems by writing Unix shell scripts and Python programs
Use tools for version control, system configuration, debugging, and performance improvement
Articulate and communicate effectively concepts related to programming and systems",Advanced programming in Python and shell scripting; use of Unix/Linux tools; version control with Git; software deployment with Docker; system configuration using package managers,"Python; Shell Scripting languages; Unix/Linux tools; Version control systems: Git, GitHub, GitLab; Docker; system configuration using package managers; continuous integration and deployment; software testing, building and deployment


",Software construction techniques; Unix filters and shell scripting; Python programming; use of Git for version control; Docker for deployment; package management for software configuration,Building and configuring moderate-sized software systems; deploying software for public use; using industry-standard tools and techniques effectively,"This course enhances your knowledge and skills in software construction by teaching various techniques, tools, and strategies for building moderate-sized software systems."
COMP2111,System Modelling and Design,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP2111&activityGroupId=1,"This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations, and proof. It re-inforces, and builds on, prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use case-studies and assignments to develop competence. The methods developed in this course are used in the SENG2011 workshops and in safety-critical industrial contexts.",,"effectivelyemploy a toolkit of formal modelling approaches frequently used incomputing
carry out rigorous reasoningabout computingartefacts
appreciatethe relevance of discrete mathematics to computing
make effective use of discrete mathematics concepts","Course description: This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations, and proof. It re-inforces, and builds on, prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use case-studies and assignments to develop competence. The methods developed in this course are used in the SENG2011 workshops and in safety-critical industrial contexts. Course Learning Outcomes: effectivelyemploy a toolkit of formal modelling approaches frequently used incomputing
carry out rigorous reasoningabout computingartefacts
appreciatethe relevance of discrete mathematics to computing
make effective use of discrete mathematics concepts",Application of formal methods in system modeling; rigorous reasoning and proof techniques; use of set theory and predicate logic in computing,Application of formal methods in system modeling; rigorous reasoning and proof techniques; set theory; predicate logic; discrete mathematics,Formal methods in computing; specification and refinement of systems; implementation through formal proof; proof obligations; discrete mathematics applications in computing,Understanding and employing formal modeling techniques; verifying system consistency through formal development; relevance and application of discrete mathematics in computing systems,"This course applies rigorous methods for modeling system behavior, covering specification, refinement, implementation, and proof to develop competence in formal development and verification."
COMP2511,Object-Oriented Design & Programming,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP2511&activityGroupId=1,"COMP2511 builds on the foundation of first-year CSE courses, and begins to answer the questions: ""What does good software look like?"" and ""How do you build software that is flexible, reusable and maintainable"". The course introduces students to the Object-Oriented Programming paradigm and explores how OOP attempts to solve the problem of good software design. Students explore fundamental Design Patterns in designing, writing and testing software, and how to apply these strategies to both theoretical and real-world problems. The course also teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software in mind.","This course aims to introduce students to the foundational principles of designing software that is flexible, reusable and maintainable. Students are exposed to the Object-Oriented Programming paradigm and explore how OOP attempts to solve the problem of good software design, while learning of other paradigms such as the functional paradigm. Students explore fundamental Design Patterns in writing and testing of software and their role in architecture of software, applying these solutions to both theoretical and real-world problems. The course teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software systems in mind.
The course comes at a mid-point in the program, after foundational programming courses and before applying design principles to build large software systems.","Work with an enterprise programming language and IDE
Create medium-scale systems from scratch, and work on existing systems as part of the Software Development Life Cycle
Explore the human factors at play in Software Design and Engineering; including ambiguity, the unknown, and trade-offs
Apply the principles of Object-Oriented Design to solve problems
Develop an appreciation for elegantly written software, and how to create and maintain well-designed systems
Apply widely used Design Patterns to create extensible designs
Understand different design paradigms and methodologies, their background and application","Course Description: COMP2511 builds on the foundation of first-year CSE courses, and begins to answer the questions: ""What does good software look like?"" and ""How do you build software that is flexible, reusable and maintainable"". The course introduces students to the Object-Oriented Programming paradigm and explores how OOP attempts to solve the problem of good software design. Students explore fundamental Design Patterns in designing, writing and testing software, and how to apply these strategies to both theoretical and real-world problems. The course also teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software in mind.
Course Aims: This course aims to introduce students to the foundational principles of designing software that is flexible, reusable and maintainable. Students are exposed to the Object-Oriented Programming paradigm and explore how OOP attempts to solve the problem of good software design, while learning of other paradigms such as the functional paradigm. Students explore fundamental Design Patterns in writing and testing of software and their role in architecture of software, applying these solutions to both theoretical and real-world problems. The course teaches an appreciation for elegantly written code, problem solving and finding well-designed solutions to problems that have longevity of software systems in mind.
The course comes at a mid-point in the program, after foundational programming courses and before applying design principles to build large software systems.
Course Learning Outcomes: Work with an enterprise programming language and IDE
Create medium-scale systems from scratch, and work on existing systems as part of the Software Development Life Cycle
Explore the human factors at play in Software Design and Engineering; including ambiguity, the unknown, and trade-offs
Apply the principles of Object-Oriented Design to solve problems
Develop an appreciation for elegantly written software, and how to create and maintain well-designed systems
Apply widely used Design Patterns to create extensible designs
Understand different design paradigms and methodologies, their background and application",algorithm analysis; recursion application; object-oriented design; software system design; software debugging and testing; design pattern usage,algorithm analysis; object-oriented design; software system design; code debugging and testing; data structures; abstract data types; binary search trees; balanced search trees; graphs; sorting algorithms; heaps; hashing; tries; software maintenance strategies,data structures; recursion; algorithm analysis; abstract data types; binary search trees; balanced search trees; graphs; sorting algorithms; heaps; hashing; tries; software design principles,structure of data types; core algorithms operation; object-oriented programming principles; design patterns and their applications; software development life cycle; effective software maintenance strategies,"This course teaches students to design software that is flexible, reusable, and maintainable by introducing them to Object-Oriented Programming and fundamental Design Patterns."
COMP2521,Data Structures and Algorithms,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP2521&activityGroupId=1,"The aim of this course is to get you tothink like a computer scientist. This certainly sounds like a noble goal... but what does it really mean? How does ascientist, let alone a computer scientist, actually think?
What many types of scientists try to do is understand natural systems and processes: a geologist, for example, tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions, and so on.
Computer scientists don't, as the name might suggest, simply try to understand the structure and behaviour of computers, but are more concerned with understanding software systems (and the interaction between the software and the hardware on which it runs). Also, unlike other scientists, computer scientists frequently build the objects that they study.
The goal of this course is to deepen your understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses. You explore these ideas in lectures, tutorials, lab exercises, quizzes and assignments. Assessment involves lab exercises, quizzes, assignments and a final exam involving both practice and theory. At the end of the course, we want you to be a solid programmer, with knowledge of a range of useful data structures and programming techniques, and ready to continue with further specialised studies in computing.
Topics
This course provides an introduction to the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them. Key topics are:
RecursionAnalysis of algorithmsAbstract data typesBinary search treesBalanced search treesGraphsSorting algorithmsHeapsHashingTries","During this course, we'll be looking at ways of creating, analysing and understanding software. Ultimately, you should be able to answer the question, ""is this piece of software any good?"" and be able to provide sound reasons to justify your answer.
This course follows on from introductory C programming courses: COMP1511, COMP1917, or COMP1921. We cover additional aspects of the C programming language that were not covered in those courses, and also look at some programming tools which were not covered (in detail) earlier. However, this course is not simply a second C programming course: the focus is on the ideas and abstractions behind the data structures and algorithms that are used.
COMP2521 is a critical course in the study of computing at UNSW, since it deals with many concepts that are central to future studies in the area. Whether you are studying Computer Science, Software Engineering, Bioinformatics, Computer Engineering, or even a discipline outside the realm of computing, understanding a range of algorithms and data structures and how to use them will make you a much more effective computing problem solver in the future.","Analyse the performance characteristics of algorithms
Choose/develop appropriate algorithms to manipulate chosen data structures
Develop and maintain software systems in C that contain thousands of lines of code
Describe and analyse fundamental data structures and algorithms
Measure the performance behaviour of programs
Reason about the effectiveness of data structures and algorithms for solving a given problem
Choose/develop an appropriate data structure for a given problem
Package a set of data structures and algorithms as an abstract data type","Course Description: The aim of this course is to get you tothink like a computer scientist. This certainly sounds like a noble goal... but what does it really mean? How does ascientist, let alone a computer scientist, actually think?
What many types of scientists try to do is understand natural systems and processes: a geologist, for example, tries to understand the structure of the earth; a biologist tries to understand living organisms; a chemist tries to understand materials and reactions, and so on.
Computer scientists don't, as the name might suggest, simply try to understand the structure and behaviour of computers, but are more concerned with understanding software systems (and the interaction between the software and the hardware on which it runs). Also, unlike other scientists, computer scientists frequently build the objects that they study.
The goal of this course is to deepen your understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses. You explore these ideas in lectures, tutorials, lab exercises, quizzes and assignments. Assessment involves lab exercises, quizzes, assignments and a final exam involving both practice and theory. At the end of the course, we want you to be a solid programmer, with knowledge of a range of useful data structures and programming techniques, and ready to continue with further specialised studies in computing.
Topics
This course provides an introduction to the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them. Key topics are:
RecursionAnalysis of algorithmsAbstract data typesBinary search treesBalanced search treesGraphsSorting algorithmsHeapsHashingTries
Course Aims: During this course, we'll be looking at ways of creating, analysing and understanding software. Ultimately, you should be able to answer the question, ""is this piece of software any good?"" and be able to provide sound reasons to justify your answer.
This course follows on from introductory C programming courses: COMP1511, COMP1917, or COMP1921. We cover additional aspects of the C programming language that were not covered in those courses, and also look at some programming tools which were not covered (in detail) earlier. However, this course is not simply a second C programming course: the focus is on the ideas and abstractions behind the data structures and algorithms that are used.
COMP2521 is a critical course in the study of computing at UNSW, since it deals with many concepts that are central to future studies in the area. Whether you are studying Computer Science, Software Engineering, Bioinformatics, Computer Engineering, or even a discipline outside the realm of computing, understanding a range of algorithms and data structures and how to use them will make you a much more effective computing problem solver in the future.
Course Learning Outcomes: Analyse the performance characteristics of algorithms
Choose/develop appropriate algorithms to manipulate chosen data structures
Develop and maintain software systems in C that contain thousands of lines of code
Describe and analyse fundamental data structures and algorithms
Measure the performance behaviour of programs
Reason about the effectiveness of data structures and algorithms for solving a given problem
Choose/develop an appropriate data structure for a given problem
Package a set of data structures and algorithms as an abstract data type",Developing and maintaining large software systems in C; Analyzing and optimizing the performance of algorithms; Applying data structures effectively to solve computing problems,C; data structures; software maintenance strategies; agile software development; algorithm analysis; Recursion; Abstract data types; Binary search trees; Balanced search trees; Graphs; Sorting algorithms; Heaps; Hashing; Tries; ,Recursion; Analysis of algorithms; Abstract data types; Binary search trees; Balanced search trees; Graphs; Sorting algorithms; Heaps; Hashing; Tries,Deep understanding of key data structures and algorithms; Ability to evaluate software quality and performance; Skills in abstract thinking and problem-solving in computer science,"This course teaches you to think like a computer scientist by analyzing and developing software systems, data structures, and algorithms."
COMP3121,Algorithm Design and Analysis,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3121&activityGroupId=1,"How would you convince a colleague that your program is correct, and that theirs is flawed?
How do you estimate how long a program will run for, and design test cases to find bugs?Can all problems be solved efficiently, or are some problems ""too hard""?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop accurate and fast algorithms in contexts such as graphs and strings. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to find out how you can become a better programmer without writing any code.","In this course, students will be introduced to a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings.
This course aims to develop students' theoretical knowledge in order to design correct and efficient software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, students will become more capable and responsible problem solvers.","Explain how standard design techniques are used to develop algorithms
Solve problems by creatively applying algorithm design techniques
Communicate algorithmic ideas at different levels of abstraction
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness","Course Description: How would you convince a colleague that your program is correct, and that theirs is flawed?
How do you estimate how long a program will run for, and design test cases to find bugs?Can all problems be solved efficiently, or are some problems ""too hard""?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop accurate and fast algorithms in contexts such as graphs and strings. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to find out how you can become a better programmer without writing any code.
Course Aims: In this course, students will be introduced to a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings.
This course aims to develop students' theoretical knowledge in order to design correct and efficient software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, students will become more capable and responsible problem solvers.
Course Learning Outcomes: Explain how standard design techniques are used to develop algorithms
Solve problems by creatively applying algorithm design techniques
Communicate algorithmic ideas at different levels of abstraction
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness","Developing algorithms using design techniques like divide-and-conquer, greedy selection, and dynamic programming; Critical thinking and problem-solving in algorithm design; Communicating algorithmic ideas effectively; Using LaTeX for high-quality technical documentation.",Algorithm design; divide-and-conquer; greedy selection; dynamic programming; problem-solving; LaTeX; ,"Algorithm design techniques including greedy, dynamic programming, and divide and conquer; Application of algorithms in various contexts such as graphs and strings; Evaluation of algorithm efficiency and correctness; Technical communication using LaTeX.","Understanding of standard algorithm design principles; Ability to analyze, evaluate, and apply algorithms to solve problems; Skills in communicating complex ideas clearly and effectively; Proficiency in LaTeX for technical documentation.","This course develops problem-solving software in diverse fields by learning algorithm design techniques, thinking critically, and communicating about correctness and efficiency."
COMP3131,Programming Languages and Compilers,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3131&activityGroupId=1,"This subject focusses on basic compiler techniques needed to implement programming languages in a virtual machine (with emphasis on the compiler front end). By writing a compiler in Java to translate a variant of C into Java bytecode, you are also expected to gain a good understanding of important fundamental principles in object-oriented programming languages and develop further your programming and software engineering skills.","This course aims to provide students with a comprehensive understanding of building compilers. Through theory and practice, students will explore programming language structures using VC (a variant of C) and implement a compiler targeting JVM. By completing a term-long project consisting of five programming assignments, students will gain expertise in scanners, recognisers, parsers, semantic analysers, and code generators. The course emphasises learning about programming languages, compilers, and software development while improving project management skills.","Specify and analyse the lexical, syntactic and semantic structures of advanced language features
Understand how to specify the syntax and semantics of a programming language
Design the data structures and support required for compiling advanced language features
Gain proficiency in writing sizable object-oriented programs in Java, incorporating the use of packages, inheritance, dynamic dispatching, and the visitor design pattern
Write a scanner, recogniser, parser, semantic analyser and code generator without the aid of automatic generators
Improve understanding of virtual machines, with a specific focus on the Java virtual machine (JVM","Course Description: This subject focusses on basic compiler techniques needed to implement programming languages in a virtual machine (with emphasis on the compiler front end). By writing a compiler in Java to translate a variant of C into Java bytecode, you are also expected to gain a good understanding of important fundamental principles in object-oriented programming languages and develop further your programming and software engineering skills.
Course Aims: This course aims to provide students with a comprehensive understanding of building compilers. Through theory and practice, students will explore programming language structures using VC (a variant of C) and implement a compiler targeting JVM. By completing a term-long project consisting of five programming assignments, students will gain expertise in scanners, recognisers, parsers, semantic analysers, and code generators. The course emphasises learning about programming languages, compilers, and software development while improving project management skills.
Course Learning Outcomes: Specify and analyse the lexical, syntactic and semantic structures of advanced language features
Understand how to specify the syntax and semantics of a programming language
Design the data structures and support required for compiling advanced language features
Gain proficiency in writing sizable object-oriented programs in Java, incorporating the use of packages, inheritance, dynamic dispatching, and the visitor design pattern
Write a scanner, recogniser, parser, semantic analyser and code generator without the aid of automatic generators
Improve understanding of virtual machines, with a specific focus on the Java virtual machine (JVM","Writing compilers in Java; Developing scanners, recognisers, parsers, semantic analysers, and code generators manually; Applying object-oriented programming principles such as inheritance, dynamic dispatching, and visitor design pattern; Enhancing project management and software development skills.",Java; compiler construction; object-oriented design; project management; Programming language syntax and semantics; Virtual machine architecture; data structures,"Compiler construction; Programming language syntax and semantics; Object-oriented programming fundamentals; Java bytecode generation; Virtual machine architecture, specifically JVM; Compiler front-end development without automatic generators.","Comprehensive understanding of compiler design and implementation; Proficiency in specifying and analyzing programming languages' lexical, syntactic, and semantic structures; Capability to design data structures and support for advanced language features; In-depth knowledge of the Java programming language and virtual machine.","This course compiles programming languages by developing a compiler in Java to translate VC into Java bytecode, emphasizing fundamental principles in object-oriented programming."
COMP3211,Computer Architecture,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3211&activityGroupId=1,"Computer architecture plays a crucial role in defining and bridging the interface between hardware and software in a computer system. It serves as the foundation upon which both hardware and software components are designed and interact with each other. A study of computer architecture complements the study of programming language and algorithm, compiler, and operating system on the software side of the interface, and the study of embedded system, FPGA and VLSI design on the hardware side of the interface.","This course aims to provide students with a comprehensive understanding of computer system design, performance evaluation, and optimization. It equips students with the skills and knowledge necessary to tackle challenges in the field of computer architecture and prepares students for careers in areas such as computer engineering, computer science, and system design.","Demonstrate ability to work in teams
Apply the basic design principles and techniques to build a processor to meet various requirements, such as performance, cost, power consumption
Demonstrate a deep understanding of computer hardware design, especially the pipelined RISC processor, hierarchical memory system, and multi-core processor system
Use the simulation tool to investigate and validate the hardware design
Establish a solid background for studying and development of advanced computing systems","Course Description: Computer architecture plays a crucial role in defining and bridging the interface between hardware and software in a computer system. It serves as the foundation upon which both hardware and software components are designed and interact with each other. A study of computer architecture complements the study of programming language and algorithm, compiler, and operating system on the software side of the interface, and the study of embedded system, FPGA and VLSI design on the hardware side of the interface.
Course Aims: This course aims to provide students with a comprehensive understanding of computer system design, performance evaluation, and optimization. It equips students with the skills and knowledge necessary to tackle challenges in the field of computer architecture and prepares students for careers in areas such as computer engineering, computer science, and system design.
Course Learning Outcomes: Demonstrate ability to work in teams
Apply the basic design principles and techniques to build a processor to meet various requirements, such as performance, cost, power consumption
Demonstrate a deep understanding of computer hardware design, especially the pipelined RISC processor, hierarchical memory system, and multi-core processor system
Use the simulation tool to investigate and validate the hardware design
Establish a solid background for studying and development of advanced computing systems","Working effectively in teams; Designing and optimizing processors considering performance, cost, and power consumption; Using simulation tools for hardware design validation; Understanding and applying basic and advanced principles of computer architecture.","Team Collaboration; Professional team dynamics management; Designing and optimizing processors; computer architecture; hardware designs; computer systems; hardware APIs and SDKs
",Computer system design; Performance evaluation and optimization; Processor architecture including pipelined RISC processors; Hierarchical memory systems; Multi-core processor systems; Simulation and modeling of hardware designs.,"Comprehensive understanding of the interface between hardware and software; Deep insights into the design and function of computer hardware, especially processor and memory architectures; Capabilities to evaluate and improve computer system performance; Foundational skills for advanced studies in computing systems design and development.","This course explores the design, evaluation, and optimization of computer systems, teaching students to apply principles and techniques in areas like computer engineering and science."
COMP3231,Operating Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3231&activityGroupId=1,"Operating systems are an essential part of computer systems, so a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.","The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.","Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system","Course Description: Operating systems are an essential part of computer systems, so a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.
Course Aims: The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.
Course Learning Outcomes: Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system",Creating and integrating new functionalities in operating systems; Analyzing and optimizing operating system behavior; Applying operating system algorithms and implementation techniques; Developing a comprehensive understanding of operating system architectures and components.,"operating system architectures and components; Process, thread, and concurrency management; File systems management; memory management; Scheduling techniques; Relationship between operating systems, application software, and hardware","Basic and advanced concepts of operating systems; Process, thread, and concurrency management; File systems and memory management; Scheduling algorithms; Practical implementation aspects of teaching operating systems; Relationship between operating systems, application software, and hardware.","In-depth understanding of modern monolithic operating systems; Skills in the practical application and modification of operating system components; Ability to analyze and improve system performance; Proficiency in the theoretical and practical aspects of operating systems, enabling effective development and troubleshooting of complex software systems.","This course teaches students to develop, analyze, and understand modern operating systems by learning concepts, implementing parts of a teaching OS, and gaining a holistic view of the software stack."
COMP3311,Database Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3311&activityGroupId=1,"This course aims to explore in depth the practice of developing database applications and the theory behind relational database systems. It will also give a very brief overview of the technologies used in implementing database management systems and the past, present and future of database systems.
Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, COMP3311 also provides a foundation for further study in advanced database topics, such asCOMP9312Graph Data Analytics, andCOMP9315Database Systems Implementation. Database concepts are also relevant in courses such asCOMP9319Web Data Compression and Search andCOMP6714Information Retrieval and Web Search.
By the end of this course, we want you to be capable of building high-quality (correct and efficient) applications based on relational databases, to have a sound understanding of issues in managing relational database management systems, and an overview of how they work internally.","This course aims to explore in depth the practice of developing database applications and the theory behind relational database management systems (RDBMSs). It will also give an overview of the technologies used in implementing database management systems and the past, present and future of database systems and database research.","realise data models as relational database schemas
Write applications in Python that interact effectively with databases
Formulate queries via the full range of SQL constructs
Write stored procedures and triggers to extend DBMS capabilities
develop accurate, non-redundant data models
Analyse performance issues in relational database applications","Course Description: This course aims to explore in depth the practice of developing database applications and the theory behind relational database systems. It will also give a very brief overview of the technologies used in implementing database management systems and the past, present and future of database systems.
Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, COMP3311 also provides a foundation for further study in advanced database topics, such asCOMP9312Graph Data Analytics, andCOMP9315Database Systems Implementation. Database concepts are also relevant in courses such asCOMP9319Web Data Compression and Search andCOMP6714Information Retrieval and Web Search.
By the end of this course, we want you to be capable of building high-quality (correct and efficient) applications based on relational databases, to have a sound understanding of issues in managing relational database management systems, and an overview of how they work internally.
Course Aims: This course aims to explore in depth the practice of developing database applications and the theory behind relational database management systems (RDBMSs). It will also give an overview of the technologies used in implementing database management systems and the past, present and future of database systems and database research.
Course Learning Outcomes: realise data models as relational database schemas
Write applications in Python that interact effectively with databases
Formulate queries via the full range of SQL constructs
Write stored procedures and triggers to extend DBMS capabilities
develop accurate, non-redundant data models
Analyse performance issues in relational database applications",Designing and realizing data models as relational database schemas; Writing applications in Python that interact with databases; Formulating complex SQL queries for data manipulation and retrieval; Creating stored procedures and triggers to enhance DBMS functionality; Analyzing and optimizing performance in database applications.,Python; SQL; database design and management; ,Fundamentals and advanced concepts in relational database management systems (RDBMSs); Development of database applications and their integration with software systems; Internal workings and technology stacks of DBMS; Historical evolution and future trends in database systems and technologies; Performance analysis and optimization in relational databases.,Relational database theory; database management practices; SQL constructs application; performance optimization in databases; database system evolution,"This course develops students' understanding of relational database management systems by exploring practice and theory, enabling them to build high-quality applications."
COMP3331,Computer Networks and Applications,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Summer&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=U1&deliveryLocation=Kensington&courseCode=COMP3331&activityGroupId=1,"This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques
This is a combined undergraduate and postgraduate course.The corresponding postgraduate course code is COMP9331.","The course aims to provide students with an overview of the core topics in computer networks and the Internet's architecture and protocols. Students will be introduced to network programming and will learn to design and implement network protocols and applications and evaluate network performance. As an introductory course, one of the aims is to prepare students for more advanced study in follow-on courses.","Describe the current architecture of the Internet and the entities involved in its operations
Analyse and evaluate the performance of computer networks
Identify soundness and/or potential flaws in proposed protocols
Explain security and ethical issues in computer networking
Capture and analyse network traffic
Design networked applications and protocols, and implement them in C, Java or Python","Course Description: This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques
This is a combined undergraduate and postgraduate course.The corresponding postgraduate course code is COMP9331.
Course Aims: The course aims to provide students with an overview of the core topics in computer networks and the Internet's architecture and protocols. Students will be introduced to network programming and will learn to design and implement network protocols and applications and evaluate network performance. As an introductory course, one of the aims is to prepare students for more advanced study in follow-on courses.
Course Learning Outcomes: Describe the current architecture of the Internet and the entities involved in its operations
Analyse and evaluate the performance of computer networks
Identify soundness and/or potential flaws in proposed protocols
Explain security and ethical issues in computer networking
Capture and analyse network traffic
Design networked applications and protocols, and implement them in C, Java or Python","Describing and understanding the current architecture of the Internet; Analyzing and evaluating the performance of computer networks; Identifying the strengths and weaknesses in network protocols; Explaining security and ethical issues related to computer networking; Capturing and analyzing network traffic; Designing and implementing networked applications and protocols in C, Java, or Python.",,"Medium access control, congestion control, flow control, and reliable transmission; Addressing and naming in networks; Routing and switching techniques; Protocols such as Ethernet, IP, TCP, UDP, HTTP; Special-purpose networks like content delivery, peer-to-peer, and wireless networks; Network security and defensive techniques.",Medium access control; congestion control mechanisms; routing and switching techniques; TCP/IP protocols; network application design,"This course explores the fundamentals of computer networks, covering topics like medium access control, routing, security, and more, enabling students to design and implement network protocols."
COMP3411,Artificial Intelligence,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3411&activityGroupId=1,"Machine intelligence. Principles: knowledge representation, automated reasoning, machine learning. Tools: AI programming languages, control methods, search strategies, pattern matching. Applications: computer vision, speech recognition, natural language processing, expert systems, game playing, computer-aided learning. Philosophical and psychological issues. Lab: logic programming assignments.",,"Employ AI programming and practices
Explain fundamental AI methods and techniques
Describe how AI techniques are applied to particular problems
Implement or develop a functional AI system
Explain features or aspects of AI algorithms","Course Description: Machine intelligence. Principles: knowledge representation, automated reasoning, machine learning. Tools: AI programming languages, control methods, search strategies, pattern matching. Applications: computer vision, speech recognition, natural language processing, expert systems, game playing, computer-aided learning. Philosophical and psychological issues. Lab: logic programming assignments. Course Learning Outcomes: Employ AI programming and practices
Explain fundamental AI methods and techniques
Describe how AI techniques are applied to particular problems
Implement or develop a functional AI system
Explain features or aspects of AI algorithms","Employing AI programming and practices; Explaining fundamental AI methods and techniques; Describing the application of AI techniques to specific problems; Implementing or developing functional AI systems; Explaining features or aspects of AI algorithms.
","AI programming; AI algorithms; Machine learning; NLP, computer vision; speech recognition; expert systems; game playing; computer-aided learning; AI integration
","Knowledge representation and automated reasoning; Machine learning principles and applications; AI programming languages and control methods; Search strategies and pattern matching techniques; Applications in computer vision, speech recognition, natural language processing, expert systems, game playing, and computer-aided learning; Philosophical and psychological implications of AI.",Principles of machine intelligence; AI programming languages and control methods; applications of AI in various domains; philosophical and psychological aspects of AI; implementation of AI systems,"This course develops the principles, tools, and applications of machine intelligence, focusing on employability and understanding AI methods, techniques, and systems."
COMP3511,Human Computer Interaction,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP3511&activityGroupId=1,"The course covers topics related to User Interface Design and Visual Design Principles. These topics aim to equip you with the skills necessary to design websites, mobile apps, and various software packages. You will learn how to apply a User-Centered Design process, which involves data collection from users, Requirement Analysis, Design, Prototyping, and Usability Evaluation. This process ensures that the final product is tailored to meet users' needs.
Additionally, the course covers other relevant topics that help you understand your users and their needs. These topics include an overview of basic Cognitive Capacities, Designing for Accessibility, Internationalization, Levels of Expertise, and Collaboration.
Lastly, the course introduces you to new emerging technologies, such as the metaverse, immersive technologies, and smart devices. These technologies require special design considerations and will be explored in the course.
By the end of the course, you will have gained a comprehensive understanding of User Interface Design and Visual Design Principles, along with the ability to apply User-Centered Design methodologies and adapt products to meet users' needs.","to familiarize you with user interface design and visual design principles that can enhance usability
to teach you how to design websites, mobile applications, and software packages with a focus on maximizing their usability
to give you an awareness of user centred design tools, methods, and techniques
to provide background knowledge about how people think and process information
to ensure that your design work includes user needs analysis
to give you experience in prototyping using both paper-based design and software-based techniques
to demonstrate techniques/heuristics necessary to evaluate systems for their usability
to give you experience in the formal evaluation of user interfaces
above all, maintain a real-world perspective to applying this knowledge in industry","Ceate prototypes by utilizing both paper and prototyping software packages
Prepare a design plan that is based on user-centered design principles and then carry out activities to design, evaluate and refine the user interface
Apply gamification in order to increase users' engagement
Design for new emerging technologies such as metaverse, virtual and augmented reality, and smart devices and their design considerations
Explain the strengths and limitations of human cognition and memory and apply these to the design of more usable interfaces that do not cognitively overload users
Analyze websites in terms of usability and accessibility by considering different user interface design and visual design principles
Construct questionnaires/surveys to gather pre- and post-test information from users, and understand the importance of ethics and privacy to conduct appropriate user-centered design activities
Explain how user-centred design processes should be inclusive of all users, including international audiences, those with special needs, such as disabilities, as well different levels of user experience, and use this knowledge to design interfaces appropriate to a particular group of users
Apply usability evaluation methods for assessing the usability of both low and high-fidelity prototypes","Course Description: The course covers topics related to User Interface Design and Visual Design Principles. These topics aim to equip you with the skills necessary to design websites, mobile apps, and various software packages. You will learn how to apply a User-Centered Design process, which involves data collection from users, Requirement Analysis, Design, Prototyping, and Usability Evaluation. This process ensures that the final product is tailored to meet users' needs.
Additionally, the course covers other relevant topics that help you understand your users and their needs. These topics include an overview of basic Cognitive Capacities, Designing for Accessibility, Internationalization, Levels of Expertise, and Collaboration.
Lastly, the course introduces you to new emerging technologies, such as the metaverse, immersive technologies, and smart devices. These technologies require special design considerations and will be explored in the course.
By the end of the course, you will have gained a comprehensive understanding of User Interface Design and Visual Design Principles, along with the ability to apply User-Centered Design methodologies and adapt products to meet users' needs.
Course Aims: to familiarize you with user interface design and visual design principles that can enhance usability
to teach you how to design websites, mobile applications, and software packages with a focus on maximizing their usability
to give you an awareness of user centred design tools, methods, and techniques
to provide background knowledge about how people think and process information
to ensure that your design work includes user needs analysis
to give you experience in prototyping using both paper-based design and software-based techniques
to demonstrate techniques/heuristics necessary to evaluate systems for their usability
to give you experience in the formal evaluation of user interfaces
above all, maintain a real-world perspective to applying this knowledge in industry
Course Learning Outcomes: Ceate prototypes by utilizing both paper and prototyping software packages
Prepare a design plan that is based on user-centered design principles and then carry out activities to design, evaluate and refine the user interface
Apply gamification in order to increase users' engagement
Design for new emerging technologies such as metaverse, virtual and augmented reality, and smart devices and their design considerations
Explain the strengths and limitations of human cognition and memory and apply these to the design of more usable interfaces that do not cognitively overload users
Analyze websites in terms of usability and accessibility by considering different user interface design and visual design principles
Construct questionnaires/surveys to gather pre- and post-test information from users, and understand the importance of ethics and privacy to conduct appropriate user-centered design activities
Explain how user-centred design processes should be inclusive of all users, including international audiences, those with special needs, such as disabilities, as well different levels of user experience, and use this knowledge to design interfaces appropriate to a particular group of users
Apply usability evaluation methods for assessing the usability of both low and high-fidelity prototypes","Create prototypes with paper and software; Execute user-centered design plans; Apply gamification for user engagement; Design for emerging technologies; Apply cognitive principles to design; Analyze websites for usability, accessibility; Construct user-focused surveys and questionnaires; Evaluate usability of prototypes;  Apply cognitive principles to design","Gamification knowledge; Construct user-focused surveys and questionnaires; UI design; Design for accessibility, international viability",UI and Visual Design Principles; User-Centered Design process stages; Cognitive capacities' impact on design; Accessibility and internationalization design; Expertise levels and collaborative design; New technologies' design implications,"Understand UI and Visual Design Principles; Proficient in user-centered methodologies; Insight into human cognitive processes; Design for accessibility, international viability; Experience in prototyping, usability evaluation; Adapt designs to emerging technologies","This course analyzes and develops effective User Interface Design and Visual Design Principles to enhance usability, applying user-centered methodologies."
COMP3821,Extended Algorithm Design and Analysis,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3821&activityGroupId=1,"How can a practitioner of algorithms help small-scale producers interested in sustainable farming?How can you solve strategy games by efficiently using computation time and memory?What do the relationships between difficult problems imply about the existence of feasible solutions to them, from both theoretical and practical standpoints?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop fast and accurate algorithms in contexts such as graphs and strings, and study reductions involving linear programming and NP-hard problems. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to become a more effective, persistent and creative problem solver.","In this course, we introduce a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings. We also provide a primer on intractable problems, which forms the foundation of further study in theoretical computer science.
This course aims to develop students' theoretical knowledge in order to both design correct and efficient software and recognise the limitations of software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, our students will become more capable and responsible problem solvers.","Explain how standard design techniques are used to develop algorithms
Integrate modeling skills and algorithmic knowledge for problem solving
Solve problems by creatively applying algorithm design techniques
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness
Formulate real-life scenarios as algorithmic problems
Communicate algorithmic ideas at different abstraction levels","Course Description: How can a practitioner of algorithms help small-scale producers interested in sustainable farming?How can you solve strategy games by efficiently using computation time and memory?What do the relationships between difficult problems imply about the existence of feasible solutions to them, from both theoretical and practical standpoints?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop fast and accurate algorithms in contexts such as graphs and strings, and study reductions involving linear programming and NP-hard problems. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to become a more effective, persistent and creative problem solver.
Course Aims: In this course, we introduce a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings. We also provide a primer on intractable problems, which forms the foundation of further study in theoretical computer science.
This course aims to develop students' theoretical knowledge in order to both design correct and efficient software and recognise the limitations of software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, our students will become more capable and responsible problem solvers.
Course Learning Outcomes: Explain how standard design techniques are used to develop algorithms
Integrate modeling skills and algorithmic knowledge for problem solving
Solve problems by creatively applying algorithm design techniques
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness
Formulate real-life scenarios as algorithmic problems
Communicate algorithmic ideas at different abstraction levels","Develop problem-solving software; Apply divide-and-conquer, greedy selection, and dynamic programming techniques; Address challenges in linear programming and NP-hard problems; Think critically about algorithm correctness and efficiency; Communicate effectively about algorithms",divide-and-conquer; greedy selection; dynamic programming; linear programming and NP-hard problems; Algorithmic solutions in sustainable farming and strategy games,Algorithmic solutions in sustainable farming and strategy games; Relationships between complex problems and feasible solutions; Use of algorithm design techniques in various domains; Primer on intractable problems for advanced studies in computer science,Understanding of efficient algorithm design and limitations; Proficiency in designing software for diverse fields like finance and logistics; Ability to apply theoretical principles to practical problems; Skills in producing high-quality technical documents using LaTeX; Evaluation of algorithm efficiency and justification of their correctness,"This course develops students' problem-solving skills through application of algorithm design techniques, such as divide-and-conquer, greedy selection, and dynamic programming."
COMP3891,Extended Operating Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3891&activityGroupId=1,"Operating systems are an essential part of computer systems, a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.","The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.","Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system","Course Description: Operating systems are an essential part of computer systems, a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.
Course Aims: The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.
Course Learning Outcomes: Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system",Create new functionality within an existing operating system; Analyze the behavior of an operating system and its components; Understand the structure and key components within a modern monolithic operating system; Apply common algorithms and implementation approaches used inside an operating system,"operating system architectures and components; computer systems; hardware APIs and SDKs; Processes, threads, concurrency management; File systems management; memory management; Scheduling techniques","Basic concepts, components, and behaviors of modern monolithic operating systems; Relevant characteristics of hardware; Processes, threads, concurrency; File systems, memory management, scheduling; Practical experience in operating system development",In-depth understanding of operating systems; Practical experience with software and hardware integration; Development of complex software systems; Holistic view of the software stack in modern computers; Whole system understanding of computer systems,"This course develops students' understanding of modern monolithic operating systems by providing practical experience in designing, analyzing, and implementing operating system components."
COMP3900,Computer Science Project,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3900&activityGroupId=1,"Welcome to the Information Technology/Computer Science Project Course, where theory meets practice in a hands-on exploration of real-world projects. This course is designed to elevate your programming skills by immersing you in the intricacies of coding, debugging, and optimizing software solutions. As you apply your theoretical knowledge of information technology/computer science concepts, algorithms, and data structures, you will actively bridge the gap between theoretical understanding and practical implementation. This course places a strong emphasis on teamwork and effective collaboration. You will navigate the challenges of group projects, learning to work seamlessly with peers, share responsibilities, and communicate ideas effectively. Beyond coding and collaboration, the course offers a comprehensive exploration of project management skills. From planning and scheduling to task prioritization, you will gain insights into the entire project lifecycle, experiencing firsthand the evolution of a concept into a completed solution. Furthermore, you will learn the art of crafting clear and concise project reports, and the skills to deliver impactful presentations.
You will work in teams of ideally five (5) members to define, implement and evaluate a real-world project. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. You will also get the chance to reflect on your own contributions and provide peer assessments of your team members.","This course aims to help students enhance their programming skills by working on real-world information technology/computer science projects. Students will gain hands-on experience in coding, debugging, and optimizing software solutions. Students will apply their theoretical knowledge of information technology/computer science concepts, algorithms, and data structures to design and implement practical projects. They will bridge the gap between theory and practice. Students will also learn to work effectively in teams, share responsibilities, and communicate with other team members. This course also aims to teach students project management skills, including planning, scheduling, and task prioritization. Students will experience the entire project lifecycle, from concept to completion. Students will improve their written and verbal communication skills, especially in the context of technical documentation. They will learn to write clear and concise project reports and deliver presentations.","apply software development and software project management tools proficiently
articulate technical information clearly through both spoken and written communication
design and develop a correct, efficient and robust software system from specification
collaborate efficiently within a project team, assuming leadership responsibilities when necessary
optimise time management skills and make reasoned trade-offs over competing demands
analyse a set of requirements, elaborate them, and produce a detailed specification
verify the correctness and robustness of software","Course Description: Welcome to the Information Technology/Computer Science Project Course, where theory meets practice in a hands-on exploration of real-world projects. This course is designed to elevate your programming skills by immersing you in the intricacies of coding, debugging, and optimizing software solutions. As you apply your theoretical knowledge of information technology/computer science concepts, algorithms, and data structures, you will actively bridge the gap between theoretical understanding and practical implementation. This course places a strong emphasis on teamwork and effective collaboration. You will navigate the challenges of group projects, learning to work seamlessly with peers, share responsibilities, and communicate ideas effectively. Beyond coding and collaboration, the course offers a comprehensive exploration of project management skills. From planning and scheduling to task prioritization, you will gain insights into the entire project lifecycle, experiencing firsthand the evolution of a concept into a completed solution. Furthermore, you will learn the art of crafting clear and concise project reports, and the skills to deliver impactful presentations.
You will work in teams of ideally five (5) members to define, implement and evaluate a real-world project. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. You will also get the chance to reflect on your own contributions and provide peer assessments of your team members.
Course Aims: This course aims to help students enhance their programming skills by working on real-world information technology/computer science projects. Students will gain hands-on experience in coding, debugging, and optimizing software solutions. Students will apply their theoretical knowledge of information technology/computer science concepts, algorithms, and data structures to design and implement practical projects. They will bridge the gap between theory and practice. Students will also learn to work effectively in teams, share responsibilities, and communicate with other team members. This course also aims to teach students project management skills, including planning, scheduling, and task prioritization. Students will experience the entire project lifecycle, from concept to completion. Students will improve their written and verbal communication skills, especially in the context of technical documentation. They will learn to write clear and concise project reports and deliver presentations.
Course Learning Outcomes: apply software development and software project management tools proficiently
articulate technical information clearly through both spoken and written communication
design and develop a correct, efficient and robust software system from specification
collaborate efficiently within a project team, assuming leadership responsibilities when necessary
optimise time management skills and make reasoned trade-offs over competing demands
analyse a set of requirements, elaborate them, and produce a detailed specification
verify the correctness and robustness of software",Apply development and management tools; Articulate technical information clearly; Design robust software systems; Collaborate and assume leadership; Optimize time management skills; Analyze and specify requirements; Verify software correctness and robustness,"project management; Agile software development methods, practices and tools; Team Collaboration; Professional team dynamics management; code debugging and testing

","Real-world IT/CS project exploration; Coding, debugging, optimizing solutions; Teamwork and effective collaboration; Project management and prioritization; Technical documentation and communication",Integrate theoretical and practical IT/CS; Manage full project lifecycle; Use project management tools; Enhance programming via real projects; Communicate effectively in teams,This course develops programming skills by applying theoretical knowledge to real-world projects through hands-on exploration and teamwork.
COMP3901,Special Project A,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Non%20Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP3901&activityGroupId=1,"Ever wondered what it's like to do research? Have a burning desire to solve an interesting problem of your own?
This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.","The course aims to give students a taste of doing research. One goal is to encourage students to think about continuing on to higher degree research.
By the end of the course, students should have completed their project and give a presentation on their work and write a report to describe in detail what they have achieved.","Work under supervision on a research or development project
Communicate the results of a project in both written and verbal form","Course Description: Ever wondered what it's like to do research? Have a burning desire to solve an interesting problem of your own?
This course aims to give excellent students an opportunity to work closely with a member of academic staff in a small research project or a substantial development project.
Course Aims: The course aims to give students a taste of doing research. One goal is to encourage students to think about continuing on to higher degree research.
By the end of the course, students should have completed their project and give a presentation on their work and write a report to describe in detail what they have achieved.
Course Learning Outcomes: Work under supervision on a research or development project
Communicate the results of a project in both written and verbal form",Work under supervision; Communicate results effectively,Experience in conducting research; Skills in detailed project documentation; Presentation of research findings,Research project completion; Development project execution; Project presentation and reporting,Experience in conducting research; Skills in detailed project documentation; Presentation of research findings,"This course allows excellent students to collaborate with academic staff on a small research project, enabling them to work on a problem and present findings."
COMP4141,Theory of Computation,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4141&activityGroupId=1,"Computability: formal languages and problems, Turing Machines (TMs), computability, (semi-)decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages (CFLs), Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic (and its role in a proof of Gödel's incompleteness result)",,"Understand what problems can (and cannot
Understand how we can express computation (finite state automata, push-down automata, Turing Machines, Probabilistic Turing Machines
Understand the notion of computational complexity and complexity classes (Logspace, P,NP, IP, PSPACE, Polynomial Hierarchy, Probabilistic Classes","Course Description: Computability: formal languages and problems, Turing Machines (TMs), computability, (semi-)decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages (CFLs), Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic (and its role in a proof of Gödel's incompleteness result). Course Learning Outcomes: Understand what problems can (and cannot
Understand how we can express computation (finite state automata, push-down automata, Turing Machines, Probabilistic Turing Machines
Understand the notion of computational complexity and complexity classes (Logspace, P,NP, IP, PSPACE, Polynomial Hierarchy, Probabilistic Classes","Analyze decidability, computability; Apply complexity class concepts; Utilize automata, Turing Machines; Implement formal language theory; Apply Hoare logic correctness","Formal languages, Turing Machines; Computability, semi-decidability concepts; Universal TMs, Church-Turing thesis; Halting problem, undecidability proofs; Complexity classes, non-determinism; Polynomial reductions, NP completeness; Regular expressions, context-free grammars; Determinisation, Chomsky normal form; Pumping lemma, push-down automata; Program semantics, correctness applications; linear programming and NP-hard problems 
","Formal languages; Turing Machines; Computability, semi-decidability concepts; Universal TMs, Church-Turing thesis; Halting problem; undecidability proofs; Complexity classes; non-determinism; Polynomial reductions; NP completeness; Regular expressions; context-free grammars; Determinisation; Chomsky normal form; Pumping lemma; push-down automata; Program semantics, correctness applications","Understand computability, limitations; Express computation models; Grasp computational complexity, classes; Apply theoretical concepts, solve problems","This course explores fundamental concepts in computer science, examining computability, complexity, languages, and semantics through theories of formal systems and algorithms."
COMP4601,Design Project B,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP4601&activityGroupId=1,"COMP4601 is a team-based project development course involving the analysis, design and implementation of embedded, high performance or low power FPGA-based accelerators using high-level synthesis.
Students study concepts through lectures and guided lab exercises during the first half of the course, when project teams are also formed and the project goals are developed. During the second half of the course, students are involved in presenting group seminars and working on their projects. The course finishes with final project presentations.","Apart from teaching the elements of how to design hardware using high-level synthesis and gaining an understanding of accelerator design, this course enhances research skills, sharpens design, implementation and presentation skills, allow students to explore solutions to open-ended problems, and provides opportunities to practice the rapid acquisition of new technical skills with state-of-the-art technology.","Explain and put into practice techniques for accelerating computation in hardware
Rapidly design and implement digital systems that incorporate programable logic as accelerators
Document and present the work of their team in a professional manner
Independently, and collectively study advanced techniques in digital design and implementation","Course Description: COMP4601 is a team-based project development course involving the analysis, design and implementation of embedded, high performance or low power FPGA-based accelerators using high-level synthesis.
Students study concepts through lectures and guided lab exercises during the first half of the course, when project teams are also formed and the project goals are developed. During the second half of the course, students are involved in presenting group seminars and working on their projects. The course finishes with final project presentations.
Course Aims: Apart from teaching the elements of how to design hardware using high-level synthesis and gaining an understanding of accelerator design, this course enhances research skills, sharpens design, implementation and presentation skills, allow students to explore solutions to open-ended problems, and provides opportunities to practice the rapid acquisition of new technical skills with state-of-the-art technology.
Course Learning Outcomes: Explain and put into practice techniques for accelerating computation in hardware
Rapidly design and implement digital systems that incorporate programable logic as accelerators
Document and present the work of their team in a professional manner
Independently, and collectively study advanced techniques in digital design and implementation","Explain, practice hardware acceleration; Design, implement digital systems; Document, present professionally; Study advanced digital design independently",hardware designs;  hardware APIs and SDKs; Team Collaboration,"Analysis, design, FPGA-based accelerators; High-level synthesis applications; Project development, team formation; Group seminars, project work; Final project presentations","Hardware design using high-level synthesis; Understanding accelerator design; Research skills enhancement; Design, implementation, presentation skills; Solutions for open-ended problems; Rapid skill acquisition in new technology",This course designs and implements FPGA-based accelerators using high-level synthesis through project development and presentation.
COMP4920,Professional Issues and Ethics in Information Technology,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4920&activityGroupId=1,"In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ""ethics washing"" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general.","To explore ethical issues for computer science, widely conceived. To examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examine.","Articulate the major normative and meta-ethical theories that underpin real, research-level moral debates in both academic and professional contexts
Build, articulate, and justify their own moral arguments - as well as how to analyse moral judgements and moral arguments in general
Recognise ethical issues and pitfalls in the professional practice of developing novel technologies, including AI (e
Discuss ethical dilemmas around specific technological case studies
Define and employ ethical values, principles, and practices for responsible research and innovation of technological and computing advances","Course Description: In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ""ethics washing"" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general.
Course Aims: To explore ethical issues for computer science, widely conceived. To examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examine.
Course Learning Outcomes: Articulate the major normative and meta-ethical theories that underpin real, research-level moral debates in both academic and professional contexts
Build, articulate, and justify their own moral arguments - as well as how to analyse moral judgements and moral arguments in general
Recognise ethical issues and pitfalls in the professional practice of developing novel technologies, including AI (e
Discuss ethical dilemmas around specific technological case studies
Define and employ ethical values, principles, and practices for responsible research and innovation of technological and computing advances","Articulate normative, meta-ethical theories; Build, justify moral arguments; Recognize ethical issues in technology; Discuss technological ethical dilemmas; Define ethical values for innovation","ethical issues in technology; AI model's vulnerability detection
","Exploration of computer science ethics; Examination of ethical claims, judgements; Construction, evaluation of ethical arguments; Utilitarian, deontological, virtue ethics; Ethics of AI, transparency, explainability","Understanding ethical frameworks in computing; Critical engagement with research ethics; Relationship between ethics and AI innovation; Ethics washing, accountability, privacy issues; Equity, bias, fairness in algorithms","This course explores ethical issues in computer science by examining moral debates, building arguments, and recognizing pitfalls in technological advancements."
COMP4951,Research Thesis A,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4951&activityGroupId=1,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience.","Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods","Course Description: The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
Course Aims: This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience.
Course Learning Outcomes: Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods",Apply engineering methods; Demonstrate professional communication; Reflect critically on knowledge; Complete tasks with effective planning; Analyze data using quantitative methods; Follow industry engineering standards,"Data cleaning; Data Analysis; project management; industry engineering standards
",Engineering principles application; Problem-solving through design and investigation; Thesis project complexity and creativity; Research and development practices; Thesis management and solution finding,Formulating engineering problems; Managing engineering projects; Developing in research environments; Investigating significant topics; Constructing substantial software/hardware systems,"This course enables students to apply engineering principles to innovate solutions, solving complex problems using scientific methods and communication skills."
COMP4952,Research Thesis B,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4952&activityGroupId=1,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree andis the second part of their capstone experience.","Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods","Course Description: The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
Course Aims: This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree andis the second part of their capstone experience.
Course Learning Outcomes: Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods",Apply engineering principles; Demonstrate professional communication; Reflect critically on knowledge; Manage complex projects effectively; Analyze data using quantitative methods; Adhere to engineering standards,"Data cleaning; Data Analysis; project management; industry engineering standards; agile software development; hardware designs
",Integration of engineering principles; Innovative problem-solving in engineering; Thesis project planning and execution; Research in engineering contexts; Development of software/hardware systems,Formulating engineering problems; Engineering project management; Developing research and development skills; Investigating significant engineering topics; Engineering methods application in practical projects,"This course develops skills by applying scientific and engineering methods to solve an engineering problem, requiring students to formulate problems, manage projects, and find solutions."
COMP4953,Research Thesis C,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4953&activityGroupId=1,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work.","Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods","Course Description: The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
Course Aims: This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work.
Course Learning Outcomes: Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods",Apply scientific and engineering methods; Demonstrate oral and written communication; Critically reflect on specialist knowledge; Complete complex tasks through planning and communication; Analyze data using quantitative methods; Carry out projects following professional standards,Data cleaning; Data Analysis; project management; industry engineering standards; agile software development; hardware designs,Integration of engineering principles; Innovative problem-solving; Thesis project planning and execution; Research and development in engineering; Development of significant software/hardware systems,Formulating engineering problems; Managing engineering projects; Developing skills in research environments; Investigating significant engineering topics; Application of engineering methods in practical projects,"This course applies engineering principles to innovatively solve problems, bringing together learned concepts to investigate a research topic or develop a significant software/hardware system."
COMP4961,Computer Science Thesis A,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4961&activityGroupId=1,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience.","Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods","Course Description: The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
Course Aims: This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and provides a capstone experience.
Course Learning Outcomes: Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods",Apply scientific and engineering methods; Demonstrate oral and written communication; Critically reflect on specialist knowledge; Complete complex tasks through planning and communication; Analyze data using quantitative methods; Carry out projects following professional standards,"Data cleaning; Data Analysis; project management; industry engineering standards; agile software development; hardware designs
",Integration of engineering principles; Innovative problem-solving; Thesis project planning and execution; Research and development in engineering; Development of significant software/hardware systems,Formulating engineering problems; Managing engineering projects; Developing skills in research environments; Investigating significant engineering topics; Application of engineering methods in practical projects,"This course allows students to apply learned engineering principles to solve complex problems, manage projects, and develop innovative solutions."
COMP4962,Computer Science Thesis B,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4962&activityGroupId=1,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree andis the second part of their capstone experience.","Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods","Course Description: The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
Course Aims: This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree andis the second part of their capstone experience.
Course Learning Outcomes: Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods",Apply scientific and engineering methods; Demonstrate oral and written communication; Critically reflect on specialist knowledge; Complete complex tasks through planning and communication; Analyze data using quantitative methods; Carry out projects following professional standards,"Data cleaning; Data Analysis; project management; industry engineering standards; agile software development; hardware designs
",Integration of engineering principles; Innovative problem-solving; Thesis project planning and execution; Research and development in engineering; Development of significant software/hardware systems,Formulating engineering problems; Managing engineering projects; Developing skills in research environments; Investigating significant engineering topics; Application of engineering methods in practical projects,"This course allows students to apply learned engineering principles to innovatively solve problems, developing critical thinking, communication, and project management skills."
COMP4963,Computer Science Thesis C,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP4963&activityGroupId=1,"The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.","This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work.","Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods","Course Description: The thesis provides an opportunity for you to bring together engineering principles learned over the previous years of study, and apply these principles to innovatively solve problems such as the development of a specific design and/or the investigation of a hypothesis. Thesis projects are complex, open-ended problems that allow room for your creativity, and the acquisition, analysis, and interpretation of results. Typically, the project you work with will have multiple possible solutions or conclusions and sufficient complexity to require a degree of project planning. The thesis requires you to formulate problems in engineering terms, manage an engineering project and find solutions by applying engineering methods. You will also develop an ability to work in a research and development environment.
Through the thesis, you will put into practice the knowledge and skills that you've learned in your study up to this point. You do this by investigating a research topic, developing a significant software/hardware system, or some combination of these.
Undergraduate theses consist of a single piece of work spread over three courses: Part A, Part B and Part C.
Course Aims: This course aims to give students an opportunity to work on a substantial problem using primarily their own initiative, with guidance from their supervisor. It comes in the last year of the degree and is the final part of their capstone experience. During Thesis C, students are expected to finish their project, evaluate the result, and write an overall report on the work.
Course Learning Outcomes: Apply scientific and engineering methods to solve an engineering problem
Demonstrate oral and written communication in professional and lay domains
Critically reflect on a specialist body of knowledge related to a topic
Complete complex tasks through effective planning and communication
Analyse data objectively using quantitative and mathematical methods
Carry out a project following industry and professional engineering standards and methods",Apply scientific and engineering methods; Demonstrate oral and written communication; Critically reflect on specialist knowledge; Complete complex tasks through planning and communication; Analyze data using quantitative methods; Carry out projects following industry and professional engineering standards,"Data cleaning; Data Analysis; project management; industry engineering standards; agile software development; hardware designs
",Integration of engineering principles; Innovative problem-solving; Thesis project planning and execution; Research and development in engineering; Development of significant software/hardware systems,Formulating engineering problems; Managing engineering projects; Developing skills in research environments; Investigating significant engineering topics; Application of engineering methods in practical projects,"This course applies engineering principles learned previously to innovatively solve complex problems, allowing students to bring together their accumulated knowledge and skills in a substantial research or development project."
COMP6080,Web Front-End Programming,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP6080&activityGroupId=1,"COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network & Asynchronous Programming, Front-end Testing, and other basic infrastructure.
This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.
COMP6080 is a challenging course. Front-end development is unlike most things you've experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they're hoping to achieve a high mark. We'd encourage you to reflect on this fact before you enrol in the course.","COMP6080 aims to develop your confidence in building modern web-based applications to industry standards.
COMP6080 is a higher-level elective course and assumes that you have the following:

A high level understanding of how interpreted scripting languages work (e.g. python), in terms of inputs, interpretation, loose typing, etc
Ability to use GIT as a version management tool
Basics of HTTP protocol and interacting with web browsers

Postgraduate students may need to familiarise themselves with GIT, if not already familiar.","Build stable applications that utilise concurrent programming through use of Javascript's asynchronous programming techniques
Able to apply Javascript semantics to design, construct, test and debug programs holistically 
Use Javascript and CSS frameworks to allow more efficient integration of existing code and components into a final product
Design and build interfaces that focus on best user experience and accessible design practices
Construct programs for web-front end with HTML, CSS, and DOM manipulation","Course Description: COMP6080 aims to develop your confidence in building modern web-based applications to industry standards. This occurs through the introduction of a range of basic concepts surrounding HTML, CSS, Vanilla Javascript, Javascript Declarative Frameworks, UI/UX Principles, Accessibility, Network & Asynchronous Programming, Front-end Testing, and other basic infrastructure.
This course has a heavy emphasis on industry voices, and as such a number of lectures will be given by current front-end developers from industry. These lectures primarily come from employees at Canva, a Sydney-based technology company that does a lot of work with front-end technologies.
COMP6080 is a challenging course. Front-end development is unlike most things you've experienced at university before. You will find the individual problems you solve much simpler than other level 6 courses, but the time you will feel that you spend on the aggregate of these issues will feel larger. A number of students will find this course quite time consuming if they're hoping to achieve a high mark. We'd encourage you to reflect on this fact before you enrol in the course.
Course Aims: COMP6080 aims to develop your confidence in building modern web-based applications to industry standards.
COMP6080 is a higher-level elective course and assumes that you have the following:

A high level understanding of how interpreted scripting languages work (e.g. python), in terms of inputs, interpretation, loose typing, etc
Ability to use GIT as a version management tool
Basics of HTTP protocol and interacting with web browsers

Postgraduate students may need to familiarise themselves with GIT, if not already familiar.
Course Learning Outcomes: Build stable applications that utilise concurrent programming through use of Javascript's asynchronous programming techniques
Able to apply Javascript semantics to design, construct, test and debug programs holistically 
Use Javascript and CSS frameworks to allow more efficient integration of existing code and components into a final product
Design and build interfaces that focus on best user experience and accessible design practices
Construct programs for web-front end with HTML, CSS, and DOM manipulation","Build stable applications using Javascript's asynchronous programming techniques; Apply Javascript semantics to design, construct, test, and debug programs; Use Javascript and CSS frameworks for efficient code integration; Design and build user-focused and accessible interfaces; Construct web-front end programs using HTML, CSS, and DOM manipulation","JavaScript (React/ React Native, Angular, Vue.js); CSS; DOM manipulation; Front-end; HTML; UI/UX principles and implementation; HTTP protocol; Shell Scripting languages; web application development; agile software development; UI design; Agile software development methods, practices and tools; Version control systems: Git, GitHub, GitLab; industry engineering standards; software testing, building and deployment
","Modern web application development; HTML basics; CSS styling; Vanilla Javascript and Javascript frameworks; UI/UX principles; Accessibility in web design; Network & asynchronous programming; Front-end testing; Industry-standard software development
",Understanding of interpreted scripting languages; Version management with GIT; Basics of HTTP protocol and web interaction; Integration of design and technology in front-end development; Practical application of industry insights in web development,"This course builds modern web-based applications to industry standards by introducing basic concepts in programming languages, frameworks, and principles."
COMP6131,Software Security Analysis,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP6131&activityGroupId=1,"This course is designed to provide a systematic exploration of automated source code analysis and verification techniques, with the aim of gaining hands-on experience in implementing code analysis tools to identify common yet important software vulnerabilities in software systems. By taking this course, students can put static analysis and verification theories and advanced techniques into practice. They will be able to build source code analysis tools(e.g., written in C++) based on modern compilers and popular open-source frameworks to scan, comprehend and detect programming mistakes and vulnerabilities with the purpose of enhancing code quality and security.","The primary goal of this course is to familiarize students with a variety of source code analysis techniques and algorithms, ranging from fundamental to state-of-the-art. Students will be encouraged to develop their own tools based on an open-source framework that uses a compiler, and they will learn how these techniques and tools can be applied to detect real-world code vulnerabilities. Upon completing the course, students will have a comprehensive understanding of the history of source code analysis, the current techniques used, and the future challenges that must be addressed in this field.","Explain source code vulnerabilities in system software and motivations for software analysis and verification
Develop source code verification techniques including constraint solving and assertion-based verification using automated theorem provers
Explain basic compiler intermediate representation and its importance for precise software vulnerability detection
Design and implement well-considered, high performance, static analysis algorithm to solve problems
Implement source code analysis techniques including control- and data-flow analysis 
Create effective and minimum unit tests and documentation to validate the correctness of the code analysis tools","Course Description: This course is designed to provide a systematic exploration of automated source code analysis and verification techniques, with the aim of gaining hands-on experience in implementing code analysis tools to identify common yet important software vulnerabilities in software systems. By taking this course, students can put static analysis and verification theories and advanced techniques into practice. They will be able to build source code analysis tools(e.g., written in C++) based on modern compilers and popular open-source frameworks to scan, comprehend and detect programming mistakes and vulnerabilities with the purpose of enhancing code quality and security.
Course Aims: The primary goal of this course is to familiarize students with a variety of source code analysis techniques and algorithms, ranging from fundamental to state-of-the-art. Students will be encouraged to develop their own tools based on an open-source framework that uses a compiler, and they will learn how these techniques and tools can be applied to detect real-world code vulnerabilities. Upon completing the course, students will have a comprehensive understanding of the history of source code analysis, the current techniques used, and the future challenges that must be addressed in this field.
Course Learning Outcomes: Explain source code vulnerabilities in system software and motivations for software analysis and verification
Develop source code verification techniques including constraint solving and assertion-based verification using automated theorem provers
Explain basic compiler intermediate representation and its importance for precise software vulnerability detection
Design and implement well-considered, high performance, static analysis algorithm to solve problems
Implement source code analysis techniques including control- and data-flow analysis 
Create effective and minimum unit tests and documentation to validate the correctness of the code analysis tools","Explain source code vulnerabilities in system software and motivations for software analysis and verification; Develop source code verification techniques including constraint solving and assertion-based verification using automated theorem provers; Explain basic compiler intermediate representation and its importance for precise software vulnerability detection; Design and implement high performance, static analysis algorithms; Implement source code analysis techniques including control- and data-flow analysis; Create effective and minimal unit tests and documentation to validate the correctness of code analysis tools",unit tests; compiler construction; software vulnerability detection,Automated source code analysis; Software vulnerability identification; Static analysis and verification theories; Development of source code analysis tools; Use of compilers and open-source frameworks for code analysis; Detection and enhancement of code quality and security,"Systematic exploration of code analysis and verification techniques; Hands-on tool development for software vulnerability detection; Integration of modern compilers in tool development; Application of advanced source code analysis techniques; Understanding the historical, current, and future aspects of source code analysis",This course implements code analysis tools to identify software vulnerabilities by providing hands-on experience with automated source code analysis and verification techniques.
COMP6443,Web Application Security and Testing,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP6443&activityGroupId=1,"Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.
This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.
The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.
A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.","This course aims to

extend students' understanding of security engineering
study vulnerabilities in web applications, and how to exploit/defend them","Understanding how these vulnerabilities are used by attackers, their characterising features, weaknesses and countermeasures
Have a knowledge of general web application security literacy, including the principal elements of contemporary web application vulnerabilities (such as cross site scripting, code injection, session stealing
Be able to work with web dev teams to design and create secure web applications
Have an understanding of issues and key principles of secure web application design and be able to apply these to assess and test web applications and web sites;","Course Description: Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.
This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.
The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.
A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.
Course Aims: This course aims to

extend students' understanding of security engineering
study vulnerabilities in web applications, and how to exploit/defend them
Course Learning Outcomes: Understanding how these vulnerabilities are used by attackers, their characterising features, weaknesses and countermeasures
Have a knowledge of general web application security literacy, including the principal elements of contemporary web application vulnerabilities (such as cross site scripting, code injection, session stealing
Be able to work with web dev teams to design and create secure web applications
Have an understanding of issues and key principles of secure web application design and be able to apply these to assess and test web applications and web sites;","Understand how vulnerabilities are used by attackers, including their features, weaknesses, and countermeasures; Gain web application security literacy, covering principal vulnerabilities like cross-site scripting and code injection; Collaborate with web development teams to design and create secure web applications; Understand and apply key principles of secure web application design to assess and test web applications and websites",software vulnerability detection; Security engineering in web development,"Web application vulnerabilities; Security engineering in web development; OWASP vulnerabilities including cross-site scripting, browser security models, injection attacks, and more; DNS, man-in-the-middle, data leakage, spoofing, UI, and social vulnerabilities; Assurance and testing standards in web security",Extended understanding of security engineering; Study of vulnerabilities in web applications and methods to exploit/defend against them; General knowledge of web application security practices; Ability to work independently and conduct self-directed research in web security,"This course teaches students how to develop secure web applications by learning about common vulnerabilities, best practices for coding and testing, and how to defend against attacks."
COMP6445,Digital Forensics,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP6445&activityGroupId=1,"The subject of Digital Forensics is a blend of technical expertise, legal procedures for an expert witness, persuasive report writing and your performance in the theatre of court. This course covers both forensic theory / professional practice, and looks at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use standard forensic tools to extract, carve and analyse data as well as learning the low-level technical skills and knowledge underlying them. Students will also be introduced to advanced topics such as Cloud Forensics and latest anti-forensics techniques.
COMP6445 and COMP6845 run in an overlapping mode. Both share a set of common activities and assessments; however COMP6845 students have additional extension activities and assessments related to digital forensics. These activities offer more advanced and in-depth study of the topic.COMP6445 students are welcome to attend the extended lectures. The information below applies to both courses except where otherwise indicated.
By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them. The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging, and Mobile Forensics.
Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings. Digital Forensics students are invited to participate in a mock courtroom experience involving testimony and cross-examination of digital forensics expert witnesses. We plan to run a mock civil trial of company vs rogue employee with a presiding Judge, and lecturers acting as advocates and students as expert witnesses.","The course aims to:

Provide students with a solid foundation in the principles and techniques used to hide, discover, interpret, and respond to digital traces effectively.
Enable students to gain proficiency in extracting, carving, and analyzing data using a wide range of digital forensics tools.
Introduce students to advanced areas of digital forensics, such as anti-forensics techniques designed to hinder investigation, as well as the unique challenges posed by cloud-based environments.
Develop students' skills in presenting their forensic findings in a manner that meets the requirements for admissibility in court trials.

The course is a core component of the Cybersecurity major.","Apply forensic analysis on common systems
Illustrate an understanding of digital forensics to design, conduct, and report on effective forensic investigations
Explain issues and key principles of professional digital forensic practice (including chain of custody and best practice procedures
Extract and infer digital traces of activity
Apply working knowledge of the principle elements of digital forensic literacy (such as Windows, Linux and OSX disk structures, machine memory structure, operating system structure caches logging and redundancy, device design authentication operation and weakness, boot and initialisation sequences, storage encryption, network logging, stealth techniques and anti forensic strategies","Course Description: The subject of Digital Forensics is a blend of technical expertise, legal procedures for an expert witness, persuasive report writing and your performance in the theatre of court. This course covers both forensic theory / professional practice, and looks at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use standard forensic tools to extract, carve and analyse data as well as learning the low-level technical skills and knowledge underlying them. Students will also be introduced to advanced topics such as Cloud Forensics and latest anti-forensics techniques.
COMP6445 and COMP6845 run in an overlapping mode. Both share a set of common activities and assessments; however COMP6845 students have additional extension activities and assessments related to digital forensics. These activities offer more advanced and in-depth study of the topic.COMP6445 students are welcome to attend the extended lectures. The information below applies to both courses except where otherwise indicated.
By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them. The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging, and Mobile Forensics.
Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings. Digital Forensics students are invited to participate in a mock courtroom experience involving testimony and cross-examination of digital forensics expert witnesses. We plan to run a mock civil trial of company vs rogue employee with a presiding Judge, and lecturers acting as advocates and students as expert witnesses.
Course Aims: The course aims to:

Provide students with a solid foundation in the principles and techniques used to hide, discover, interpret, and respond to digital traces effectively.
Enable students to gain proficiency in extracting, carving, and analyzing data using a wide range of digital forensics tools.
Introduce students to advanced areas of digital forensics, such as anti-forensics techniques designed to hinder investigation, as well as the unique challenges posed by cloud-based environments.
Develop students' skills in presenting their forensic findings in a manner that meets the requirements for admissibility in court trials.

The course is a core component of the Cybersecurity major.
Course Learning Outcomes: Apply forensic analysis on common systems
Illustrate an understanding of digital forensics to design, conduct, and report on effective forensic investigations
Explain issues and key principles of professional digital forensic practice (including chain of custody and best practice procedures
Extract and infer digital traces of activity
Apply working knowledge of the principle elements of digital forensic literacy (such as Windows, Linux and OSX disk structures, machine memory structure, operating system structure caches logging and redundancy, device design authentication operation and weakness, boot and initialisation sequences, storage encryption, network logging, stealth techniques and anti forensic strategies","Apply forensic analysis on common systems; Illustrate an understanding of digital forensics to design, conduct, and report on effective forensic investigations; Explain issues and key principles of professional digital forensic practice, including chain of custody and best practice procedures; Extract and infer digital traces of activity; Apply working knowledge of the principle elements of digital forensic literacy, such as disk structures, memory structure, operating system caches, and anti-forensic strategies","Forensic principles and techniques; Memory, disk, and network forensics; anti-forensics techniques; cloud forensics; mobile forensics
","Technical and legal aspects of digital forensics; Use of forensic tools for data extraction and analysis; Low-level technical skills underpinning digital forensics; Advanced topics in digital forensics, including cloud and anti-forensics techniques; Professional forensic practices, such as chain of custody and record-keeping; Memory, disk, network, device, and mobile forensics; Ethical considerations in digital forensics; Mock courtroom experience for practical understanding of forensic testimony",Principles and techniques for uncovering hidden data; using forensic tools; understanding of operating systems and network behaviors; legal standards for evidence handling and presentation; advanced digital forensics topics,"This course explores forensic analysis by extracting, carving, analyzing data, and presenting findings in a court-triable manner."
COMP6451,Cryptocurrency and Distributed Ledger Technologies,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP6451&activityGroupId=1,"Cryptocurrency and Distributed Ledger Technologies are a currently emerging area of technology that draws on multiple areas of computer science to implement systems that provide secure infrastructure for important societal functions, including financial transactions and the management of commercial trust relationships.
This course aims to develop an understanding of the requirements for electronic payment systems and how these requirements are realised using distributed ledger technologies. The technical ideas to be understood include the key cryptographic constructs, economic incentive mechanisms and distributed algorithms underpinning cryptocurrencies such as Bitcoin and Ethereum. The concept of smart contract will be introduced, and the course aims to develop a basic facility with programming smart contracts on one cryptocurrency platform. The course also aims to introduce students to the broader context of the range of alternate designs for distributed ledger technologies, the range of potential applications for these technologies, and the socio-economic, ethical and legal dimensions of their use.","The aim of the course is to provide an overview of this area and to introduce students to the underpinning technical areas of computer science including cryptography, distributed computing, and secure coding. The course provides an initial exposure to the novel concerns in application programming that these technologies introduce.Due to the socio-technical nature of the field, the course also aims to develop students' knowledge of the applications being addressed using the technology, and the ethical, economic and legal issues that are inherent in these applications.","Understand the concept of decentralisation and the functional and security requirements for cryptocurrency and distributed ledger applications
Understand the functioning of the proof of work protocol, cryptographic mechanisms and transactional structures underpinning the design of cryptocurrencies including Bitcoin and Ethereum
Be able to program and deploy simple smart contracts on the Ethereum platform
Be aware of the range of design dimensions of distributed ledger technologies, including in consensus protocol design, open versus closed blockchains, levels of privacy, transactional expressiveness, and governance structure
Have an awareness of key aspects of the ethical, socio-economic and legal dimensions of cryptocurrency and distributed ledger technologies, including their positive and negative repercussions and challenges for regulatory authorities","Course Description: Cryptocurrency and Distributed Ledger Technologies are a currently emerging area of technology that draws on multiple areas of computer science to implement systems that provide secure infrastructure for important societal functions, including financial transactions and the management of commercial trust relationships.
This course aims to develop an understanding of the requirements for electronic payment systems and how these requirements are realised using distributed ledger technologies. The technical ideas to be understood include the key cryptographic constructs, economic incentive mechanisms and distributed algorithms underpinning cryptocurrencies such as Bitcoin and Ethereum. The concept of smart contract will be introduced, and the course aims to develop a basic facility with programming smart contracts on one cryptocurrency platform. The course also aims to introduce students to the broader context of the range of alternate designs for distributed ledger technologies, the range of potential applications for these technologies, and the socio-economic, ethical and legal dimensions of their use.
Course Aims: The aim of the course is to provide an overview of this area and to introduce students to the underpinning technical areas of computer science including cryptography, distributed computing, and secure coding. The course provides an initial exposure to the novel concerns in application programming that these technologies introduce.Due to the socio-technical nature of the field, the course also aims to develop students' knowledge of the applications being addressed using the technology, and the ethical, economic and legal issues that are inherent in these applications.
Course Learning Outcomes: Understand the concept of decentralisation and the functional and security requirements for cryptocurrency and distributed ledger applications
Understand the functioning of the proof of work protocol, cryptographic mechanisms and transactional structures underpinning the design of cryptocurrencies including Bitcoin and Ethereum
Be able to program and deploy simple smart contracts on the Ethereum platform
Be aware of the range of design dimensions of distributed ledger technologies, including in consensus protocol design, open versus closed blockchains, levels of privacy, transactional expressiveness, and governance structure
Have an awareness of key aspects of the ethical, socio-economic and legal dimensions of cryptocurrency and distributed ledger technologies, including their positive and negative repercussions and challenges for regulatory authorities","Understand decentralization and security requirements; Comprehend cryptographic mechanisms and proof of work; Program and deploy Ethereum smart contracts; Analyze distributed ledger design dimensions; Evaluate ethical, socio-economic, and legal implications
","Cryptography, distributed computing, secure coding fundamentals; ethics in cryptography","Cryptography, distributed computing, secure coding fundamentals; Economic mechanisms, algorithms in cryptocurrencies; Smart contract programming, deployment; Alternate designs, applications of ledger technologies; Socio-economic, ethical, legal dimensions analysis
","Overview of cryptocurrency, ledger technologies; Understanding electronic payment systems, ledger requirements; Exposure to novel programming concerns; Insight into applications, ethical, economic, legal issues
",This course develops understanding of secure infrastructure for financial transactions using distributed ledger technologies like Bitcoin and Ethereum.
COMP6452,Software Architecture for Blockchain Applications,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP6452&activityGroupId=1,"This course addresses the knowledge that is needed in order to build applications based on blockchain technology, by offering an architectural view of software systems that make beneficial use of it. It provides guidance on assessing the suitability of blockchain, on the roles blockchain can play in an architecture, on designing blockchain applications, and on assessing different architecture designs and tradeoffs. It also serves as a reference on blockchain design patterns and design analysis, and refers to practical examples of blockchain-based applications.
The course covers the following:
a general introduction to the topic and to existing blockchain platforms including Bitcoin, Ethereum, and Hyperledger Fabric, and offers examples of blockchain-based applications;the functional aspects of software architecture are covered, describing the main roles blockchain can play in an architecture, as well as its potential suitability and design process;non-functional aspects of blockchain applications, which are often cross-cutting concerns including cost estimation, performance, security;
Real-world use cases will be covered, offering additional insights from a practical perspective.",The course aims to produce graduates who can analyse blockchain scenarios and design effective solutions using blockchain technology.,"decide the suitability of blockchains and how to design applications on them
build small applications on blockchain
explainthe principles of blockchain and which roles it can play in an application architecture
make functional and non-functional trade-offs for blockchain-based applications","Course Description: This course addresses the knowledge that is needed in order to build applications based on blockchain technology, by offering an architectural view of software systems that make beneficial use of it. It provides guidance on assessing the suitability of blockchain, on the roles blockchain can play in an architecture, on designing blockchain applications, and on assessing different architecture designs and tradeoffs. It also serves as a reference on blockchain design patterns and design analysis, and refers to practical examples of blockchain-based applications.
The course covers the following:
a general introduction to the topic and to existing blockchain platforms including Bitcoin, Ethereum, and Hyperledger Fabric, and offers examples of blockchain-based applications;the functional aspects of software architecture are covered, describing the main roles blockchain can play in an architecture, as well as its potential suitability and design process;non-functional aspects of blockchain applications, which are often cross-cutting concerns including cost estimation, performance, security;
Real-world use cases will be covered, offering additional insights from a practical perspective.
Course Aims: The course aims to produce graduates who can analyse blockchain scenarios and design effective solutions using blockchain technology.
Course Learning Outcomes: decide the suitability of blockchains and how to design applications on them
build small applications on blockchain
explainthe principles of blockchain and which roles it can play in an application architecture
make functional and non-functional trade-offs for blockchain-based applications","Decide blockchain suitability and application design; Build small applications on blockchain platforms; Explain blockchain principles and architectural roles; Assess functional and non-functional trade-offs
",Knowledge of blockchain technology,"Blockchain technology introduction and platforms; Software architecture roles of blockchain; Design process and suitability of blockchain; Non-functional aspects: cost, performance, security; Real-world blockchain application use cases
","Analyze blockchain scenarios and design solutions; Understand blockchain design patterns and analysis; Practical examples of blockchain-based applications; Trade-offs in blockchain application architecture
","This course explores, equips students with knowledge and skills needed to build applications using blockchain technology by analyzing scenarios and designing effective solutions."
COMP6713,Natural Language Processing,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP6713&activityGroupId=1,"Natural language processing (NLP) is a branch of artificial intelligence that deals with computational approaches used to process text.
Human language (i.e., natural language) is inherently ambiguous. Ambiguity resolution using computational techniques is at the heart of NLP. As a result, the advancements in NLP can be visualized as three generations: rule-based, statistical and neural. The course introduces the three generations of NLP through the philosophy of ambiguity resolution being the core task of NLP. The content covers different NLP sub-problems (such as POS tagging, sentiment classification, named entity recognition, machine translation and summarisation), and typical approaches in the three generations to tackle these sub-problems.
With recent advancements in large language models, there has been a renewed interest in NLP from industry and research alike. However, NLP precedes large language models. The exposition of NLP centered around ambiguity resolution helps to develop an understanding of the past and the present of NLP.","This course aims to introduce students to the main topics and methods in the field of natural language processing, ranging from rule-based and statistical models to the recent innovation in neural models for various NLP sub-problems.","Describe NLP problems such as POS tagging, sentiment analysis, information extraction and machine translation along with their challenges in terms of ambiguity resolution
Design an NLP solution by selecting the NLP problem formulation, approach and evaluation strategy, by analysing the requirements of a specific application
Explain typical NLP strategies based on statistical and neural approaches
Train NLP models using NLP libraries (e","Course Description: Natural language processing (NLP) is a branch of artificial intelligence that deals with computational approaches used to process text.
Human language (i.e., natural language) is inherently ambiguous. Ambiguity resolution using computational techniques is at the heart of NLP. As a result, the advancements in NLP can be visualized as three generations: rule-based, statistical and neural. The course introduces the three generations of NLP through the philosophy of ambiguity resolution being the core task of NLP. The content covers different NLP sub-problems (such as POS tagging, sentiment classification, named entity recognition, machine translation and summarisation), and typical approaches in the three generations to tackle these sub-problems.
With recent advancements in large language models, there has been a renewed interest in NLP from industry and research alike. However, NLP precedes large language models. The exposition of NLP centered around ambiguity resolution helps to develop an understanding of the past and the present of NLP.
Course Aims: This course aims to introduce students to the main topics and methods in the field of natural language processing, ranging from rule-based and statistical models to the recent innovation in neural models for various NLP sub-problems.
Course Learning Outcomes: Describe NLP problems such as POS tagging, sentiment analysis, information extraction and machine translation along with their challenges in terms of ambiguity resolution
Design an NLP solution by selecting the NLP problem formulation, approach and evaluation strategy, by analysing the requirements of a specific application
Explain typical NLP strategies based on statistical and neural approaches
Train NLP models using NLP libraries ",NLP problem solving; NLP model training,NLP; POS tagging; sentiment analysis; machine translation; named entity recognition; summarization,POS tagging; sentiment analysis; machine translation; named entity recognition; summarization,rule-based NLP; statistical NLP; neural NLP,"This course introduces students to natural language processing, covering rule-based, statistical, and neural approaches to process text, resolve ambiguity, and tackle various sub-problems."
COMP6733,Internet of Things Experimental Design Studio,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP6733&activityGroupId=1,"Internet of Things (IoT) will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with hands-on experience with a popular end-to-end IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications (Bluetooth Low Energy and 6LoWPAN) and security issues, sensors and sensor data smoothing and filtering, light-weight in-situ machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voice-based stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C.",The course aims to introduce students to sophisticated IoT wireless networked embedded hardware and services and their use in solving real-world problems.,"Will be able to demonstrate their knowledge by both describing aspects of IoT building blocks and solving real-world problems using end-to-end IoT solutions
Will have practical experience with IoT technologies covered in the laboratory exercises and final project undertaken
Have a working knowledge of the fundamental building blocks of Internet of Things such as low power communications and networking,light-weightin-situ signal processing, classification and data fusion, security and privacy, and cloud services
Will have practical experience with teamwork and project management with final project undertaken","Course Description: Internet of Things (IoT) will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with hands-on experience with a popular end-to-end IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications (Bluetooth Low Energy and 6LoWPAN) and security issues, sensors and sensor data smoothing and filtering, light-weight in-situ machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voice-based stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C.
Course Aims: The course aims to introduce students to sophisticated IoT wireless networked embedded hardware and services and their use in solving real-world problems.
Course Learning Outcomes: Will be able to demonstrate their knowledge by both describing aspects of IoT building blocks and solving real-world problems using end-to-end IoT solutions
Will have practical experience with IoT technologies covered in the laboratory exercises and final project undertaken
Have a working knowledge of the fundamental building blocks of Internet of Things such as low power communications and networking,light-weightin-situ signal processing, classification and data fusion, security and privacy, and cloud services
Will have practical experience with teamwork and project management with final project undertaken",IoT system design; end-to-end IoT solutions; IoT platform usage; project management,IoT system design; end-to-end IoT solutions; IoT platform usage; project management; IoT technology; sensor data processing; machine learning in IoT; IoT security; IoT system architecture; IoT cloud services; embedded hardware for IoT, IoT technology; sensor data processing; machine learning in IoT; IoT security,low power communications; IoT system architecture; IoT cloud services; embedded hardware for IoT,This course explores by designing and developing Internet of Things (IoT) applications using hands-on experiments with a popular end-to-end IoT platform.
COMP6741,Algorithms for Intractable Problems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP6741&activityGroupId=1,"The course focuses on algorithms for solving intractable computational problems, so-called NP-hard problems. Ideally, one would want to design algorithms that solve each instance exactly and in polynomial time. But since no polynomial time algorithm is known for any NP-hard problem, we will relax these requirements and design algorithms that either do not solve the problem exactly, that only solve a subset of instances, or whose worst-case running time is super-polynomial in the input size or some other parameter of the input.
Among algorithms that do not solve the problem exactly, we discuss heuristics and approximation algorithms. Heuristics do not guarantee to compute optimal solutions but tend to work well in practice. Approximation algorithms give additional guarantees of the quality of computed solution as compared to the optimal solution.
Among algorithms that only solve a subset of instances, we discuss graph classes where NP-hard graph problems often become polynomial-time solvable when the input is restricted to these classes.
Among algorithms that do not run in polynomial time, we discuss exponential-time algorithms and parameterized algorithms. In exponential-time algorithms we discuss algorithmic techniques to solve NP-hard problems provably faster than brute-force in the worst case. In parameterized algorithms, a parameter k is associated with each instance and the goal is to design algorithms whose worst-case running time is fast whenever k is small. We will also see lower bounds for problems and how to rule out certain running times under various complexity assumptions.
In addition to deterministic algorithms, we discuss speed-ups if we have access to randomised algorithms or quantum algorithms.","NP-hard problems are often at the core of the most challenging, rewarding, and lucrative computational problems in all areas of science and technology. This course will outline principled ways to approach these problems and will give students a better understanding of when and why NP-hard computational problem can be solved with reasonable resources.","design heuristics and approximation algorithms for NP-hard problems, as well as polynomial-time algorithms for restricted classes of instances
design new proofs showing that certain problems cannot be solved in subexponential time or faster than a specific exponential time bound assuming the (Strong
design new proofs showing that certain parameterizations of problems are not fixed-parameter tractable unless FPT = W[1]
design parameterized algorithms for NP-hard problems using a variety of algorithmic methods
design and analyse non-trivial exponential time algorithms for NP-hard problems using a variety of algorithmic methods","Course Description: The course focuses on algorithms for solving intractable computational problems, so-called NP-hard problems. Ideally, one would want to design algorithms that solve each instance exactly and in polynomial time. But since no polynomial time algorithm is known for any NP-hard problem, we will relax these requirements and design algorithms that either do not solve the problem exactly, that only solve a subset of instances, or whose worst-case running time is super-polynomial in the input size or some other parameter of the input.
Among algorithms that do not solve the problem exactly, we discuss heuristics and approximation algorithms. Heuristics do not guarantee to compute optimal solutions but tend to work well in practice. Approximation algorithms give additional guarantees of the quality of computed solution as compared to the optimal solution.
Among algorithms that only solve a subset of instances, we discuss graph classes where NP-hard graph problems often become polynomial-time solvable when the input is restricted to these classes.
Among algorithms that do not run in polynomial time, we discuss exponential-time algorithms and parameterized algorithms. In exponential-time algorithms we discuss algorithmic techniques to solve NP-hard problems provably faster than brute-force in the worst case. In parameterized algorithms, a parameter k is associated with each instance and the goal is to design algorithms whose worst-case running time is fast whenever k is small. We will also see lower bounds for problems and how to rule out certain running times under various complexity assumptions.
In addition to deterministic algorithms, we discuss speed-ups if we have access to randomised algorithms or quantum algorithms.
Course Aims: NP-hard problems are often at the core of the most challenging, rewarding, and lucrative computational problems in all areas of science and technology. This course will outline principled ways to approach these problems and will give students a better understanding of when and why NP-hard computational problem can be solved with reasonable resources.
Course Learning Outcomes: design heuristics and approximation algorithms for NP-hard problems, as well as polynomial-time algorithms for restricted classes of instances
design new proofs showing that certain problems cannot be solved in subexponential time or faster than a specific exponential time bound assuming the (Strong
design new proofs showing that certain parameterizations of problems are not fixed-parameter tractable unless FPT = W[1]
design parameterized algorithms for NP-hard problems using a variety of algorithmic methods
design and analyse non-trivial exponential time algorithms for NP-hard problems using a variety of algorithmic methods", heuristic algorithm design; approximation algorithm development; parameterized algorithm design; exponential-time algorithm analysis," heuristic algorithm design; approximation algorithm development; parameterized algorithm design; exponential-time algorithm analysis; algorithm analysis; linear programming and NP-hard problems; randomized and quantum algorithms
",NP-hard problems; algorithmic complexity; graph theory applications; randomized and quantum algorithms,computational complexity theory; parameterized complexity; lower bounds in computational complexity; algorithmic techniques for NP-hard problems,"This course develops algorithms to solve computationally intractable problems, designing heuristics, approximations, polynomial-time solutions, and exponential-time algorithms for NP-hard problems."
COMP6771,Advanced C++ Programming,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP6771&activityGroupId=1,"COMP6771 is an advanced programming course teaching practical aspects of intermediate/advanced C++ programming. The course focuses on teaching the fundamentals of C++, followed by exploring powerful abstractions that C++ enables. This course focuses on using abstractions as well as building abstractions.
COMP6771 is focused on modern, practical programming methods and tools. This course is designed for latter year CSE students with a reasonable degree of programming competencies.
The course is heavily supported by Christopher Di Bella , a UNSW CSE graduate who is a well-regarded expert on C++. His knowledge and expertise assists in forming and updating the course.
Our aim for students who complete this course satisfactorily is that they are highly competent in understanding C++ and it's core features, being able to build complex programs, data structures, and algorithms with C++, and being ready to immediately move into the workforce in areas that rely heavily on C++.
COMP6771 can be a challenging course for students due to the volume of work to complete in a 10 week period.","This course aims to introduce the students to intermediate and advanced programming using C++. Students will be exposed to the core features of advance C++ with emphasis on how to incorporate them into well designed C++ programs. The first part of the course will introduce the basic features of C++, including references, functions, classes, C++ STL, operator overloading, and copy control. The second part will focus on more advanced topics such as exception handling, memory management, templates and generic programming, C++ template metaprogramming, input/output with C++ iostreams, C++ and efficiency issues, RTTI and effective C++ design guidelines. The structure, principles, and fundamental uses of the C++ Standard Library (including the Standard Template Library) will be introduced.
The course will be useful to those who wish to get a strong understanding of practical aspects of C++.","Design, build, and test C++ programs
Use advanced C++ features in program development
Set up build and testing environments for C++ programs
Distinguish good, modern, widely-used practices from more outdated practices
Build abstractions (data structures, algorithms
Use abstractions (data structures, algorithms","Course Description: COMP6771 is an advanced programming course teaching practical aspects of intermediate/advanced C++ programming. The course focuses on teaching the fundamentals of C++, followed by exploring powerful abstractions that C++ enables. This course focuses on using abstractions as well as building abstractions.
COMP6771 is focused on modern, practical programming methods and tools. This course is designed for latter year CSE students with a reasonable degree of programming competencies.
The course is heavily supported by Christopher Di Bella , a UNSW CSE graduate who is a well-regarded expert on C++. His knowledge and expertise assists in forming and updating the course.
Our aim for students who complete this course satisfactorily is that they are highly competent in understanding C++ and it's core features, being able to build complex programs, data structures, and algorithms with C++, and being ready to immediately move into the workforce in areas that rely heavily on C++.
COMP6771 can be a challenging course for students due to the volume of work to complete in a 10 week period.
Course Aims: This course aims to introduce the students to intermediate and advanced programming using C++. Students will be exposed to the core features of advance C++ with emphasis on how to incorporate them into well designed C++ programs. The first part of the course will introduce the basic features of C++, including references, functions, classes, C++ STL, operator overloading, and copy control. The second part will focus on more advanced topics such as exception handling, memory management, templates and generic programming, C++ template metaprogramming, input/output with C++ iostreams, C++ and efficiency issues, RTTI and effective C++ design guidelines. The structure, principles, and fundamental uses of the C++ Standard Library (including the Standard Template Library) will be introduced.
The course will be useful to those who wish to get a strong understanding of practical aspects of C++.
Course Learning Outcomes: Design, build, and test C++ programs
Use advanced C++ features in program development
Set up build and testing environments for C++ programs
Distinguish good, modern, widely-used practices from more outdated practices
Build abstractions (data structures, algorithms
Use abstractions (data structures, algorithms",Advanced C++ programming; building and using abstractions; memory management; software testing,"C++; abstract data types; memory management; Standard Template Library (STL); testing frameworks and practices; code debugging and testing

",Intermediate and advanced C++ features; Standard Template Library (STL); C++ memory management; C++ design patterns,C++ syntax and semantics; generic programming with templates; exception handling; effective C++ design practices,"This course teaches students to design, build, test, and use advanced C++ features in program development."
COMP6845,Extended Digital Forensics and Incident Response,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP6845&activityGroupId=1,"The subject of Digital Forensics is a blend of technical expertise, legal procedures for an expert witness, persuasive report writing and your performance in the theatre of court. This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract, carve and analyse data as well as learning the low-level technical skills and knowledge underlying them. Students will also be introduced to advanced topics such as Cloud Forensics and latest anti-forensics techniques.
COMP6445 and COMP6845 run in an overlapping mode. Both share a set of common activities and assessments; however COMP6845 students have additional extension activities and assessments related to digital forensics. These activities offer more advanced and in-depth study of the topic.
The information below applies to both courses except where otherwise indicated. The main differences between COMP6445 and COMP6845 derive from the motivations behind them, unlike other SECedu courses, the extended course (COMP6845) is not only exclusively a more technical deep dive into core (COMP6445) concepts but also exposes students to advanced topics in Digital Forensics such as Splunk Logging, iOS and Android Forensics. Hence, COMP6845 includes a deeper dive into more technical aspects of digital forensics. This is achieved through additional weekly workshop/lecture during the term.
COMP6445 students are welcome to attend the extended lectures.
By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them. The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging, and Mobile Forensics. Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings. Digital Forensics students are invited to participate in a mock courtroom experience involving testimony and cross-examination of digital forensics expert witnesses. We plan to run a mock civil trial of company vs rogue employee with a presiding Judge, and lecturers acting as advocates and students as expert witnesses.","The course aims to:

Provide students with a solid foundation in the principles and techniques used to hide, discover, interpret, and respond to digital traces effectively.
Enable students to gain proficiency in extracting, carving, and analyzing data using a wide range of digital forensics tools.
Introduce students to advanced areas of digital forensics, such as anti-forensics techniques designed to hinder investigation, as well as the unique challenges posed by cloud-based environments.
Develop students' skills in presenting their forensic findings in a manner that meets the requirements for admissibility in court trials.

The course can be used as a core component of the Cybersecurity major.","Apply forensic analysis on common systems
Have an applied working knowledge of the principle elements of digital forensic literacy (such as Windows, Linux and OSX disk structures, machine memory structure, operating system structure caches logging and redundancy, device design authentication operation and weakness, boot and initialisation sequences, storage encryption, network logging, stealth techniques and anti forensic strategies
Illustrate an understanding of digital forensics to design, conduct, and report on effective forensic investigations
Explain issues and key principles of professional digital forensic practice (including chain of custody and best practice procedures
Extract and infer digital traces of activity","Course Description: The subject of Digital Forensics is a blend of technical expertise, legal procedures for an expert witness, persuasive report writing and your performance in the theatre of court. This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract, carve and analyse data as well as learning the low-level technical skills and knowledge underlying them. Students will also be introduced to advanced topics such as Cloud Forensics and latest anti-forensics techniques.
COMP6445 and COMP6845 run in an overlapping mode. Both share a set of common activities and assessments; however COMP6845 students have additional extension activities and assessments related to digital forensics. These activities offer more advanced and in-depth study of the topic.
The information below applies to both courses except where otherwise indicated. The main differences between COMP6445 and COMP6845 derive from the motivations behind them, unlike other SECedu courses, the extended course (COMP6845) is not only exclusively a more technical deep dive into core (COMP6445) concepts but also exposes students to advanced topics in Digital Forensics such as Splunk Logging, iOS and Android Forensics. Hence, COMP6845 includes a deeper dive into more technical aspects of digital forensics. This is achieved through additional weekly workshop/lecture during the term.
COMP6445 students are welcome to attend the extended lectures.
By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them. The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging, and Mobile Forensics. Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings. Digital Forensics students are invited to participate in a mock courtroom experience involving testimony and cross-examination of digital forensics expert witnesses. We plan to run a mock civil trial of company vs rogue employee with a presiding Judge, and lecturers acting as advocates and students as expert witnesses.
Course Aims: The course aims to:

Provide students with a solid foundation in the principles and techniques used to hide, discover, interpret, and respond to digital traces effectively.
Enable students to gain proficiency in extracting, carving, and analyzing data using a wide range of digital forensics tools.
Introduce students to advanced areas of digital forensics, such as anti-forensics techniques designed to hinder investigation, as well as the unique challenges posed by cloud-based environments.
Develop students' skills in presenting their forensic findings in a manner that meets the requirements for admissibility in court trials.

The course can be used as a core component of the Cybersecurity major.
Course Learning Outcomes: Apply forensic analysis on common systems
Have an applied working knowledge of the principle elements of digital forensic literacy (such as Windows, Linux and OSX disk structures, machine memory structure, operating system structure caches logging and redundancy, device design authentication operation and weakness, boot and initialisation sequences, storage encryption, network logging, stealth techniques and anti forensic strategies
Illustrate an understanding of digital forensics to design, conduct, and report on effective forensic investigations
Explain issues and key principles of professional digital forensic practice (including chain of custody and best practice procedures
Extract and infer digital traces of activity",Digital forensic analysis; data extraction and carving; use of forensic tools; courtroom presentation,"Forensic principles and techniques; Memory, disk, and network forensics; anti-forensics techniques; cloud forensics; mobile forensics","Memory, disk, and network forensics; anti-forensics techniques; cloud forensics; mobile forensics",Forensic principles and techniques; digital traces and metadata analysis; professional forensic practices; ethical implications of digital forensics,"This course explores the technical skills and knowledge underlying digital forensics, including data extraction, analysis, and presentation."
COMP9020,Foundations of Computer Science,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9020&activityGroupId=1,"The official scope is: mathematical methods for designing correct and efficient programs; mathematics for algorithm analysis; logic for proving and verification.
The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: set and relation theory; induction, recursion and recurrence relations; order of growth of functions; structured counting (combinatorics); discrete probability; graph theory and trees for algorithmic applications; propositional logic and boolean algebras.","This course is typically taken early in the Masters program and provides a foundation for the formal reasoning that is required in subsequent courses.
After successfully completing this course, you will have developed an increased level of mathematical maturity to assist with the fundamental problem offinding, formulating, and proving propertiesof programs.","Analyze the correctness and efficiency of algorithms
Apply mathematical tools to formulate and prove problems in Computer Science
Understand the foundational structures used in discrete mathematics
Understand Boolean and propositional logic
Understand the fundamental Computer Science concepts of recursion and induction
Understand simple combinatorics, probability and statistics","Course Description: The official scope is: mathematical methods for designing correct and efficient programs; mathematics for algorithm analysis; logic for proving and verification.
The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: set and relation theory; induction, recursion and recurrence relations; order of growth of functions; structured counting (combinatorics); discrete probability; graph theory and trees for algorithmic applications; propositional logic and boolean algebras.
Course Aims: This course is typically taken early in the Masters program and provides a foundation for the formal reasoning that is required in subsequent courses.
After successfully completing this course, you will have developed an increased level of mathematical maturity to assist with the fundamental problem offinding, formulating, and proving propertiesof programs.
Course Learning Outcomes: Analyze the correctness and efficiency of algorithms
Apply mathematical tools to formulate and prove problems in Computer Science
Understand the foundational structures used in discrete mathematics
Understand Boolean and propositional logic
Understand the fundamental Computer Science concepts of recursion and induction
Understand simple combinatorics, probability and statistics", Mathematical analysis of algorithms; logical reasoning; proof techniques; discrete mathematics applications,"Algorithm analysis; discrete mathematics; rigorous reasoning and proof techniques; Set theory; relation theory; recursion and induction; combinatorics; discrete probability; graph theory; propositional logic; Boolean algebras

",Set and relation theory; recursion and induction; combinatorics; discrete probability; graph theory; propositional logic; Boolean algebras,Algorithm correctness and efficiency; mathematical formulation and proof of computer science problems; foundational mathematical structures in computing,This course develops mathematical maturity by teaching analytical and proof-based skills for designing correct and efficient algorithms.
COMP9021,Principles of Programming,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9021&activityGroupId=1,"This course provides students with solid conceptual knowledge and practical skills of both generic programming techniques and Python programming, to be used effectively in the many specialised courses that expect students to have acquired strong enough programming skills and well mastered the Python language. The features of the language are covered to a significant depth, and there is a strong emphasis on problem solving, from a broad base of application domains, with quite a few that involve mathematical notions. Like all foundation courses for postgraduate students, there is a lot of contents to study in limited time and the learning curve is not gentle. Still the course does not assume any prior knowledge of programming in general, or of Python programming in particular, as its content is self-contained for students with the expected mathematical background.","The aim of the course is to provide students with a solid foundation on fundamental programming concepts and principles, and to become proficient in the programming language Python, including object-oriented features and the tkinter library to create widgets. Students will learn to design solutions to a broad range of problems and implement those solutions in the form of small to medium programs, using appropriate programming techniques and tools.","Apply appropriate tools, in particular for editing, testing and debugging
Design programs to solve small to medium scale problems
Create clear, reliable, well-structured, well-tested, well-documented programs
Design, implement and test programs written in a language with procedural, object-oriented, and functional constructs
Analyse what happens behind the scene when operating on Python data types, with an understanding of efficiency and memory use
Apply Python language, including advanced syntax and programming techniques
Understand fundamental data structures and algorithms","Course Description: This course provides students with solid conceptual knowledge and practical skills of both generic programming techniques and Python programming, to be used effectively in the many specialised courses that expect students to have acquired strong enough programming skills and well mastered the Python language. The features of the language are covered to a significant depth, and there is a strong emphasis on problem solving, from a broad base of application domains, with quite a few that involve mathematical notions. Like all foundation courses for postgraduate students, there is a lot of contents to study in limited time and the learning curve is not gentle. Still the course does not assume any prior knowledge of programming in general, or of Python programming in particular, as its content is self-contained for students with the expected mathematical background.
Course Aims: The aim of the course is to provide students with a solid foundation on fundamental programming concepts and principles, and to become proficient in the programming language Python, including object-oriented features and the tkinter library to create widgets. Students will learn to design solutions to a broad range of problems and implement those solutions in the form of small to medium programs, using appropriate programming techniques and tools.
Course Learning Outcomes: Apply appropriate tools, in particular for editing, testing and debugging
Design programs to solve small to medium scale problems
Create clear, reliable, well-structured, well-tested, well-documented programs
Design, implement and test programs written in a language with procedural, object-oriented, and functional constructs
Analyse what happens behind the scene when operating on Python data types, with an understanding of efficiency and memory use
Apply Python language, including advanced syntax and programming techniques
Understand fundamental data structures and algorithms",Python programming; problem solving; program design and testing; debugging,"Python; problem-solving; code debugging and testing; memory management; object-oriented design; tkinter for GUI development; algorithm design; data structures
",Generic programming techniques; object-oriented programming; functional programming; tkinter for GUI development; Python data types and memory management,Fundamental programming concepts; use of Python in various application domains; data structures and algorithms; program documentation and structure,"This course teaches students to develop strong programming skills in Python by learning concepts, principles, and problem-solving strategies."
COMP9024,Data Structures and Algorithms,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9024&activityGroupId=1,"Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.
The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, search trees and text processing.","This course aims to make students into confident Computer Scientists, armed with a rigorous understanding of useful data structures and algorithms, and ready to continue with their study in more advanced computing courses.
Since it is a pre-requisite for many later computing courses, it is normally taken early in Masters program.","Evaluate the efficiency of software
Create new data structures and algorithms for problems in Computer Science
Apply data structures and algorithms to problems in Computer Science
Analyse the correctness of algorithms
Explain a range of fundamental data structures and algorithms","Course Description: Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.
The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, search trees and text processing.
Course Aims: This course aims to make students into confident Computer Scientists, armed with a rigorous understanding of useful data structures and algorithms, and ready to continue with their study in more advanced computing courses.
Since it is a pre-requisite for many later computing courses, it is normally taken early in Masters program.
Course Learning Outcomes: Evaluate the efficiency of software
Create new data structures and algorithms for problems in Computer Science
Apply data structures and algorithms to problems in Computer Science
Analyse the correctness of algorithms
Explain a range of fundamental data structures and algorithms",Algorithm design and analysis; data structure implementation; problem-solving with computational methods,Algorithm analysis; algorithm design; data structures; problem-solving; abstract data types; dynamic data structures; abstract data types,Fundamental data types and structures; abstract data types; dynamic data structures; algorithm efficiency and correctness; graph algorithms; search trees; text processing algorithms,Essential data structures and algorithms for software and hardware development; application of computational theories in solving complex problems,"This course develops students into confident computer scientists by teaching them to create, analyze, and apply various data structures and algorithms."
COMP9101,Algorithm Design and Analysis,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9101&activityGroupId=1,"How would you convince a colleague that your program is correct, and that theirs is flawed?How do you estimate how long a program will run for, and design test cases to find bugs?Can all problems be solved efficiently, or are some problems ""too hard""?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop accurate and fast algorithms in contexts such as graphs and strings. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to find out how you can become a better programmer without writing any code.","In this course, students will be introduced to a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings.
This course aims to develop students' theoretical knowledge in order to design correct and efficient software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, students will become more capable and responsible problem solvers.","Explain how standard design techniques are used to develop algorithms
Solve problems by creatively applying algorithm design techniques
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness
Communicate algorithmic ideas at different abstraction levels","Course Description: How would you convince a colleague that your program is correct, and that theirs is flawed?How do you estimate how long a program will run for, and design test cases to find bugs?Can all problems be solved efficiently, or are some problems ""too hard""?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop accurate and fast algorithms in contexts such as graphs and strings. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to find out how you can become a better programmer without writing any code.
Course Aims: In this course, students will be introduced to a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings.
This course aims to develop students' theoretical knowledge in order to design correct and efficient software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, students will become more capable and responsible problem solvers.
Course Learning Outcomes: Explain how standard design techniques are used to develop algorithms
Solve problems by creatively applying algorithm design techniques
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness
Communicate algorithmic ideas at different abstraction levels",Algorithm design and analysis; critical thinking; technical communication; problem-solving with advanced computational methods,"Algorithm analysis; algorithm design; problem-solving; LaTeX; divide-and-conquer; greedy selection; dynamic programming
","Algorithm design techniques (greedy algorithms, dynamic programming, divide-and-conquer); algorithm application in various fields; technical documentation with LaTeX",Theoretical foundations of algorithm efficiency and correctness; application of design principles to solve complex problems in software development; effective communication of complex algorithmic concepts,"This course develops problem-solving skills in software development, teaching algorithm design techniques, such as divide-and-conquer and dynamic programming, to create efficient and correct programs."
COMP9102,Programming Languages and Compilers,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9102&activityGroupId=1,"This subject focusses on basic compiler techniques needed to implement programming languages in a virtual machine (with emphasis on the compiler front end). By writing a compiler in Java to translate a variant of C into Java bytecode, you are also expected to gain a good understanding of important fundamental principles in object-oriented programming languages and develop further your programming and software engineering skills.","This course aims to provide students with a comprehensive understanding of building compilers. Through theory and practice, students will explore programming language structures using VC (a variant of C) and implement a compiler targeting JVM. By completing a term-long project consisting of five programming assignments, students will gain expertise in scanners, recognisers, parsers, semantic analysers, and code generators. The course emphasises learning about programming languages, compilers, and software development while improving project management skills.","Specify and analyse the lexical, syntactic and semantic structures of advanced language features
Understand how to specify the syntax and semantics of a programming language
Design the data structures and support required for compiling advanced language features
Gain proficiency in writing sizable object-oriented programs in Java, incorporating the use of packages, inheritance, dynamic dispatching, and the visitor design pattern
Write a scanner, recogniser, parser, semantic analyser and code generator without the aid of automatic generators
Improve understanding of virtual machines, with a specific focus on the Java virtual machine (JVM","Course Description: This subject focusses on basic compiler techniques needed to implement programming languages in a virtual machine (with emphasis on the compiler front end). By writing a compiler in Java to translate a variant of C into Java bytecode, you are also expected to gain a good understanding of important fundamental principles in object-oriented programming languages and develop further your programming and software engineering skills.
Course Aims: This course aims to provide students with a comprehensive understanding of building compilers. Through theory and practice, students will explore programming language structures using VC (a variant of C) and implement a compiler targeting JVM. By completing a term-long project consisting of five programming assignments, students will gain expertise in scanners, recognisers, parsers, semantic analysers, and code generators. The course emphasises learning about programming languages, compilers, and software development while improving project management skills.
Course Learning Outcomes: Specify and analyse the lexical, syntactic and semantic structures of advanced language features
Understand how to specify the syntax and semantics of a programming language
Design the data structures and support required for compiling advanced language features
Gain proficiency in writing sizable object-oriented programs in Java, incorporating the use of packages, inheritance, dynamic dispatching, and the visitor design pattern
Write a scanner, recogniser, parser, semantic analyser and code generator without the aid of automatic generators
Improve understanding of virtual machines, with a specific focus on the Java virtual machine (JVM",Compiler construction; object-oriented programming in Java; software engineering practices; project management,"compiler construction; object-oriented design; Java; project management; Virtual machine architecture; front-end; back-end
",Compiler design (front end and back end components); language parsing and code generation; virtual machine implementations; Java bytecode generation,"Lexical, syntactic, and semantic analysis of programming languages; data structures for compiler design; implementation of compilers targeting JVM; advanced Java programming techniques (packages, inheritance, dynamic dispatch, visitor pattern)","This course constructs a compiler in Java to translate C into JVM bytecode, teaching fundamental principles and object-oriented programming skills while developing software engineering expertise."
COMP9201,Operating Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9201&activityGroupId=1,"Operating systems are an essential part of computer systems, so a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.","The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.","Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system","Course Description: Operating systems are an essential part of computer systems, so a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.
Course Aims: The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.
Course Learning Outcomes: Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system",Systems programming; practical application of OS concepts; software system analysis,"software system design; Processes, threads, concurrency management; File systems management; memory management; operating system architectures and components; scheduling techniques

","Processes, threads, concurrency; file systems; memory management; scheduling; operating system structure and components","Understanding and development of monolithic operating systems; relationship between OS, applications, and hardware; implementation of core operating system features","This course teaches students about modern monolithic operating systems, covering topics like processes, threads, and memory management, by implementing parts of a teaching operating system."
COMP9211,Computer Architecture,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9211&activityGroupId=1,"Computer architecture plays a crucial role in defining and bridging the interface between hardware and software in a computer system. It serves as the foundation upon which both hardware and software components are designed and interact with each other. A study of computer architecture complements the study of programming language and algorithm, compiler, and operating system on the software side of the interface, and the study of embedded system, FPGA and VLSI design on the hardware side of the interface.","This course aims to provide students with a comprehensive understanding of computer system design, performance evaluation, and optimization. It equips students with the skills and knowledge necessary to tackle challenges in the field of computer architecture and prepares students for careers in areas such as computer engineering, computer science, and system design.","Demonstrate ability to work in teams
Apply the basic design principles and techniques to build a processor to meet various requirements, such as performance, cost, power consumption	
Demonstrate a deep understanding of computer hardware design, especially the pipelined RISC processor, hierarchical memory system, and multi-core processor system
Use the simulation tool to investigate and validate the hardware design
Establish a solid background for studying and development of advanced computing systems","Course Description: Computer architecture plays a crucial role in defining and bridging the interface between hardware and software in a computer system. It serves as the foundation upon which both hardware and software components are designed and interact with each other. A study of computer architecture complements the study of programming language and algorithm, compiler, and operating system on the software side of the interface, and the study of embedded system, FPGA and VLSI design on the hardware side of the interface.
Course Aims: This course aims to provide students with a comprehensive understanding of computer system design, performance evaluation, and optimization. It equips students with the skills and knowledge necessary to tackle challenges in the field of computer architecture and prepares students for careers in areas such as computer engineering, computer science, and system design.
Course Learning Outcomes: Demonstrate ability to work in teams
Apply the basic design principles and techniques to build a processor to meet various requirements, such as performance, cost, power consumption	
Demonstrate a deep understanding of computer hardware design, especially the pipelined RISC processor, hierarchical memory system, and multi-core processor system
Use the simulation tool to investigate and validate the hardware design
Establish a solid background for studying and development of advanced computing systems",Computer system design; performance evaluation; hardware simulation and validation; collaborative engineering,Computer systems; hardware design; Processor design principles; RISC architecture; memory hierarchy; multi-core systems;,Processor design principles; RISC architecture; memory hierarchy; multi-core systems; power efficiency in design,Fundamental concepts in computer architecture; application of design and optimization techniques; interaction between hardware and software components in computing systems,"This course designs and optimizes computer systems by teaching students how to build processors, apply design principles, and understand computer hardware architecture."
COMP9283,Extended Operating Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9283&activityGroupId=1,"Operating systems are an essential part of computer systems, so a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.","The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.","Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system","Course Description: Operating systems are an essential part of computer systems, so a course on operating systems is an essential part of any computer science or computer engineering program. This course provides an in-depth understanding of the underlying operating systems that students have implicitly relied upon when developing applications in the foundational courses within Computer Science and Engineering. The knowledge gained will continue to be relevant to your future career when developing systems and applications.
In general terms, the course aims to educate students in the basic concepts, components and behaviours of modern monolithic operating systems, including the relevant characteristics of hardware. Topics include processes, threads, concurrency, file systems, memory management and scheduling.
Students will apply some of the concepts learnt by implementing parts of a realistic teaching operating system.
Course Aims: The course aims to educate students on modern monolithic operating systems, i.e. the software that fills the gap between application software they will already be familiar with and computer hardware.
In particular, the course aims to provide practical experience within the operating system itself to give students a holistic view of the entire software stack running in a modern computer.
The development of a whole of system understanding of modern computer systems is a critical and valued skill enabling students to understand, analyse, and implement complex software systems at any level of the software stack, with a big picture perspective.
Course Learning Outcomes: Create new functionality within an existing operating system
Analyse the behaviour of an operating system and its components
Understand the structure and key components within a modern monolithic operating system
Apply common algorithms and implementation approaches that are used inside an operating system",Systems analysis; practical OS implementation; software stack integration; problem-solving in system operations,"File systems management; memory management; operating system architectures and components; scheduling techniques
","Operating system components and behaviors; processes, threads, and concurrency management; file systems; memory management; scheduling techniques","Deep understanding of modern monolithic operating systems; interaction between OS, application software, and hardware; techniques for enhancing and analyzing operating system functionality","This course explores and implements modern operating systems, teaching students about processes, concurrency, file systems, and more to develop a holistic understanding of computer systems."
COMP9311,Database Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9311&activityGroupId=1,"Large data resources are critical to the functioning of just about every significant modern computer application, and so knowledge of how to manage them is clearly important in the industry. One very important platform for this is relational database management systems (RDBMSs).
This course explores in-depth thepractice of developing database applications and thetheory behind RDBMSs. The course focuses on database design and querying, as well as analysis of database schemas. It will also give an overview of the technologies used in implementing database management systems and the past, present, and future of database systems and database research.","This course aims to give students a solid grounding in the use of relational database management systems.
In the context of further study, understanding how to use databases effectively provides a foundation for further study in advanced database topics, such as COMP9315 Database Systems Implementation and COMP9318 Data Mining. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search.","Develop accurate, non-redundant data models
Appreciate the past, present, and future of database technology
Realise data models as relational database schemas
Formulate efficient and effective queries via the full range of SQL constructs
Use stored procedures and triggers to extend DBMS capabilities
Understand the concepts behind transactions and concurrency control
Understand the overall architecture of relational DBMSs","Course Description: Large data resources are critical to the functioning of just about every significant modern computer application, and so knowledge of how to manage them is clearly important in the industry. One very important platform for this is relational database management systems (RDBMSs).
This course explores in-depth thepractice of developing database applications and thetheory behind RDBMSs. The course focuses on database design and querying, as well as analysis of database schemas. It will also give an overview of the technologies used in implementing database management systems and the past, present, and future of database systems and database research.
Course Aims: This course aims to give students a solid grounding in the use of relational database management systems.
In the context of further study, understanding how to use databases effectively provides a foundation for further study in advanced database topics, such as COMP9315 Database Systems Implementation and COMP9318 Data Mining. Database concepts are also relevant in courses such as COMP9319 Web Data Compression and Search and COMP6714 Information Retrieval and Web Search.
Course Learning Outcomes: Develop accurate, non-redundant data models
Appreciate the past, present, and future of database technology
Realise data models as relational database schemas
Formulate efficient and effective queries via the full range of SQL constructs
Use stored procedures and triggers to extend DBMS capabilities
Understand the concepts behind transactions and concurrency control
Understand the overall architecture of relational DBMSs",Database design and querying; schema analysis; SQL programming; transaction management,"SQL; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB
",Relational database management systems (RDBMS); database schema design; SQL queries; stored procedures and triggers; transactions and concurrency control; RDBMS architecture,Fundamental and advanced concepts in RDBMS; the evolution and future trends of database technologies; practical application of database theory in system implementation,"This course develops students' knowledge of relational database management systems by teaching them to design, query, analyze, and manage databases effectively."
COMP9312,Data Analytics for Graphs,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9312&activityGroupId=1,"Graphs are ubiquitous and are widely used to capture relationships between different entities in real-world applications. However, compared with traditional sequential data (e.g. text and audio), the unstructured property and the sparsity make processing big graphs very challenging. The course will introduce a series of data structures and algorithms for graph processing in terms of database (i.e., big data) and deep learning. Fundamental methods and the state-of-the-art research works will be integrated. The course will serve as a launching pad for those interested in graph analytics, big data processing and graph neural networks.
Data structures and algorithms are the building blocks of many complex systems and software. Certain fundamental graph algorithms such as Dijkstra's algorithm and depth-first search have been covered by many text books and compulsory courses. They may be discussed in terms of pseudocode and time complexity. This course will start from studying how to efficiently implement the fundamental algorithms in big graphs. Then, the course explores more challenging and more complex algorithms step-by-step. When dealing with big graphs, we may consider various scenarios such as external memory solutions, distributed solutions, multi-core solutions, etc.
The course also puts some attention to graph neural networks, which is a hotspot in the area of AI and deep learning. The course will not study theoretical details about machine learning and deep learning but just introduce several representative graph neural networks. The students will play with basic graph learning tasks and understand learning-based techniques for graph problems such as link prediction and node classification.","The course aims to reinforce students' understanding of important graph algorithms and data structures, as well as building their capabilities in designing algorithms for big data processing. In particular, the course will improve students' ability to analyze time complexity, identify potential optimisations, and work on real problems. At the end of this course, you should be in a position where you could write efficient code to solve a complex graph problem. Some of you might even be at the stage where you could do research in the area of big graph processing and graph-based interdisciplinary problems.","Evaluate data structures to store and represent graphs
Analyze cohesive subgraph models and their representative computation algorithms
Analyze fundamental graph traversal techniques
Understand basic machine learning methods
Apply techniques for graph neural networks","Course Description: Graphs are ubiquitous and are widely used to capture relationships between different entities in real-world applications. However, compared with traditional sequential data (e.g. text and audio), the unstructured property and the sparsity make processing big graphs very challenging. The course will introduce a series of data structures and algorithms for graph processing in terms of database (i.e., big data) and deep learning. Fundamental methods and the state-of-the-art research works will be integrated. The course will serve as a launching pad for those interested in graph analytics, big data processing and graph neural networks.
Data structures and algorithms are the building blocks of many complex systems and software. Certain fundamental graph algorithms such as Dijkstra's algorithm and depth-first search have been covered by many text books and compulsory courses. They may be discussed in terms of pseudocode and time complexity. This course will start from studying how to efficiently implement the fundamental algorithms in big graphs. Then, the course explores more challenging and more complex algorithms step-by-step. When dealing with big graphs, we may consider various scenarios such as external memory solutions, distributed solutions, multi-core solutions, etc.
The course also puts some attention to graph neural networks, which is a hotspot in the area of AI and deep learning. The course will not study theoretical details about machine learning and deep learning but just introduce several representative graph neural networks. The students will play with basic graph learning tasks and understand learning-based techniques for graph problems such as link prediction and node classification.
Course Aims: The course aims to reinforce students' understanding of important graph algorithms and data structures, as well as building their capabilities in designing algorithms for big data processing. In particular, the course will improve students' ability to analyze time complexity, identify potential optimisations, and work on real problems. At the end of this course, you should be in a position where you could write efficient code to solve a complex graph problem. Some of you might even be at the stage where you could do research in the area of big graph processing and graph-based interdisciplinary problems.
Course Learning Outcomes: Evaluate data structures to store and represent graphs
Analyze cohesive subgraph models and their representative computation algorithms
Analyze fundamental graph traversal techniques
Understand basic machine learning methods
Apply techniques for graph neural networks",Graph algorithm implementation; big data analysis; graph neural network application; computational complexity analysis,"graphs; Big Data Analytics; graph neural networks; algorithm analysis; data structures

",Graph data structures; fundamental and advanced graph algorithms; external and distributed graph processing; graph neural networks,Understanding of graph representation and processing in big data contexts; integration of machine learning with graph analytics; practical and theoretical aspects of graph-based systems,"This course teaches students how to efficiently process big graphs using data structures, algorithms, and graph neural networks, enabling them to write efficient code and analyze complex graph problems."
COMP9313,Big Data Management,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9313&activityGroupId=1,"This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items.","This course aims to introduce students to the concepts behind Big Data, the core technologies used in managing large-scale data sets, and a range of technologies for developing solutions to large-scale data analytics problems.
This course is intended for students who want to understand modern large-scale data analytics systems. It covers a wide range of topics and technologies. It will prepare students to be able to build such systems as well as use them efficiently and effectively to address challenges in big data management.","Describe the important characteristics of Big Data
Utilise the map/reduce paradigm and the Spark platform to manipulate Big Data
Develop an appropriate storage structure for a Big Data repository
Develop efficient solutions for analytical problems involving Big Data
Use a high-level query language to manipulate Big Data","Course Description: This course introduces the core concepts and technologies involved in managing Big Data. It will first introduce the characteristics of big data and big data analysis. Then, we will learn the open-source big data management framework Hadoop. We will mainly focus on Hadoop MapReduce programming. YARN, HDFS, HBase, and Hive will be briefly introduced as well. We will also learn an open-source memory-based distributed computing framework Spark. Another major focus of this course is algorithm design on large-scale data sets based on big data management frameworks, in various domains such as data stream mining, graph data processing, and finding similar items.
Course Aims: This course aims to introduce students to the concepts behind Big Data, the core technologies used in managing large-scale data sets, and a range of technologies for developing solutions to large-scale data analytics problems.
This course is intended for students who want to understand modern large-scale data analytics systems. It covers a wide range of topics and technologies. It will prepare students to be able to build such systems as well as use them efficiently and effectively to address challenges in big data management.
Course Learning Outcomes: Describe the important characteristics of Big Data
Utilise the map/reduce paradigm and the Spark platform to manipulate Big Data
Develop an appropriate storage structure for a Big Data repository
Develop efficient solutions for analytical problems involving Big Data
Use a high-level query language to manipulate Big Data",Big data management; Hadoop and Spark utilization; map/reduce programming; data structure design for scalability,"Big data management; map/reduce programming; data structure design for scalability; data structures; Hadoop (YARN, HDFS, HBase, Hive); Spark; Big Data Analytics; algorithm design;
","Characteristics of big data; Hadoop ecosystem components (YARN, HDFS, HBase, Hive); Spark framework; algorithm design for data stream mining, graph data processing, and similarity search",Core principles of big data analytics and management; practical application of big data frameworks; development and optimization of large-scale data solutions,"This course explores managing Big Data by introducing core concepts, technologies like Hadoop and Spark, and designing algorithms for large-scale data sets."
COMP9315,Database Systems Implementation,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9315&activityGroupId=1,"This course aims to introduce students to the detailed internal structure of database management systems (DBMSs) such as Oracle or SQL Server. DBMSs contain a variety of interesting data structures and algorithms that are also potentially useful outside the DBMS context; knowing about them is a useful way of extending your general programming background. While the focus is on relational DBMSs, given that they have the best-developed technological foundation, we will also consider more recent developments in the management of large data repositories.
Relational DBMSs need to deal with a variety of issues: storage structures and management, implementation of relational operations, query optimisation, transactions, concurrency, recovery, security. The course will address most of these, along with a brief look at emerging database systems trends. The level of detail on individual topics will vary; some will be covered in significant detail, others will be covered relatively briefly.
An important aspect of this course is to give you a chance to explore the internals of arealDBMS: PostgreSQL. Lectures will discuss the general principles of how DBMSs are implemented, and will also illustrate them with examples from PostgreSQL where possible. Since DBMSs are very large pieces of software, it won't be possible to explore the entire PostgreSQL system in depth.","This course aims to introduce students to the detailed internal structure of database management systems (DBMSs) such as Oracle or SQL Server. DBMSs contain a variety of interesting data structures and algorithms that are also potentially useful outside the DBMS context; knowing about them is a useful way of extending your general programming background. While the focus is on relational DBMSs, given that they have the best-developed technological foundation, we will also consider more recent developments in the management of large data repositories.
COMP9315 forms part of the Databases major for both undergraduates and postgraduates.","Understand the internal architecture of large-scale (relational
Create new data types in PostgreSQL
Analyze the performance of data-intensive systems
Evaluate data structures and algorithms for large-scale data manipulation and apply them in given scenarios
Analyze the PostgreSQL database management system
Understand techniques for implementing transactional behavior and reliable storage","Course Description: This course aims to introduce students to the detailed internal structure of database management systems (DBMSs) such as Oracle or SQL Server. DBMSs contain a variety of interesting data structures and algorithms that are also potentially useful outside the DBMS context; knowing about them is a useful way of extending your general programming background. While the focus is on relational DBMSs, given that they have the best-developed technological foundation, we will also consider more recent developments in the management of large data repositories.
Relational DBMSs need to deal with a variety of issues: storage structures and management, implementation of relational operations, query optimisation, transactions, concurrency, recovery, security. The course will address most of these, along with a brief look at emerging database systems trends. The level of detail on individual topics will vary; some will be covered in significant detail, others will be covered relatively briefly.
An important aspect of this course is to give you a chance to explore the internals of arealDBMS: PostgreSQL. Lectures will discuss the general principles of how DBMSs are implemented, and will also illustrate them with examples from PostgreSQL where possible. Since DBMSs are very large pieces of software, it won't be possible to explore the entire PostgreSQL system in depth.
Course Aims: This course aims to introduce students to the detailed internal structure of database management systems (DBMSs) such as Oracle or SQL Server. DBMSs contain a variety of interesting data structures and algorithms that are also potentially useful outside the DBMS context; knowing about them is a useful way of extending your general programming background. While the focus is on relational DBMSs, given that they have the best-developed technological foundation, we will also consider more recent developments in the management of large data repositories.
COMP9315 forms part of the Databases major for both undergraduates and postgraduates.
Course Learning Outcomes: Understand the internal architecture of large-scale (relational
Create new data types in PostgreSQL
Analyze the performance of data-intensive systems
Evaluate data structures and algorithms for large-scale data manipulation and apply them in given scenarios
Analyze the PostgreSQL database management system
Understand techniques for implementing transactional behavior and reliable storage",Database architecture analysis; performance optimization; transaction management; secure and reliable storage design,"SQL; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB; recovery mechanisms; security in databases","Internal structure of DBMSs; SQL Server, Oracle, PostgreSQL specifics; storage structures; implementation of relational operations; query optimization; transactions and concurrency; recovery mechanisms; security in databases",Detailed understanding of how relational DBMSs are built and operate; application of advanced data structures and algorithms within the context of large-scale database management systems; newer trends in database technology.,"This course explores the internal structure of database management systems like Oracle or SQL Server, introducing students to relevant data structures, algorithms, and technical foundations."
COMP9319,Web Data Compression and Search,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9319&activityGroupId=1,"As the amount of Web data increases, it is becoming vital to not only be able to search and retrieve this information quickly, but also to store it in a compact manner. This is especially important for mobile devices which are becoming increasingly popular. Without loss of generality, within this course, we assume Web data (excluding media content) will be in XML and its like (e.g., HTML, JSON).
If time allows, we may cover optional topics such as: streaming algorithms, text analytics, Web data optimization for mobile devices. The lecture materials will be complemented by two programming assignments and numerous tutorial-type, written exercises.","This course aims to introduce the concepts, theories, and algorithmic issues important to Web data compression and search. The course will also introduce the most recent development in various areas of Web data optimization topics, common practice, and its applications. The course is composed of the following parts:

Adaptive coding, information theory
Text compression (zip, gzip, bzip, etc)
Burrows-Wheeler Transform and backward search
XML compression
Indexing
Pattern matching and regular expression search
Distributed querying
Fast index construction
Implementation","Discuss the past, present, and future of data compression and Web data optimization
Apply advanced data compression techniques such as those based on Burrows Wheeler Transform
Write computer programs for Web data compression and search with optimization
Apply the fundamentals of text compression
Use selected XML processing and optimization techniques
Apply basic techniques from XML distributed query processing
Analyze the advantages and disadvantages of data compression for Web search","Course Description: As the amount of Web data increases, it is becoming vital to not only be able to search and retrieve this information quickly, but also to store it in a compact manner. This is especially important for mobile devices which are becoming increasingly popular. Without loss of generality, within this course, we assume Web data (excluding media content) will be in XML and its like (e.g., HTML, JSON).
If time allows, we may cover optional topics such as: streaming algorithms, text analytics, Web data optimization for mobile devices. The lecture materials will be complemented by two programming assignments and numerous tutorial-type, written exercises.
Course Aims: This course aims to introduce the concepts, theories, and algorithmic issues important to Web data compression and search. The course will also introduce the most recent development in various areas of Web data optimization topics, common practice, and its applications. The course is composed of the following parts:

Adaptive coding, information theory
Text compression (zip, gzip, bzip, etc)
Burrows-Wheeler Transform and backward search
XML compression
Indexing
Pattern matching and regular expression search
Distributed querying
Fast index construction
Implementation
Course Learning Outcomes: Discuss the past, present, and future of data compression and Web data optimization
Apply advanced data compression techniques such as those based on Burrows Wheeler Transform
Write computer programs for Web data compression and search with optimization
Apply the fundamentals of text compression
Use selected XML processing and optimization techniques
Apply basic techniques from XML distributed query processing
Analyze the advantages and disadvantages of data compression for Web search",Data compression techniques; Web data search and retrieval; programming for data optimization,Data compression techniques; Web data search and retrieval; programming for data optimization; data structures,Adaptive coding; information theory; text and XML compression; indexing and querying; pattern matching; efficient data structure implementation,Understanding of the foundational and advanced concepts in Web data compression and search; practical application of algorithms in real-world Web optimization scenarios; evaluation of the effectiveness of different data compression methods in various contexts.,"This course introduces concepts, theories, and algorithms for web data compression and search, covering topics like adaptive coding, text compression, and indexing."
COMP9321,Data Services Engineering,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9321&activityGroupId=1,"This course aims to introduce the student to core concepts and practical skills for engineering the data in Web-service-oriented data-driven applications. Specifically, the course aims to expose students to basic infrastructure for building data services on the Web, including techniques to access and ingest data in internal/external sources, develop software services to curate (e.g. extract, transform, correct, aggregate the data), develop services to apply various analytics and develop services to visualize the data to communicate effectively usingdata. The course uses the Python programming language as the practical basis for its modules. However, the concepts taught are universal and can be applied to any other web development language/framework.","Software engineering has advanced rapidly in recent years. The knowledge-, service-, and cloud-based economy in parallel with the continuous improvement in connectivity, storage and data processing capabilities allow access to a data deluge from sensors, social-media, news, user-generated, government and private data sources. Accordingly, in a modern data-oriented landscape, data-driven applications may need to deal with a collection of datasets - from relational to NoSQL - that holds a vast amount of data gathered from various private/open data islands. Therefore, well-engineered service-oriented functionalities are critical for ingesting, organizing and querying the growing volume of data in data-driven application.
This course aims to introduce the student to core concepts and practical skills for engineering the data in service-oriented data-driven applications. Specifically, the course aims to answer these questions:

How to develop services to access and ingest data in internal/external sources of the data?
How to develop services to use Databases (from Relational to NoSQL) as a Service for persisting user information?
How to develop services to Curate (e.g. Extract, Transform, Correct, Aggregate, and Merge/Split) the data?
How to develop services to apply analytics (e.g. by leveraging Machine Learning and Natural Language Processing techniques) to the curated data?
How to develop services to visualize the data to communicate effectively with data.","Evaluate the performance of a web based data services and identify bottlenecks
Identify and apply appropriate analytics and visualization techniques on prepared data
Design and develop a non-trivial web based data services application from scratch
Describe the main components of a data-oriented Web-based application
Identify common security threats to a Web application
Apply techniques Extract, Transform, Correct, Aggregate, and Merge/Split to prepare and publish data
Read and ingest data from a variety of common sources","Course Description: This course aims to introduce the student to core concepts and practical skills for engineering the data in Web-service-oriented data-driven applications. Specifically, the course aims to expose students to basic infrastructure for building data services on the Web, including techniques to access and ingest data in internal/external sources, develop software services to curate (e.g. extract, transform, correct, aggregate the data), develop services to apply various analytics and develop services to visualize the data to communicate effectively usingdata. The course uses the Python programming language as the practical basis for its modules. However, the concepts taught are universal and can be applied to any other web development language/framework.
Course Aims: Software engineering has advanced rapidly in recent years. The knowledge-, service-, and cloud-based economy in parallel with the continuous improvement in connectivity, storage and data processing capabilities allow access to a data deluge from sensors, social-media, news, user-generated, government and private data sources. Accordingly, in a modern data-oriented landscape, data-driven applications may need to deal with a collection of datasets - from relational to NoSQL - that holds a vast amount of data gathered from various private/open data islands. Therefore, well-engineered service-oriented functionalities are critical for ingesting, organizing and querying the growing volume of data in data-driven application.
This course aims to introduce the student to core concepts and practical skills for engineering the data in service-oriented data-driven applications. Specifically, the course aims to answer these questions:

How to develop services to access and ingest data in internal/external sources of the data?
How to develop services to use Databases (from Relational to NoSQL) as a Service for persisting user information?
How to develop services to Curate (e.g. Extract, Transform, Correct, Aggregate, and Merge/Split) the data?
How to develop services to apply analytics (e.g. by leveraging Machine Learning and Natural Language Processing techniques) to the curated data?
How to develop services to visualize the data to communicate effectively with data.
Course Learning Outcomes: Evaluate the performance of a web based data services and identify bottlenecks
Identify and apply appropriate analytics and visualization techniques on prepared data
Design and develop a non-trivial web based data services application from scratch
Describe the main components of a data-oriented Web-based application
Identify common security threats to a Web application
Apply techniques Extract, Transform, Correct, Aggregate, and Merge/Split to prepare and publish data
Read and ingest data from a variety of common sources",Data service engineering; Web application development; data ingestion and curation; analytics and visualization application,"web application development; data analysis; data visualization; Python; SQL; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB; Agile software development methods, practices and tools  

",Data access and ingestion techniques; database usage from relational to NoSQL; data curation processes (ETL); application of analytics and machine learning; data visualization; software service development,Core principles of engineering data-driven applications; practical skills in using Python for web service development; understanding of the architecture and security of web-based data services; application of data handling techniques in real-world scenarios.,"This course empowers students with practical skills for engineering data in web-service-oriented applications, covering data access, curation, analytics, visualization, and security."
COMP9331,Computer Networks and Applications,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Summer&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=U1&deliveryLocation=Kensington&courseCode=COMP9331&activityGroupId=1,"This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques (if time permits)
This is a combined undergraduate and postgraduate course.The corresponding undergraduate course code is COMP3331.","The course aims to provide students with an overview of the core topics in computer networks and the Internet's architecture and protocols. Students will be introduced to network programming and will learn to design and implement network protocols and applications and evaluate network performance. As an introductory course, one of the aims is to prepare students for more advanced study in follow-on courses.","Describe the current architecture of the Internet and the entities involved in its operations
Analyse and evaluate the performance of computer networks
Identify soundness and/or potential flaws in proposed protocols
Explain security and ethical issues in computer networking
Capture and analyse network traffic
Design networked applications and protocols, and implement them in C, Java or Python","Course Description: This course is an introductory course on computer networks aimed at students with a computer science / electrical engineering background. You will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of:
(1) Medium access control, congestion control, flow control, and reliable transmission,
(2) Addressing and naming,
(3) Routing and switching,
(4) Widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.
(5) Special-purpose networks including content delivery, peer-to-peer, and wireless networks, and
(6) Security threats and standard defensive techniques (if time permits)
This is a combined undergraduate and postgraduate course.The corresponding undergraduate course code is COMP3331.
Course Aims: The course aims to provide students with an overview of the core topics in computer networks and the Internet's architecture and protocols. Students will be introduced to network programming and will learn to design and implement network protocols and applications and evaluate network performance. As an introductory course, one of the aims is to prepare students for more advanced study in follow-on courses.
Course Learning Outcomes: Describe the current architecture of the Internet and the entities involved in its operations
Analyse and evaluate the performance of computer networks
Identify soundness and/or potential flaws in proposed protocols
Explain security and ethical issues in computer networking
Capture and analyse network traffic
Design networked applications and protocols, and implement them in C, Java or Python",Network protocol design and analysis; network security; performance evaluation; network programming,"Network protocol design and analysis; network security; network programming; performance analysis
","Medium access control; congestion and flow control; addressing and routing; core network protocols (Ethernet, IP, TCP, UDP, HTTP); specialized network types (peer-to-peer, wireless); network security",Fundamental principles of computer networks; practical skills in designing and implementing networked applications; understanding the architecture of the Internet and its operations; evaluating and improving network performance; addressing security and ethical issues in networking.,"This course explores computer networks, introducing students to core topics, protocols, and programming, preparing them for advanced study."
COMP9334,Capacity Planning of Computer Systems and Networks,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9334&activityGroupId=1,"We live in a world that events do not happen instantly. It takes a certain amount of time to download a video from a server to your own mobile device. It takes a certain amount of time for a computer to finish the execution of an algorithm. The time to completion (or response time in performance analysis terminology) is a performance metric that computer scientists and computer engineers should be concerned about because no one wants to wait unnecessarily. If you can understand the factors that determine the response time, then you can influence those factors so that the response time becomes acceptable. This course will take a mathematical modelling and analytical approach to understand response time in computer systems and networks. The primary goal is to explore how mathematical modelling and mathematical methods can be used to model, analyse and design computer systems and networks so that they have good performance. There are three major topics that will be covered by this course:
Queuing analysis (Note: Queues are important because they give rise to waiting time.)Discrete event simulationInteger programming for network design","The time response of computer systems and networks is an important attribute of their performance measure.Students will learn about mathematical modelling and analysis of response time in computer systems and networks. These topics will be covered

Modelling computer systems and networks to understand response time
Analytical methods to determine response time
Discrete event simulation
Integer programming for network design

This is an elective course in the Networks majors in both undergraduate and postgraduate programs.","Use queueing networks to model computer systems
Develop discrete event simulation programs for computer systems and networks 
Use queueing theory to analyse the performance of computer systems
Formulate integer programming optimisation problems for computer and network problems
Use statistical methods to analyse simulation data","Course Description: We live in a world that events do not happen instantly. It takes a certain amount of time to download a video from a server to your own mobile device. It takes a certain amount of time for a computer to finish the execution of an algorithm. The time to completion (or response time in performance analysis terminology) is a performance metric that computer scientists and computer engineers should be concerned about because no one wants to wait unnecessarily. If you can understand the factors that determine the response time, then you can influence those factors so that the response time becomes acceptable. This course will take a mathematical modelling and analytical approach to understand response time in computer systems and networks. The primary goal is to explore how mathematical modelling and mathematical methods can be used to model, analyse and design computer systems and networks so that they have good performance. There are three major topics that will be covered by this course:
Queuing analysis (Note: Queues are important because they give rise to waiting time.)Discrete event simulationInteger programming for network design
Course Aims: The time response of computer systems and networks is an important attribute of their performance measure.Students will learn about mathematical modelling and analysis of response time in computer systems and networks. These topics will be covered

Modelling computer systems and networks to understand response time
Analytical methods to determine response time
Discrete event simulation
Integer programming for network design

This is an elective course in the Networks majors in both undergraduate and postgraduate programs.
Course Learning Outcomes: Use queueing networks to model computer systems
Develop discrete event simulation programs for computer systems and networks 
Use queueing theory to analyse the performance of computer systems
Formulate integer programming optimisation problems for computer and network problems
Use statistical methods to analyse simulation data",Mathematical modeling; performance analysis; discrete event simulation; integer programming; statistical analysis,Mathematical modeling; performance analysis; discrete event simulation; integer programming; statistical analysis,Queuing theory; response time analysis; network and system design through integer programming; simulation in computer networks,Understanding of factors affecting the performance of computer systems and networks; application of mathematical methods to model and improve system response times; proficiency in using simulation and optimization techniques in real-world scenarios.,"This course analyzes and models response time in computer systems and networks, exploring mathematical approaches to understand and design systems with good performance."
COMP9414,Artificial Intelligence,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9414&activityGroupId=1,"COMP9414 is an introductory course on Artificial Intelligence covering fundamental topics such as autonomous agents, problem solving, optimisation, logic, knowledge representation, reasoning under uncertainty, vision, language processing, machine learning, neural networks and reinforcement learning.The course is taught with an orientation towards machine learning and with a view to practical applications of Artificial Intelligence using Python. Some AI applications that make use of foundational concepts will be demonstrated in lectures and tutorials.","The course aims to provide a foundation for further studies in AI such as COMP4418 Knowledge Representation and Reasoning, COMP9417 Machine Learning and Data Mining, COMP9517 Computer Vision, COMP9434 Robotic Software Architecture, and COMP9444 Neural Networks and Deep Learning. Postgraduate students with more programming experience may consider enrolling in COMP9814, which is the same as the undergraduate AI course COMP3411 (offered in Term 1).","Choose appropriate AI techniques to solve given problems and implement standard AI algorithms
Demonstrate practical skills in utilizing AI toolkits in realistic application areas
Demonstrate understanding of the foundations of AI and fundamental AI techniques
Evaluate the risks of applying AI in business and industry","Course Description: COMP9414 is an introductory course on Artificial Intelligence covering fundamental topics such as autonomous agents, problem solving, optimisation, logic, knowledge representation, reasoning under uncertainty, vision, language processing, machine learning, neural networks and reinforcement learning.The course is taught with an orientation towards machine learning and with a view to practical applications of Artificial Intelligence using Python. Some AI applications that make use of foundational concepts will be demonstrated in lectures and tutorials.
Course Aims: The course aims to provide a foundation for further studies in AI such as COMP4418 Knowledge Representation and Reasoning, COMP9417 Machine Learning and Data Mining, COMP9517 Computer Vision, COMP9434 Robotic Software Architecture, and COMP9444 Neural Networks and Deep Learning. Postgraduate students with more programming experience may consider enrolling in COMP9814, which is the same as the undergraduate AI course COMP3411 (offered in Term 1).
Course Learning Outcomes: Choose appropriate AI techniques to solve given problems and implement standard AI algorithms
Demonstrate practical skills in utilizing AI toolkits in realistic application areas
Demonstrate understanding of the foundations of AI and fundamental AI techniques
Evaluate the risks of applying AI in business and industry",AI algorithm implementation; utilization of AI toolkits; problem-solving with AI techniques,Autonomous agents; optimization; logic and reasoning; knowledge representation; uncertainty; computer vision; NLP; machine learning; neural networks; reinforcement learning; Python,Autonomous agents; problem-solving and optimization; logic and reasoning; knowledge representation; uncertainty; computer vision; natural language processing; machine learning; neural networks; reinforcement learning,Fundamental principles of Artificial Intelligence; practical application of AI methods using Python; understanding and demonstration of AI concepts in real-world scenarios; critical evaluation of AI applications in various sectors.,"This course introduces students to Artificial Intelligence, teaching foundational concepts through hands-on learning using Python."
COMP9417,Machine Learning and Data Mining,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9417&activityGroupId=1,"Machine learning is the algorithmic approach to learning from data. The course also covers aspects of data mining, the application of machine learning to obtain insight from data. In this course machine learning algorithms are placed in the context of their theoretical foundations in order to understand their derivation and correct application. Machine learning also is an empirical science, where performance of algorithms must be rigorously evaluated on datasets. Completion of this course will contribute to further learning in advanced topics such as deep learning, bioinformatics, computer vision, and robotics. Topics covered in the course include: linear models for regression and classification, local methods (nearest neighbour), tree learning, kernel machines, neural networks, unsupervised learning, ensemble learning, and learning theory. To expand and extend the development of theory and algorithms presented in lectures, practical examples will be given in tutorials and programming tasks during the project.","This course aims to expose students to the theory, algorithms and empirical work that are essential inter-dependent components of machine learning. In particular, the assignments are aimed at giving students an opportunity for active learning via practical experience in applying machine learning to real applications. The second assignment has a broad scope and should be treated as a small-scale project with submission of software and a written report. COMP9417 forms part of a suite of AI courses that together comprise the Artificial Intelligence major in the undergraduate computer science programs and the postgraduate information technology program.","Compare different algorithms according to the properties of their inputs and outputs, and the computational methods used
Implement machine learning algorithms, apply them to realistic datasets and collect results to enable evaluation of their performance
Construct a well-defined learning problem for a given task, selecting representations for the data input and output, the model, and the learning algorithm
Explain key concepts from the foundations of learning theory, describe their applicability, and express knowledge of the general limits of machine learning
Develop and describe algorithms to solve a well-defined learning problem","Course Description: Machine learning is the algorithmic approach to learning from data. The course also covers aspects of data mining, the application of machine learning to obtain insight from data. In this course machine learning algorithms are placed in the context of their theoretical foundations in order to understand their derivation and correct application. Machine learning also is an empirical science, where performance of algorithms must be rigorously evaluated on datasets. Completion of this course will contribute to further learning in advanced topics such as deep learning, bioinformatics, computer vision, and robotics. Topics covered in the course include: linear models for regression and classification, local methods (nearest neighbour), tree learning, kernel machines, neural networks, unsupervised learning, ensemble learning, and learning theory. To expand and extend the development of theory and algorithms presented in lectures, practical examples will be given in tutorials and programming tasks during the project.
Course Aims: This course aims to expose students to the theory, algorithms and empirical work that are essential inter-dependent components of machine learning. In particular, the assignments are aimed at giving students an opportunity for active learning via practical experience in applying machine learning to real applications. The second assignment has a broad scope and should be treated as a small-scale project with submission of software and a written report. COMP9417 forms part of a suite of AI courses that together comprise the Artificial Intelligence major in the undergraduate computer science programs and the postgraduate information technology program.
Course Learning Outcomes: Compare different algorithms according to the properties of their inputs and outputs, and the computational methods used
Implement machine learning algorithms, apply them to realistic datasets and collect results to enable evaluation of their performance
Construct a well-defined learning problem for a given task, selecting representations for the data input and output, the model, and the learning algorithm
Explain key concepts from the foundations of learning theory, describe their applicability, and express knowledge of the general limits of machine learning
Develop and describe algorithms to solve a well-defined learning problem",Machine learning algorithm implementation; empirical evaluation of algorithms; theoretical analysis of machine learning concepts,Machine learning; regression; classification; nearest neighbor; decision trees; kernel machines; unsupervised learning; ensemble learning; neural networks; Python,Linear models for regression and classification; local methods like nearest neighbor; decision trees; kernel machines; neural networks; unsupervised learning; ensemble learning; learning theory,Understanding of machine learning principles and algorithms; practical skills in applying machine learning to real-world data; ability to evaluate and compare algorithm performance; theoretical foundation of machine learning methods and their limitations.,"This course develops students' understanding of machine learning by teaching algorithms and theoretical foundations, as well as practical application via assignments."
COMP9418,Advanced Topics in Statistical Machine Learning,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9418&activityGroupId=1,"This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.
In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.
During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others.","Machine learning is at the intersection of Artificial Intelligence, Computer Science and Statistics. While the main goal of this course is to go beyond the basics of machine learning as provided by COMP9417 (focused on probabilistic modelling and inference), we will adopt a similar teaching rationale, where theory, algorithms and empirical analysis are all important components of the course. Therefore, the lectures, tutorials and assessments are designed to address these components jointly.","Derive and implement maximum likelihood learning approaches to latent variable probabilistic models
Understand and apply basic methods for structured prediction
Derive statistical independence assumptions from a given graphical representation of a probabilistic model
Understand and implement approximate inference algorithms in graphical models, including sampling and loopy belief propagation
Understand and implement exact inference methods in graphical models including variable elimination and the junction tree algorithm","Course Description: This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice. It will cover topics on the semantics of direct and undirected representations in probabilistic graphical models, exact and approximate inference, and learning of model parameters and structure.
In this course, we will study a class of statistical inference models known as Probabilistic Graphical Models (PGMs). PGMs are a great example of how Computer Science and Statistics can work together. PGMs use graph data structures to represent domains with large amounts of variables and specialised algorithms for efficient inference over these graphical models. Therefore, PGMs have pushed the limits of probability theory to the scale and rate necessary to provide automated reasoning in modern AI systems.
During this course, we will cover several graphical models, including Bayesian networks, Markov networks, Conditional Random Fields, Markov chains, Hidden Markov Models, Kalman Filters and Markov decision processes. We will have a clear understanding of how these models work as well as their main algorithms for inference and learning. We will also cover several algorithms used to learn parameters and make inferences such as Monte Carlo Markov Chains (MCMC), Gibbs Sampling, Viterbi and the Baum-Welch algorithms, among others.
Course Aims: Machine learning is at the intersection of Artificial Intelligence, Computer Science and Statistics. While the main goal of this course is to go beyond the basics of machine learning as provided by COMP9417 (focused on probabilistic modelling and inference), we will adopt a similar teaching rationale, where theory, algorithms and empirical analysis are all important components of the course. Therefore, the lectures, tutorials and assessments are designed to address these components jointly.
Course Learning Outcomes: Derive and implement maximum likelihood learning approaches to latent variable probabilistic models
Understand and apply basic methods for structured prediction
Derive statistical independence assumptions from a given graphical representation of a probabilistic model
Understand and implement approximate inference algorithms in graphical models, including sampling and loopy belief propagation
Understand and implement exact inference methods in graphical models including variable elimination and the junction tree algorithm",Statistical inference; implementation of probabilistic models; derivation of machine learning algorithms; structured prediction; empirical analysis of machine learning methods,Statistical inference; machine learning; Probabilistic Graphical Models (PGMs); Bayesian networks; Markov networks; Conditional Random Fields; Markov chains; Hidden Markov Models; Kalman Filters; Markov decision processes; Monte Carlo Markov Chains (MCMC); Gibbs Sampling; Viterbi algorithm; Baum-Welch algorithm; Python,Probabilistic Graphical Models (PGMs); Bayesian networks; Markov networks; Conditional Random Fields; Markov chains; Hidden Markov Models; Kalman Filters; Markov decision processes; Monte Carlo Markov Chains (MCMC); Gibbs Sampling; Viterbi algorithm; Baum-Welch algorithm,Deep understanding of PGMs and their applications in AI; ability to perform exact and approximate inference; competence in parameter learning in latent variable models; proficiency in using advanced statistical methods to analyze complex probabilistic systems.,This course explores statistical machine learning approaches to learn and infer structured probabilistic models using Probabilistic Graphical Models (PGMs) and various algorithms.
COMP9444,Neural Networks and Deep Learning,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9444&activityGroupId=1,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning.","This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.
It is an elective in the Artificial Intelligence majors for both undergraduate and postgraduate.","Describe a variety of NN and DL techniques - including fully connected, convolutional and recurrent networks, deep reinforcement learning, generative models and adversarial training
Analyse a problem and devise a suitable neural network solution
Discuss the social, intellectual, and neurobiological context of neural networks and deep learning
Use a Python module or simulation package to implement neural networks for a range of tasks, including image and language processing, reinforcement learning, and unsupervised learning","Course Description: Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks, image processing; geometric analysis of trained networks; recurrent networks, language processing, semantic analysis, long short term memory; deep reinforcement learning; autoencoders, generative models, adversarial training; designing successful applications of neural networks; recent developments in neural networks and deep learning.
Course Aims: This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.
It is an elective in the Artificial Intelligence majors for both undergraduate and postgraduate.
Course Learning Outcomes: Describe a variety of NN and DL techniques - including fully connected, convolutional and recurrent networks, deep reinforcement learning, generative models and adversarial training
Analyse a problem and devise a suitable neural network solution
Discuss the social, intellectual, and neurobiological context of neural networks and deep learning
Use a Python module or simulation package to implement neural networks for a range of tasks, including image and language processing, reinforcement learning, and unsupervised learning",Neural network implementation; deep learning techniques; problem analysis and solution design; use of Python for AI applications,Neural networks; Python; deep learning,Perceptrons; feedforward neural networks; backpropagation; convolutional neural networks; image processing; recurrent neural networks; language processing; semantic analysis; long short-term memory (LSTM); deep reinforcement learning; autoencoders; generative models; adversarial training,Understanding of various neural network architectures and their applications; ability to design and implement neural network solutions; comprehension of the broader impacts and theoretical underpinnings of neural networks and deep learning.,"This course introduces students to neural networks and deep learning by teaching various techniques, methods, and practices."
COMP9491,Applied Artificial Intelligence,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9491&activityGroupId=1,"This course presents some advanced topics in various aspects of artificial intelligence such as computer vision, speech and language processing, deep learning, and knowledge representation and reasoning. The course aims to integrate these various aspects of AI and present case studies where such integration of different methodologies delivers interesting applications. Project development is the major component of this course, to develop a solution to a practical or industry-based problem that requires an integration of more than one type of AI techniques ranging from symbolic AI (e.g. knowledge representation and reasoning) to deep learning, with example applications in computer vision, speech and language processing, etc. Assessment is based on group project development.","This course aims to introduce students to the advanced concepts in artificial intelligence (AI), particularly deep learning and knowledge representation and reasoning, with their applications in domains such as computer vision, language processing, and speech processing. Based on the knowledge acquired through the prerequisite courses and the new knowledge introduced in this course, it gives the students an opportunity to improve their ability to develop an AI solution to a practical or industry-based problem while working in small teams. Such project-based learning helps expose the students to a wide range of advanced AI methodologies and the advantage of method developments that integrate various aspects of AI.","Explain clearly the problem, solution and implementation with critical analysis of the results and findings
Analyse and evaluate the solution quantitatively and qualitatively providing a clear understanding of how the solution utilises or progresses the current state-of-the-art; and
Develop an implementation of a solution using AI techniques;
Analyse a complex practical problem and develop a solution that exploits and integrates the advantages of several advanced AI techniques;","Course Description: This course presents some advanced topics in various aspects of artificial intelligence such as computer vision, speech and language processing, deep learning, and knowledge representation and reasoning. The course aims to integrate these various aspects of AI and present case studies where such integration of different methodologies delivers interesting applications. Project development is the major component of this course, to develop a solution to a practical or industry-based problem that requires an integration of more than one type of AI techniques ranging from symbolic AI (e.g. knowledge representation and reasoning) to deep learning, with example applications in computer vision, speech and language processing, etc. Assessment is based on group project development.
Course Aims: This course aims to introduce students to the advanced concepts in artificial intelligence (AI), particularly deep learning and knowledge representation and reasoning, with their applications in domains such as computer vision, language processing, and speech processing. Based on the knowledge acquired through the prerequisite courses and the new knowledge introduced in this course, it gives the students an opportunity to improve their ability to develop an AI solution to a practical or industry-based problem while working in small teams. Such project-based learning helps expose the students to a wide range of advanced AI methodologies and the advantage of method developments that integrate various aspects of AI.
Course Learning Outcomes: Explain clearly the problem, solution and implementation with critical analysis of the results and findings
Analyse and evaluate the solution quantitatively and qualitatively providing a clear understanding of how the solution utilises or progresses the current state-of-the-art; and
Develop an implementation of a solution using AI techniques;
Analyse a complex practical problem and develop a solution that exploits and integrates the advantages of several advanced AI techniques;",AI solution development; critical analysis and evaluation; integration of multiple AI techniques; team collaboration,"Team collaboration; AI programming; computer vision; AI integration; NLP; knowledge representation
",Computer vision; speech and language processing; deep learning; knowledge representation and reasoning; project development in AI,Advanced understanding of AI concepts; practical application of AI techniques in real-world problems; ability to integrate various AI methodologies to enhance problem-solving efficiency; competence in communicating complex AI implementations and outcomes clearly and effectively.,"This course applies advanced artificial intelligence concepts to solve real-world problems through project-based learning, integrating various AI methodologies."
COMP9511,Human Computer Interaction,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9511&activityGroupId=1,"The course covers topics related to User Interface Design and Visual Design Principles. These topics aim to equip you with the skills necessary to design websites, mobile apps, and various software packages. You will learn how to apply a User-Centered Design process, which involves data collection from users, Requirement Analysis, Design, Prototyping, and Usability Evaluation. This process ensures that the final product is tailored to meet users' needs.
Additionally, the course covers other relevant topics that help you understand your users and their needs. These topics include an overview of basic Cognitive Capacities, Designing for Accessibility, Internationalization, Levels of Expertise, and Collaboration.
Lastly, the course introduces you to new emerging technologies, such as the metaverse, immersive technologies, and smart devices. These technologies require special design considerations and will be explored in the course.
By the end of the course, you will have gained a comprehensive understanding of User Interface Design and Visual Design Principles, along with the ability to apply User-Centered Design methodologies and adapt products to meet users' needs.","to familiarize you with user interface design and visual design principles that can enhance usability
to teach you how to design websites, mobile applications, and software packages with a focus on maximizing their usability
to give you an awareness of user centred design tools, methods, and techniques
to provide background knowledge about how people think and process information
to ensure that your design work includes user needs analysis
to give you experience in prototyping using both paper-based design and software-based techniques
to demonstrate techniques/heuristics necessary to evaluate systems for their usability
to give you experience in the formal evaluation of user interfaces
above all, maintain a real-world perspective to applying this knowledge in industry","Create prototypes by utilizing both paper and prototyping software packages
Apply gamification in order to increase users' engagement
Design for new emerging technologies such as metaverse, virtual and augmented reality, and smart devices and their design considerations
Explain the strengths and limitations of human cognition and memory and apply these to the design of more usable interfaces that do not cognitively overload users
Analyze websites in terms of usability and accessibility by considering different user interface design and visual design principles
Prepare a design plan that is based on user -centered design principles and then carry out activities to design, evaluate and refine the user interface
Construct questionnaires/surveys to gather pre- and post-test information from users, and understand the importance of ethics and privacy to conduct appropriate user-centered design activities
Apply the process of usability evaluation methods for assessing the usability of both low and high-fidelity prototypes
Explain how user-centred design processes should be inclusive of all users, including international audiences, those with special needs, such as disabilities, as well different levels of user experience, and use this knowledge to design interfaces appropriate to a particular group of users","Course Description: The course covers topics related to User Interface Design and Visual Design Principles. These topics aim to equip you with the skills necessary to design websites, mobile apps, and various software packages. You will learn how to apply a User-Centered Design process, which involves data collection from users, Requirement Analysis, Design, Prototyping, and Usability Evaluation. This process ensures that the final product is tailored to meet users' needs.
Additionally, the course covers other relevant topics that help you understand your users and their needs. These topics include an overview of basic Cognitive Capacities, Designing for Accessibility, Internationalization, Levels of Expertise, and Collaboration.
Lastly, the course introduces you to new emerging technologies, such as the metaverse, immersive technologies, and smart devices. These technologies require special design considerations and will be explored in the course.
By the end of the course, you will have gained a comprehensive understanding of User Interface Design and Visual Design Principles, along with the ability to apply User-Centered Design methodologies and adapt products to meet users' needs.
Course Aims: to familiarize you with user interface design and visual design principles that can enhance usability
to teach you how to design websites, mobile applications, and software packages with a focus on maximizing their usability
to give you an awareness of user centred design tools, methods, and techniques
to provide background knowledge about how people think and process information
to ensure that your design work includes user needs analysis
to give you experience in prototyping using both paper-based design and software-based techniques
to demonstrate techniques/heuristics necessary to evaluate systems for their usability
to give you experience in the formal evaluation of user interfaces
above all, maintain a real-world perspective to applying this knowledge in industry
Course Learning Outcomes: Create prototypes by utilizing both paper and prototyping software packages
Apply gamification in order to increase users' engagement
Design for new emerging technologies such as metaverse, virtual and augmented reality, and smart devices and their design considerations
Explain the strengths and limitations of human cognition and memory and apply these to the design of more usable interfaces that do not cognitively overload users
Analyze websites in terms of usability and accessibility by considering different user interface design and visual design principles
Prepare a design plan that is based on user -centered design principles and then carry out activities to design, evaluate and refine the user interface
Construct questionnaires/surveys to gather pre- and post-test information from users, and understand the importance of ethics and privacy to conduct appropriate user-centered design activities
Apply the process of usability evaluation methods for assessing the usability of both low and high-fidelity prototypes
Explain how user-centred design processes should be inclusive of all users, including international audiences, those with special needs, such as disabilities, as well different levels of user experience, and use this knowledge to design interfaces appropriate to a particular group of users",User interface design; prototyping; usability evaluation; accessibility design; user research methods,"UI design; Construct user-focused surveys and questionnaires; Design for accessibility, international viability; Apply cognitive principles to design

",User-Centered Design process; cognitive psychology in design; designing for accessibility and internationalization; emerging technologies like the metaverse and immersive technologies,Mastery of visual and user interface design principles; proficiency in creating and testing prototypes; ability to analyze and improve the usability and accessibility of digital products; understanding of user needs and behaviors in diverse contexts.,"This course explores and applies User Interface Design principles and Visual Design Principles to design websites, apps, and software packages that meet users' needs."
COMP9517,Computer Vision,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9517&activityGroupId=1,"Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision.","The course aims to give students a broad understanding of both classical and modern computer vision theories and methods, as well as practical skills in implementing and developing computer vision algorithms and applications.
In particular, the course will teach students about the formation process and characteristics of digital images, and the workings of techniques for image filtering and enhancement, feature extraction and representation, object detection and pattern recognition, image segmentation and classification, motion estimation and object tracking, and a wide range of applications. In addition to classical computer vision methods, students will also learn about modern machine learning and deep learning approaches for these tasks, and acquire practical skills in using them to solve real-world computer vision problems.
As computer vision is a broad,interdisciplinary field with many possible applications, the course intends to lay the theoretical (computer science) as well as practical (computer engineering) foundation to address future computer vision challenges. Also, since solutions to big challenges typically require not only individual but also team efforts, the course includes both labs and a group project to help develop the necessary skills through practical experience complementing the knowledge acquired in the lectures.","Build larger computer vision applications by integrating software modules
Implement and test computer vision algorithms using existing software platforms
Explain basic scientific, statistical, and engineering approaches to computer vision","Course Description: Computer vision is the interdisciplinary scientific field that develops theories and methods allowing computers to extract high-level information from digital images or videos. From an engineering perspective it seeks to automate perceptual tasks normally performed by the human visual system. Generally, vision is difficult because it is an inverse problem, where only insufficient information is available about the objects of interest in the image data. Physics-based mathematical and statistical models as well as machine-learning methods are used to assist in the task. Current real-world applications are wide-ranging, and include optical character recognition, machine inspection, retail object recognition, 3D model building, remote sensing, medical imaging, autonomous driving, motion capture, surveillance, face recognition, biometrics, and many others. This course provides an introduction to fundamental concepts and an opportunity to develop a real-world application of computer vision.
Course Aims: The course aims to give students a broad understanding of both classical and modern computer vision theories and methods, as well as practical skills in implementing and developing computer vision algorithms and applications.
In particular, the course will teach students about the formation process and characteristics of digital images, and the workings of techniques for image filtering and enhancement, feature extraction and representation, object detection and pattern recognition, image segmentation and classification, motion estimation and object tracking, and a wide range of applications. In addition to classical computer vision methods, students will also learn about modern machine learning and deep learning approaches for these tasks, and acquire practical skills in using them to solve real-world computer vision problems.
As computer vision is a broad,interdisciplinary field with many possible applications, the course intends to lay the theoretical (computer science) as well as practical (computer engineering) foundation to address future computer vision challenges. Also, since solutions to big challenges typically require not only individual but also team efforts, the course includes both labs and a group project to help develop the necessary skills through practical experience complementing the knowledge acquired in the lectures.
Course Learning Outcomes: Build larger computer vision applications by integrating software modules
Implement and test computer vision algorithms using existing software platforms
Explain basic scientific, statistical, and engineering approaches to computer vision",Computer vision algorithm development; software integration; practical implementation of computer vision techniques,"Computer vision; AI integration; API Integration; Software integration; machine learning; deep learning; Data Processing: data preprocessing, feature engineering, handling data heterogeneity

",Image processing; feature extraction; object detection; motion estimation; machine learning and deep learning applications in computer vision,Comprehensive understanding of computer vision theories and methods; ability to apply classical and modern approaches in real-world scenarios; proficiency in using software tools for computer vision tasks; experience in collaborative project development in a technical field.,This course introduces students to fundamental concepts and develops practical skills in implementing and developing computer vision algorithms and applications.
COMP9727,Recommender Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9727&activityGroupId=1,"Recommender systems are information filtering and search tools for providing personalized user interaction and navigation through a complex space of products or services. The aim is to address information overload by providing users with items that better meet their needs and support their decision making. Recommender systems are important commercial tools that are widely used by e-commerce and social media companies to drive sales and user engagement. This course will cover the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques used to support recommender systems.","This course aims to introduce the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques needed to support recommender systems. Emphasis will be placed on understanding the strengths and weaknesses of different approaches, user interface design for recommender systems, and evaluation of recommender systems using a variety of metrics and user evaluation styles.","Implement a prototype recommender system that addresses a realistic problem
Understand the basic types of recommender system and the main recommendation algorithms
Design a suitable recommender system for a specific application
Evaluate a recommender system from multiple perspectives using appropriate metrics","Course Description: Recommender systems are information filtering and search tools for providing personalized user interaction and navigation through a complex space of products or services. The aim is to address information overload by providing users with items that better meet their needs and support their decision making. Recommender systems are important commercial tools that are widely used by e-commerce and social media companies to drive sales and user engagement. This course will cover the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques used to support recommender systems.
Course Aims: This course aims to introduce the basic types of recommender system, the main recommendation algorithms, and machine learning and natural language processing techniques needed to support recommender systems. Emphasis will be placed on understanding the strengths and weaknesses of different approaches, user interface design for recommender systems, and evaluation of recommender systems using a variety of metrics and user evaluation styles.
Course Learning Outcomes: Implement a prototype recommender system that addresses a realistic problem
Understand the basic types of recommender system and the main recommendation algorithms
Design a suitable recommender system for a specific application
Evaluate a recommender system from multiple perspectives using appropriate metrics",Implementation of recommender systems; evaluation of algorithmic effectiveness; user interface design for recommender tools,Recommender systems; algorithm analysis; UI design; NLP; machine learning,Types of recommender systems; recommendation algorithms; machine learning and natural language processing for recommender systems,"Fundamental understanding of different recommender system approaches; ability to design, implement, and evaluate recommender systems for specific applications; proficiency in utilizing machine learning and NLP techniques to enhance the functionality and user experience of recommender systems.","This course develops Recommender Systems, covering types, algorithms, machine learning, and natural language processing techniques to personalize user interaction and address information overload."
COMP9801,Extended Algorithm Design and Analysis,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9801&activityGroupId=1,"How can a practitioner of algorithms help small-scale producers interested in sustainable farming?How can you solve strategy games by efficiently using computation time and memory?What do the relationships between difficult problems imply about the existence of feasible solutions to them, from both theoretical and practical standpoints?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop fast and accurate algorithms in contexts such as graphs and strings, and study reductions involving linear programming and NP-hard problems. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to become a more effective, persistent and creative problem solver.","In this course, we introduce a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings. We also provide a primer on intractable problems, which forms the foundation of further study in theoretical computer science.
This course aims to develop students' theoretical knowledge in order to both design correct and efficient software and recognise the limitations of software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, our students will become more capable and responsible problem solvers.","Explain how standard design techniques are used to develop algorithms
Integrate modeling skills and algorithmic knowledge for problem solving
Solve problems by creatively applying algorithm design techniques
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness
Formulate real-life scenarios as algorithmic problems
Communicate algorithmic ideas at different abstraction levels","Course Description: How can a practitioner of algorithms help small-scale producers interested in sustainable farming?How can you solve strategy games by efficiently using computation time and memory?What do the relationships between difficult problems imply about the existence of feasible solutions to them, from both theoretical and practical standpoints?
In this course, you will learn the building blocks to develop problem-solving software in fields as diverse as finance, logistics, policy and entertainment. You will apply techniques including divide-and-conquer, greedy selection and dynamic programming in order to develop fast and accurate algorithms in contexts such as graphs and strings, and study reductions involving linear programming and NP-hard problems. You will also develop the ability to think critically and communicate about algorithms in terms of correctness and efficiency.
Join us to become a more effective, persistent and creative problem solver.
Course Aims: In this course, we introduce a variety of algorithm design techniques (greedy, dynamic programming, divide and conquer, etc), and most importantly learn how to apply them in different settings. We also provide a primer on intractable problems, which forms the foundation of further study in theoretical computer science.
This course aims to develop students' theoretical knowledge in order to both design correct and efficient software and recognise the limitations of software, as well as problem solving, critical thinking and written communication skills.
By understanding algorithm design principles, analysing and evaluating algorithms, and applying these principles to solve unfamiliar problems, our students will become more capable and responsible problem solvers.
Course Learning Outcomes: Explain how standard design techniques are used to develop algorithms
Integrate modeling skills and algorithmic knowledge for problem solving
Solve problems by creatively applying algorithm design techniques
Apply the LaTeX typesetting system to produce high-quality technical documents
Evaluate the efficiency of algorithms and justify their correctness
Formulate real-life scenarios as algorithmic problems
Communicate algorithmic ideas at different abstraction levels",Algorithm design and analysis; problem formulation; technical communication; critical thinking,Algorithm design; algorithm analysis; linear programming and NP-hard problems,"Algorithmic strategies (greedy, dynamic programming, divide and conquer); complexity and intractability; application of algorithms in real-world scenarios",Algorithm design techniques; modeling for problem-solving; technical document production; real-life scenario formulation; communication of complex ideas,"This course teaches students how to develop problem-solving software using various algorithm design techniques, such as divide-and-conquer, greedy selection, and dynamic programming."
COMP9814,Extended Artificial Intelligence,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=COMP9814&activityGroupId=1,As for COMP9414 but in greater depth and breadth.,,,"Course Description: COMP9414 is an introductory course on Artificial Intelligence covering fundamental topics such as autonomous agents, problem solving, optimisation, logic, knowledge representation, reasoning under uncertainty, vision, language processing, machine learning, neural networks and reinforcement learning.The course is taught with an orientation towards machine learning and with a view to practical applications of Artificial Intelligence using Python. Some AI applications that make use of foundational concepts will be demonstrated in lectures and tutorials.
Course Aims: The course aims to provide a foundation for further studies in AI such as COMP4418 Knowledge Representation and Reasoning, COMP9417 Machine Learning and Data Mining, COMP9517 Computer Vision, COMP9434 Robotic Software Architecture, and COMP9444 Neural Networks and Deep Learning. Postgraduate students with more programming experience may consider enrolling in COMP9814, which is the same as the undergraduate AI course COMP3411 (offered in Term 1).
Course Learning Outcomes: Choose appropriate AI techniques to solve given problems and implement standard AI algorithms
Demonstrate practical skills in utilizing AI toolkits in realistic application areas
Demonstrate understanding of the foundations of AI and fundamental AI techniques
Evaluate the risks of applying AI in business and industry",AI algorithm implementation; practical application of AI techniques; evaluation of AI risks in various industries,"AI model's vulnerability detection; AI programming; AI algorithms; optimization; computer vision; NLP; machine learning; neural networks; Autonomous agents

",Autonomous agents; problem solving and optimization in AI; logic and reasoning; AI in vision and language processing; foundations of machine learning and neural networks,Solid understanding of core AI concepts and techniques; proficiency in Python for AI applications; ability to select and apply appropriate AI methods to real-world problems; critical evaluation of potential impacts and risks of AI applications in business and industry settings.,"This course introduces students to Artificial Intelligence, covering fundamental topics such as autonomous agents and machine learning."
COMP9900,Information Technology Project,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9900&activityGroupId=1,"Welcome to the Information Technology/Computer Science Project Course, where theory meets practice in a hands-on exploration of real-world projects. This course is designed to elevate your programming skills by immersing you in the intricacies of coding, debugging, and optimizing software solutions. As you apply your theoretical knowledge of information technology/computer science concepts, algorithms, and data structures, you will actively bridge the gap between theoretical understanding and practical implementation. This course places a strong emphasis on teamwork and effective collaboration. You will navigate the challenges of group projects, learning to work seamlessly with peers, share responsibilities, and communicate ideas effectively. Beyond coding and collaboration, the course offers a comprehensive exploration of project management skills. From planning and scheduling to task prioritization, you will gain insights into the entire project lifecycle, experiencing firsthand the evolution of a concept into a completed solution. Furthermore, you will learn the art of crafting clear and concise project reports, and the skills to deliver impactful presentations.
You will work in teams of ideally five (5) members to define, implement and evaluate a real-world project. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. You will also get the chance to reflect on your own contributions and provide peer assessments of your team members.","This course aims to help students enhance their programming skills by working on real-world information technology/computer science projects. Students will gain hands-on experience in coding, debugging, and optimizing software solutions. Students will apply their theoretical knowledge of information technology/computer science concepts, algorithms, and data structures to design and implement practical projects. They will bridge the gap between theory and practice. Students will also learn to work effectively in teams, share responsibilities, and communicate with other team members. This course also aims to teach students project management skills, including planning, scheduling, and task prioritization. Students will experience the entire project lifecycle, from concept to completion. Students will improve their written and verbal communication skills, especially in the context of technical documentation. They will learn to write clear and concise project reports and deliver presentations.","apply software development and software project management tools proficiently
articulate technical information clearly through both spoken and written communication
design and develop a correct, efficient and robust software system from specification
collaborate efficiently within a project team, assuming leadership responsibilities when necessary
optimise time management skills and make reasoned trade-offs over competing demands
analyse a set of requirements, elaborate them, and produce a detailed specification
verify the correctness and robustness of software","Course Description: Welcome to the Information Technology/Computer Science Project Course, where theory meets practice in a hands-on exploration of real-world projects. This course is designed to elevate your programming skills by immersing you in the intricacies of coding, debugging, and optimizing software solutions. As you apply your theoretical knowledge of information technology/computer science concepts, algorithms, and data structures, you will actively bridge the gap between theoretical understanding and practical implementation. This course places a strong emphasis on teamwork and effective collaboration. You will navigate the challenges of group projects, learning to work seamlessly with peers, share responsibilities, and communicate ideas effectively. Beyond coding and collaboration, the course offers a comprehensive exploration of project management skills. From planning and scheduling to task prioritization, you will gain insights into the entire project lifecycle, experiencing firsthand the evolution of a concept into a completed solution. Furthermore, you will learn the art of crafting clear and concise project reports, and the skills to deliver impactful presentations.
You will work in teams of ideally five (5) members to define, implement and evaluate a real-world project. Project teams meet weekly starting from Week 1 with project mentors to report on the progress of the project. Assessment is based on a project proposal, progressive demonstrations and retrospectives, a final project demonstration and report, and on the quality of the software system itself. You will also get the chance to reflect on your own contributions and provide peer assessments of your team members.
Course Aims: This course aims to help students enhance their programming skills by working on real-world information technology/computer science projects. Students will gain hands-on experience in coding, debugging, and optimizing software solutions. Students will apply their theoretical knowledge of information technology/computer science concepts, algorithms, and data structures to design and implement practical projects. They will bridge the gap between theory and practice. Students will also learn to work effectively in teams, share responsibilities, and communicate with other team members. This course also aims to teach students project management skills, including planning, scheduling, and task prioritization. Students will experience the entire project lifecycle, from concept to completion. Students will improve their written and verbal communication skills, especially in the context of technical documentation. They will learn to write clear and concise project reports and deliver presentations.
Course Learning Outcomes: apply software development and software project management tools proficiently
articulate technical information clearly through both spoken and written communication
design and develop a correct, efficient and robust software system from specification
collaborate efficiently within a project team, assuming leadership responsibilities when necessary
optimise time management skills and make reasoned trade-offs over competing demands
analyse a set of requirements, elaborate them, and produce a detailed specification
verify the correctness and robustness of software",Software development; project management; team collaboration; technical communication,"project management; team collaboration; Professional team dynamics management; agile software development

",Programming; debugging; software optimization; application of information technology and computer science concepts; project lifecycle management,"Advanced programming skills; practical application of IT/CS theories; proficiency in project planning and execution; effective teamwork and leadership in a technical setting; ability to communicate complex technical information clearly; capability to design, implement, and evaluate robust software systems.",This course develops through hands-on projects.
COMP9991,Research Project A,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9991&activityGroupId=1,"Most students in MIT (8543) will complete the capstone course COMP9900 (MIT project) in their last term of studies, but students who by the end of their third to last session, have achieved a Distinction average (a WAM of at least 75) have the option to replace COMP9900 with COMP9991 (Research Project A) in their penultimate term, to be followed by either COMP9992 (Research Project B) or COMP9993 (Research Project C) in their last term. Provided that the entry conditions are met, this option will be particularly appealing to students who intend to then start a research degree, either a Master by Research or a PhD. Meeting the expectations of COMP9991 + COMP9992 or COMP9991 + COMP9993, or even better, exceeding them with a piece of work that can result in a conference or journal publication, can make applications for a research degree stronger. The course will also be appealing to students who want to modestly improve on the state of the art in a particular discipline and be exposed to the various aspects of conducting research, working on a specific problem; it could be a problem they have identified themselves as it matters to them, or it could be a problem that is suggested by and discussed with the supervisor of the project.
Students who have completed (or have advanced standing in) at least 66UoC, intend to complete their degree in the next two terms, and are interested in this course, should contact potential supervisors, namely, CSE academics, write a project proposal following the guidelines of the COMP9991 course outline under the guidance of the supervisor, who will have to agree that the project appropriate, send the project description to the course authority who, if the application is accepted, with request the admin staff to manually enrol the student in COMP9991 (students cannot enrol themselves into the course).","The course is for high achievers who can and want to maximise the exposure to research that a Masters by coursework has to expose students to. It exceeds the aims of COMP9900 in doing more than ""putting everything together"": it aims at letting students tackle a genuine piece of research and improve on the state of the art, be it by making an algorithm more effective, or combining algorithms in new ways, or applying and adjusting particular techniques to new problems. Though projects can be purely theoretical, most projects will be applied at least to some extent and they will have an experimental component, thanks to which it is often possible to compare the proposed approach with existing ones.
By the end of the term, students must give a seminar, inviting at least supervisor and assessor, with a presentation that is roughly 30 minutes long, during which they review the topic, including current approaches, plan for future work, and demonstrate they have made some progress towards carrying out that plan. Whether COMP991 should be followed by COMP9992 or COMP9993, depending on how much work is expected to be needed to successfully conduct the research, is an important outcome of the seminar.","Understand all conceptual and technical aspects of the problem being investigated, and possibly the impact that solving the problem would have on society
Exchange ideas with a supervisor to boost creativity and develop critical thinking
Evaluate the potential benefits and chances of success of modified or new concept, techniques or designs
Apply existing methods to a problem for an in-depth understanding of how they work and of their limitations
Analyse and compare various approaches and experimental results, to identify their key strengths and weaknesses
Give an oral presentation that is as pedagogical, clear, technically precise and insightful as possible","Course Description: Most students in MIT (8543) will complete the capstone course COMP9900 (MIT project) in their last term of studies, but students who by the end of their third to last session, have achieved a Distinction average (a WAM of at least 75) have the option to replace COMP9900 with COMP9991 (Research Project A) in their penultimate term, to be followed by either COMP9992 (Research Project B) or COMP9993 (Research Project C) in their last term. Provided that the entry conditions are met, this option will be particularly appealing to students who intend to then start a research degree, either a Master by Research or a PhD. Meeting the expectations of COMP9991 + COMP9992 or COMP9991 + COMP9993, or even better, exceeding them with a piece of work that can result in a conference or journal publication, can make applications for a research degree stronger. The course will also be appealing to students who want to modestly improve on the state of the art in a particular discipline and be exposed to the various aspects of conducting research, working on a specific problem; it could be a problem they have identified themselves as it matters to them, or it could be a problem that is suggested by and discussed with the supervisor of the project.
Students who have completed (or have advanced standing in) at least 66UoC, intend to complete their degree in the next two terms, and are interested in this course, should contact potential supervisors, namely, CSE academics, write a project proposal following the guidelines of the COMP9991 course outline under the guidance of the supervisor, who will have to agree that the project appropriate, send the project description to the course authority who, if the application is accepted, with request the admin staff to manually enrol the student in COMP9991 (students cannot enrol themselves into the course).
Course Aims: The course is for high achievers who can and want to maximise the exposure to research that a Masters by coursework has to expose students to. It exceeds the aims of COMP9900 in doing more than ""putting everything together"": it aims at letting students tackle a genuine piece of research and improve on the state of the art, be it by making an algorithm more effective, or combining algorithms in new ways, or applying and adjusting particular techniques to new problems. Though projects can be purely theoretical, most projects will be applied at least to some extent and they will have an experimental component, thanks to which it is often possible to compare the proposed approach with existing ones.
By the end of the term, students must give a seminar, inviting at least supervisor and assessor, with a presentation that is roughly 30 minutes long, during which they review the topic, including current approaches, plan for future work, and demonstrate they have made some progress towards carrying out that plan. Whether COMP991 should be followed by COMP9992 or COMP9993, depending on how much work is expected to be needed to successfully conduct the research, is an important outcome of the seminar.
Course Learning Outcomes: Understand all conceptual and technical aspects of the problem being investigated, and possibly the impact that solving the problem would have on society
Exchange ideas with a supervisor to boost creativity and develop critical thinking
Evaluate the potential benefits and chances of success of modified or new concept, techniques or designs
Apply existing methods to a problem for an in-depth understanding of how they work and of their limitations
Analyse and compare various approaches and experimental results, to identify their key strengths and weaknesses
Give an oral presentation that is as pedagogical, clear, technically precise and insightful as possible",Research methodology; critical thinking; technical communication; experimental analysis,Experience in conducting research; critical thinking; innovation and creativity in technical solutions; technical writing and presentation,Advanced research techniques; application and optimization of algorithms; experimental design and evaluation; technical presentation skills,Deep understanding of specific research problems and their societal impacts; ability to creatively and critically engage with complex technical problems; proficiency in evaluating and developing new or improved technical solutions; skill in clearly and effectively presenting research findings and progress.,"This course enables high-achieving students to undertake a genuine research project, improving on the state of the art in their chosen discipline."
COMP9992,Research Project B,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9992&activityGroupId=1,"Students who have satisfactorily completed COMP9991 in their penultimate term of study in MIT (8543) have to, in their last term of study, complete either COMP9992 or COMP9993. Which of COMP9992 or COMP9993 is appropriate has been determined following the COMP9991 seminar. COMP9992 has been chosen for projects such that completing them successfully requires a workload that is roughly equivalent to that of a standard course, though it can be expected that a research project, being more open ended and tackled by very motivated students, turns out to be more time consuming.
Meeting the expectations of COMP9991 + COMP9992, or even better, exceeding them with a piece of work that can result in a conference or journal publication, can make applications for a research degree stronger. COMP9991 has also been appealing to students who wanted to modestly improve on the state of the art in a particular discipline and be exposed to the various aspects of conducting research, working on a specific problem; COMP9992 completes that journey.","COMP9991 + COMP9992 is for high achievers who can and want to maximise the exposure to research that a Masters by coursework has to expose students to. It exceeds the aims of COMP9900 in doing more than ""putting everything together"": it aims at letting students tackle a genuine piece of research and improve on the state of the art, be it by making an algorithm more effective, or combining algorithms in new ways, or applying and adjusting particular techniques to new problems. Though projects can be purely theoretical, most projects will be applied at least to some extent and they will have an experimental component, thanks to which it is often possible to compare the proposed approach with existing ones.
By the end of the term, students must give a seminar, inviting at least supervisor and assessor, with a presentation that is roughly 45 minutes long, and submit a final report, that goes over all aspects of the work completed in both COMP9991 and COMP9992. Both seminar and report should demonstrate that the plan exposed in the COMP9991 seminar has been successfully completed. The main aim is to provide evidence that the student has acquired the skills that are necessary to successfully conduct a piece of research, in all aspects of the work, from producing a literature review to comparing one's results with those of other researchers, having brought some kind of innovation to the field.","Exchange ideas with a supervisor to boost creativity and develop critical thinking
Create new concepts, techniques or designs, thereby demonstrating a capacity for innovation
Apply existing methods to a problem for an in-depth understanding of how they work and of their limitations
Analyse and compare various approaches and experimental results, to identify their key strengths and weaknesses
Evaluate the proposed new concept, techniques or designs, ideally demonstrating that they improve on the state of the art
Give an oral presentation that is as pedagogical, clear, technically precise and insightful as possible
Write a report that articulates all aspects of a research project, including comparison with existing work, that is of the highest standards technically","Course Description: Students who have satisfactorily completed COMP9991 in their penultimate term of study in MIT (8543) have to, in their last term of study, complete either COMP9992 or COMP9993. Which of COMP9992 or COMP9993 is appropriate has been determined following the COMP9991 seminar. COMP9992 has been chosen for projects such that completing them successfully requires a workload that is roughly equivalent to that of a standard course, though it can be expected that a research project, being more open ended and tackled by very motivated students, turns out to be more time consuming.
Meeting the expectations of COMP9991 + COMP9992, or even better, exceeding them with a piece of work that can result in a conference or journal publication, can make applications for a research degree stronger. COMP9991 has also been appealing to students who wanted to modestly improve on the state of the art in a particular discipline and be exposed to the various aspects of conducting research, working on a specific problem; COMP9992 completes that journey.
Course Aims: COMP9991 + COMP9992 is for high achievers who can and want to maximise the exposure to research that a Masters by coursework has to expose students to. It exceeds the aims of COMP9900 in doing more than ""putting everything together"": it aims at letting students tackle a genuine piece of research and improve on the state of the art, be it by making an algorithm more effective, or combining algorithms in new ways, or applying and adjusting particular techniques to new problems. Though projects can be purely theoretical, most projects will be applied at least to some extent and they will have an experimental component, thanks to which it is often possible to compare the proposed approach with existing ones.
By the end of the term, students must give a seminar, inviting at least supervisor and assessor, with a presentation that is roughly 45 minutes long, and submit a final report, that goes over all aspects of the work completed in both COMP9991 and COMP9992. Both seminar and report should demonstrate that the plan exposed in the COMP9991 seminar has been successfully completed. The main aim is to provide evidence that the student has acquired the skills that are necessary to successfully conduct a piece of research, in all aspects of the work, from producing a literature review to comparing one's results with those of other researchers, having brought some kind of innovation to the field.
Course Learning Outcomes: Exchange ideas with a supervisor to boost creativity and develop critical thinking
Create new concepts, techniques or designs, thereby demonstrating a capacity for innovation
Apply existing methods to a problem for an in-depth understanding of how they work and of their limitations
Analyse and compare various approaches and experimental results, to identify their key strengths and weaknesses
Evaluate the proposed new concept, techniques or designs, ideally demonstrating that they improve on the state of the art
Give an oral presentation that is as pedagogical, clear, technically precise and insightful as possible
Write a report that articulates all aspects of a research project, including comparison with existing work, that is of the highest standards technically",Research design and execution; critical thinking; innovation and creativity in technical solutions; technical writing and presentation,Experience in conducting research; critical thinking; innovation and creativity in technical solutions; technical writing and presentation,Advanced research projects; algorithm optimization and application; comparative analysis; literature review and synthesis,Profound understanding of research methodologies; ability to conceive and execute innovative research projects; proficiency in applying theoretical knowledge to practical real-world problems; skill in articulating complex technical information effectively in both written and oral forms; capability to evaluate and improve upon existing technological solutions.,"This course helps high-achieving students acquire research skills by completing a genuine piece of research, applying techniques to new problems, and presenting findings through a seminar and final report."
COMP9993,Research Project C,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=COMP9993&activityGroupId=1,"Students who have satisfactorily completed COMP9991 in their penultimate term of study in MIT (8543) have to, in their last term of study, complete either COMP9992 or COMP9993. Which of COMP9992 or COMP9993 is appropriate has been determined following the COMP9991 seminar. COMP9993 has been chosen for projects such that completing them successfully requires a workload that is roughly equivalent to that of two standard courses, though it can be expected that a research project, being more open ended and tackled by very motivated students, turns out to be more time consuming.
Meeting the expectations of COMP9991 + COMP9993, or even better, exceeding them with a piece of work that can result in a conference or journal publication, can make applications for a research degree stronger. COMP9991 has also been appealing to students who wanted to modestly improve on the state of the art in a particular discipline and be exposed to the various aspects of conducting research, working on a specific problem; COMP9993 completes that journey.","COMP9991 + COMP9993 is for high achievers who can and want to maximise the exposure to research that a Masters by coursework has to expose students to. It exceeds the aims of COMP9900 in doing more than ""putting everything together"": it aims at letting students tackle a genuine piece of research and improve on the state of the art, be it by making an algorithm more effective, or combining algorithms in new ways, or applying and adjusting particular techniques to new problems. Though projects can be purely theoretical, most projects will be applied at least to some extent and they will have an experimental component, thanks to which it is often possible to compare the proposed approach with existing ones.
By the end of the term, students must give a seminar, inviting at least supervisor and assessor, with a presentation that is roughly 45 minutes long, and submit a final report, that goes over all aspects of the work completed in both COMP9991 and COMP9993. Both seminar and report should demonstrate that the plan exposed in the COMP9991 seminar has been successfully completed. The main aim is to provide evidence that the student has acquired the skills that are necessary to successfully conduct a piece of research, in all aspects of the work, from producing a literature review to comparing one's results with those of other researchers, having brought some kind of innovation to the field.","Exchange ideas with a supervisor to boost creativity and develop critical thinking
Create new concepts, techniques or designs, thereby demonstrating a capacity for innovation
Apply existing methods to a problem for an in-depth understanding of how they work and of their limitations
Analyse and compare various approaches and experimental results, to identify their key strengths and weaknesses
Evaluate the proposed new concept, techniques or designs, ideally demonstrating that they improve on the state of the art
Give an oral presentation that is as pedagogical, clear, technically precise and insightful as possible
Write a report that articulates all aspects a research project, including comparison with existing work, that is of the highest standards technically","Course Description: Students who have satisfactorily completed COMP9991 in their penultimate term of study in MIT (8543) have to, in their last term of study, complete either COMP9992 or COMP9993. Which of COMP9992 or COMP9993 is appropriate has been determined following the COMP9991 seminar. COMP9993 has been chosen for projects such that completing them successfully requires a workload that is roughly equivalent to that of two standard courses, though it can be expected that a research project, being more open ended and tackled by very motivated students, turns out to be more time consuming.
Meeting the expectations of COMP9991 + COMP9993, or even better, exceeding them with a piece of work that can result in a conference or journal publication, can make applications for a research degree stronger. COMP9991 has also been appealing to students who wanted to modestly improve on the state of the art in a particular discipline and be exposed to the various aspects of conducting research, working on a specific problem; COMP9993 completes that journey.
Course Aims: COMP9991 + COMP9993 is for high achievers who can and want to maximise the exposure to research that a Masters by coursework has to expose students to. It exceeds the aims of COMP9900 in doing more than ""putting everything together"": it aims at letting students tackle a genuine piece of research and improve on the state of the art, be it by making an algorithm more effective, or combining algorithms in new ways, or applying and adjusting particular techniques to new problems. Though projects can be purely theoretical, most projects will be applied at least to some extent and they will have an experimental component, thanks to which it is often possible to compare the proposed approach with existing ones.
By the end of the term, students must give a seminar, inviting at least supervisor and assessor, with a presentation that is roughly 45 minutes long, and submit a final report, that goes over all aspects of the work completed in both COMP9991 and COMP9993. Both seminar and report should demonstrate that the plan exposed in the COMP9991 seminar has been successfully completed. The main aim is to provide evidence that the student has acquired the skills that are necessary to successfully conduct a piece of research, in all aspects of the work, from producing a literature review to comparing one's results with those of other researchers, having brought some kind of innovation to the field.
Course Learning Outcomes: Exchange ideas with a supervisor to boost creativity and develop critical thinking
Create new concepts, techniques or designs, thereby demonstrating a capacity for innovation
Apply existing methods to a problem for an in-depth understanding of how they work and of their limitations
Analyse and compare various approaches and experimental results, to identify their key strengths and weaknesses
Evaluate the proposed new concept, techniques or designs, ideally demonstrating that they improve on the state of the art
Give an oral presentation that is as pedagogical, clear, technically precise and insightful as possible
Write a report that articulates all aspects a research project, including comparison with existing work, that is of the highest standards technically",Research design and execution; critical thinking; innovation and creativity in technical solutions; technical writing and presentation,Experience in conducting research; critical thinking; innovation and creativity in technical solutions; technical writing and presentation,Advanced research projects; algorithm optimization and application; comparative analysis; literature review and synthesis,Profound understanding of research methodologies; ability to conceive and execute innovative research projects; proficiency in applying theoretical knowledge to practical real-world problems; skill in articulating complex technical information effectively in both written and oral forms; capability to evaluate and improve upon existing technological solutions.,This course develops students' skills in conducting research by allowing them to undertake a genuine piece of research and improve on the state of the art.
DATA1001,Introduction to Data Science and Decisions,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=DATA1001&activityGroupId=1,"Students will be provided with a broad overview of Data Science as a platform for further studies in Data Science and an understanding and appreciation of Data Science in the modern world.Students will study the fundamentals of Data Science as it is applied in Computer Science, Economics and Mathematics and Statistics. They will be introduced to topics such as databases, data analytics, data mining, Bayesian statistics, statistical software, econometrics, machine learning and business forecasting.
The content of this course will be delivered via weekly live lectures with academics from three different schools, the School of Mathematics and Statistics, the School of Economics and the School of Computer Science and Engineering. These concepts will be further explored through a series of tutorials/workshops.","The aim of the course is to provide a broad overview of probability theory, different statistical methods, regression analysis, and modern data science techniques. This course will provide a platform for further studies in Data Science and Machine Learning.","Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply fundamental data science techniques and tools, including machine learning, Naïve Bayes classification, Decision trees, K-NN, unsupervised learning and neural networks
Apply key methods of statistical inference in applied settings
Apply various data visualisation tools, perform regression analysis and draw causal inference from data
Use key theoretical tools to explore the properties of random variables","Course Description: Students will be provided with a broad overview of Data Science as a platform for further studies in Data Science and an understanding and appreciation of Data Science in the modern world.Students will study the fundamentals of Data Science as it is applied in Computer Science, Economics and Mathematics and Statistics. They will be introduced to topics such as databases, data analytics, data mining, Bayesian statistics, statistical software, econometrics, machine learning and business forecasting.
The content of this course will be delivered via weekly live lectures with academics from three different schools, the School of Mathematics and Statistics, the School of Economics and the School of Computer Science and Engineering. These concepts will be further explored through a series of tutorials/workshops.
Course Aims: The aim of the course is to provide a broad overview of probability theory, different statistical methods, regression analysis, and modern data science techniques. This course will provide a platform for further studies in Data Science and Machine Learning.
Course Learning Outcomes: Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply fundamental data science techniques and tools, including machine learning, Naïve Bayes classification, Decision trees, K-NN, unsupervised learning and neural networks
Apply key methods of statistical inference in applied settings
Apply various data visualisation tools, perform regression analysis and draw causal inference from data
Use key theoretical tools to explore the properties of random variables",Data analysis and interpretation; statistical computing; application of machine learning techniques; data visualization and communication,"Data analysis; data visualization; machine learning; statistical analysis; R; Probability theory; regression; Bayesian statistics; econometrics; data mining; neural networks
",Probability theory; statistical methods; regression analysis; machine learning algorithms; data visualization; Bayesian statistics; econometrics; data mining; neural networks,Solid understanding of foundational data science concepts; proficiency in using statistical software like R/RStudio for data analysis; ability to apply probability and statistical inference in various contexts; capability to leverage machine learning tools and techniques for predictive modeling and data interpretation; skill in using data visualization tools to effectively communicate findings.,"This course introduces students to the fundamentals of Data Science, covering databases, analytics, mining, statistics, and machine learning."
DATA9001,Fundamentals of Data Science,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=DATA9001&activityGroupId=1,"This course provides a broad overview of Data Science as a platform for further studies in Data Science and an understanding and appreciation of Data Science in the modern world.
Students will study the fundamentals of Data Science as it is applied in Computer Science, Economics, and Mathematics and Statistics. They will be introduced to topics such as databases, data analytics, data mining, Bayesian statistics, statistical software, econometrics, machine learning and business forecasting.
The content of this course will be delivered via weekly live lectures with academics from three different Schools: The School of Mathematics and Statistics, the School of Economics and the School of Computer Science and Engineering. These concepts will be further explored through a series of tutorials/workshops.","The aim of the course is to provide a broad overview of probability theory, different statistical methods, regression analysis, and modern data science techniques. This course will provide a platform for further studies in Data Science and Machine Learning.","Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply fundamental data science techniques and tools, including machine learning, Naïve Bayes classification, Decision trees, K-NN, unsupervised learning and neural networks
Apply key methods of statistical inference in applied settings
Apply various data visualisation tools, perform regression analysis and draw causal inference from data
Use key theoretical tools to explore the properties of random variables","Course Description: This course provides a broad overview of Data Science as a platform for further studies in Data Science and an understanding and appreciation of Data Science in the modern world.
Students will study the fundamentals of Data Science as it is applied in Computer Science, Economics, and Mathematics and Statistics. They will be introduced to topics such as databases, data analytics, data mining, Bayesian statistics, statistical software, econometrics, machine learning and business forecasting.
The content of this course will be delivered via weekly live lectures with academics from three different Schools: The School of Mathematics and Statistics, the School of Economics and the School of Computer Science and Engineering. These concepts will be further explored through a series of tutorials/workshops.
Course Aims: The aim of the course is to provide a broad overview of probability theory, different statistical methods, regression analysis, and modern data science techniques. This course will provide a platform for further studies in Data Science and Machine Learning.
Course Learning Outcomes: Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply fundamental data science techniques and tools, including machine learning, Naïve Bayes classification, Decision trees, K-NN, unsupervised learning and neural networks
Apply key methods of statistical inference in applied settings
Apply various data visualisation tools, perform regression analysis and draw causal inference from data
Use key theoretical tools to explore the properties of random variables",Statistical analysis and computation; critical thinking; application of machine learning techniques; technical writing and presentation,"Statistical analysis; machine learning; technical writing and presentation; data visualization; data analysis; Regression; nearest neighbor; decision trees; Bayesian statistics; Econometrics


","Data science fundamentals; machine learning applications including Naïve Bayes classification, Decision Trees, K-NN, unsupervised learning, and neural networks; statistical methods including regression analysis and Bayesian statistics; data visualization and econometric modeling",Deep understanding of data science principles and methodologies; ability to apply statistical software tools in analyzing real-world data; proficiency in employing statistical and machine learning models to solve complex problems; skill in presenting complex data insights effectively in both written and oral formats; capability to critically evaluate and utilize various data analysis techniques in practical settings.,"This course explores and applies fundamental Data Science techniques and tools, including machine learning and statistics, through lectures and workshops."
ENGG1811,Computing for Engineers,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=ENGG1811&activityGroupId=1,"Computing is an integral part of modern engineering. Computing is used in the design, automation, experimentation, monitoring, diagnosis, data collection, data analysis, visualisation and many other aspects of engineering. A very important skill for engineers is to be able to use computers to help them to solve problems efficiently. The aim of this course is to give an introduction to computing for engineers with an emphasis on computational problem solving. In order to realise this aim, the students will learn to use the Python programming language and some its many packages to solve problems. Since the course is designed primarily for engineers, the computing examples are often presented together with an engineering context to help the students to appreciate the applications of computing in engineering. This course also includes a minor component in Matlab and spreadsheet.","Computational thinking an important tool that all modern engineers need. The course aims to equip students with the skills required to use programming and computational thinking to solve problems in engineering and related areas, and to assists students in developing familiarity with tools they will use withintheir own disciplines in later courses.","Write Python programs to automate many different tasks
Use, at a simple level, the numerical computation packages of Matlab and Excel
Implement algorithms using the Python programming language
Design algorithms to solve computation problems","Course Description: Computing is an integral part of modern engineering. Computing is used in the design, automation, experimentation, monitoring, diagnosis, data collection, data analysis, visualisation and many other aspects of engineering. A very important skill for engineers is to be able to use computers to help them to solve problems efficiently. The aim of this course is to give an introduction to computing for engineers with an emphasis on computational problem solving. In order to realise this aim, the students will learn to use the Python programming language and some its many packages to solve problems. Since the course is designed primarily for engineers, the computing examples are often presented together with an engineering context to help the students to appreciate the applications of computing in engineering. This course also includes a minor component in Matlab and spreadsheet.
Course Aims: Computational thinking an important tool that all modern engineers need. The course aims to equip students with the skills required to use programming and computational thinking to solve problems in engineering and related areas, and to assists students in developing familiarity with tools they will use withintheir own disciplines in later courses.
Course Learning Outcomes: Write Python programs to automate many different tasks
Use, at a simple level, the numerical computation packages of Matlab and Excel
Implement algorithms using the Python programming language
Design algorithms to solve computation problems",Computational thinking; problem-solving using programming; algorithm design and implementation; software tool proficiency,"Algorithm design; Python; MATLAB; spreadsheet data management; problem-solving
", Introduction to computing in engineering; Python programming and its applications; use of Matlab and spreadsheets for engineering tasks; engineering problem-solving through computing,Solid understanding of how computing integrates into engineering disciplines; ability to use Python and its packages effectively for problem-solving; proficiency in using Matlab and Excel for numerical computations; skill in designing and implementing algorithms to address engineering challenges.,"This course teaches engineers to use computational thinking and Python programming to solve problems efficiently, emphasizing practical applications in engineering contexts."
GSOE9220,Launching a Startup,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=GSOE9220&activityGroupId=1,"This course aims to provide students with the skills necessary to start and grow a startup idea. Whilst some aspects of entrepreneurship can be learned from case studies, research on entrepreneurship education has shows that a learn-by-doing approach is most effective. During the course students form teams, identify potential business opportunities and utilise enquiry based learning to assess the viability of their business model. Each team will receive deep mentor engagement along the way. Students will also gain access to comprehensive resources designed to accelerate learning and ensure that they are equipped with the tools to become successful entrepreneurs. Students studying this course will access the minds of successful, highly articulate and innovative entrepreneurs (guest speakers) who live and breathe business. Thinking innovatively, creating a business, and developing a team are core entrepreneurial skills that the course teaches.
Topics covered in this course include: identifying a problem, identifying the target market, building a minimum viable product to address that problem, determining a suitable revenue model, pricing strategy, debt and equity finance, creating a budget, legal aspects of commencing a startup, accounting aspects of commencing a startup, sales and marketing, people and culture, raising capital, growth and exit strategy.","Students will learn business principles, develop skillsin identifying business opportunities, propose a business idea (a start-up), and use best practice methodology to validate the idea.
This course places emphasis on practical skills: creativity, public speaking and presentation skills, teamwork, problem-solving, self-management, interpersonal communication and identifying and enhancing personal strengths.","Clearly and concisely communicate a persuasive startup pitch detailing the value proposition of the startup to various stakeholders including investors and customers
Identify and critically analyse business ideas to determine a startup idea's viability and scalability
Develop entrepreneurial skills to assess business opportunities with limited resources through experiential-learning
Develop interpersonal and project management skills by working in small teams to develop and manage a startup idea
Identify and systematically evaluate business opportunities","Course Description: This course aims to provide students with the skills necessary to start and grow a startup idea. Whilst some aspects of entrepreneurship can be learned from case studies, research on entrepreneurship education has shows that a learn-by-doing approach is most effective. During the course students form teams, identify potential business opportunities and utilise enquiry based learning to assess the viability of their business model. Each team will receive deep mentor engagement along the way. Students will also gain access to comprehensive resources designed to accelerate learning and ensure that they are equipped with the tools to become successful entrepreneurs. Students studying this course will access the minds of successful, highly articulate and innovative entrepreneurs (guest speakers) who live and breathe business. Thinking innovatively, creating a business, and developing a team are core entrepreneurial skills that the course teaches.
Topics covered in this course include: identifying a problem, identifying the target market, building a minimum viable product to address that problem, determining a suitable revenue model, pricing strategy, debt and equity finance, creating a budget, legal aspects of commencing a startup, accounting aspects of commencing a startup, sales and marketing, people and culture, raising capital, growth and exit strategy.
Course Aims: Students will learn business principles, develop skillsin identifying business opportunities, propose a business idea (a start-up), and use best practice methodology to validate the idea.
This course places emphasis on practical skills: creativity, public speaking and presentation skills, teamwork, problem-solving, self-management, interpersonal communication and identifying and enhancing personal strengths.
Course Learning Outcomes: Clearly and concisely communicate a persuasive startup pitch detailing the value proposition of the startup to various stakeholders including investors and customers
Identify and critically analyse business ideas to determine a startup idea's viability and scalability
Develop entrepreneurial skills to assess business opportunities with limited resources through experiential-learning
Develop interpersonal and project management skills by working in small teams to develop and manage a startup idea
Identify and systematically evaluate business opportunities",Entrepreneurial thinking and strategy development; public speaking and persuasive communication; teamwork and collaboration; problem-solving and critical analysis; self-management and interpersonal communication,Team collaboration; problem-solving; business analysis,"Startup ideation and development; market analysis and target identification; creation of minimum viable products; revenue models and pricing strategies; financial planning including debt and equity financing; legal and accounting foundations for startups; sales, marketing, and cultural strategy; capital raising, business growth, and exit strategies",Business model assessment; revenue models; budget creation; capital raising strategies; growth and exit strategies,"This course develops entrepreneurial skills by guiding students to identify, validate, and propose a startup idea using practical methodologies and mentorship."
MATH1011,Fundamentals of Mathematics B,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1011&activityGroupId=1,"This course provides mathematical skills and knowledge similar to the NSW HSC Mathematics Extension 1 high school subject. It can serve as a bridging course for students who need to take MATH1131 but do not have the necessary assumed knowledge. It covers functions and their inverses, limits, continuity, differential and integral calculus as a grounding for a more rigorous treatment of these topics in MATH1131. Also covered are sequences and series, mathematical induction, the binomial theorem, probability, and an introduction to vectors in 2 and 3 dimensions and solving systems of linear equations using Gaussian elimination. The Maple computer algebra package is used to complement hand calculations. It is assumed that students will have mathematical background knowledge equivalent to a Band 4 in HSC Mathematics Advanced.","The aim of this course is to provide mathematical skills similar to HSC Mathematics Extension 1 for students who need this for further study in mathematics or other STEM disciplines. The course introduces the theorems and definitions on which Calculus is built and vectors, matrices and Gaussian elimination which will form the basis for the study of Linear Algebra. The course also builds mathematical communication skills and introduces students to the computer algebra systems.","Communicate mathematical ideas using correct terminology and using technology
Formulate mathematical models using Algebra and Calculus and interpret their solution
Apply the concepts and techniques of Calculus and Linear Algebra to solve specific problems
Use technology as an aid to solve problems in Algebra and Calculus","Course Description: This course provides mathematical skills and knowledge similar to the NSW HSC Mathematics Extension 1 high school subject. It can serve as a bridging course for students who need to take MATH1131 but do not have the necessary assumed knowledge. It covers functions and their inverses, limits, continuity, differential and integral calculus as a grounding for a more rigorous treatment of these topics in MATH1131. Also covered are sequences and series, mathematical induction, the binomial theorem, probability, and an introduction to vectors in 2 and 3 dimensions and solving systems of linear equations using Gaussian elimination. The Maple computer algebra package is used to complement hand calculations. It is assumed that students will have mathematical background knowledge equivalent to a Band 4 in HSC Mathematics Advanced.
Course Aims: The aim of this course is to provide mathematical skills similar to HSC Mathematics Extension 1 for students who need this for further study in mathematics or other STEM disciplines. The course introduces the theorems and definitions on which Calculus is built and vectors, matrices and Gaussian elimination which will form the basis for the study of Linear Algebra. The course also builds mathematical communication skills and introduces students to the computer algebra systems.
Course Learning Outcomes: Communicate mathematical ideas using correct terminology and using technology
Formulate mathematical models using Algebra and Calculus and interpret their solution
Apply the concepts and techniques of Calculus and Linear Algebra to solve specific problems
Use technology as an aid to solve problems in Algebra and Calculus","Mathematical modeling and problem-solving; effective communication of mathematical concepts; application of algebraic and calculus techniques; proficiency in using mathematical software for computation
",Mathematical modeling; Vector algebra; Linear algebra; calculus,Functions and their inverses; limits and continuity in calculus; differential and integral calculus; sequences and series; mathematical induction; the binomial theorem; basics of probability; vectors in 2D and 3D; systems of linear equations and Gaussian elimination; introduction to Maple computer algebra system,Essential principles of calculus and linear algebra; application of these principles in solving mathematical and real-world problems; effective communication of mathematical concepts; use of the Maple computer algebra system for calculations,"This course develops mathematical skills equivalent to NSW HSC Mathematics Extension 1 by introducing calculus, linear algebra, and probability."
MATH1031,Mathematics for Life Sciences,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1031&activityGroupId=1,"MATH1031 provides a foundation in techniques in Calculus and Linear Algebra used for mathematical modelling in the life sciences and other disciplines. Applications are presented in interdisciplinary contexts through lectures, videos, and tutorial exercises. This course enhances students’ analytical thinking and problem-solving skills through illustrative examples in lectures, problem-based tutorials and an assignment. Communication skills are developed through active participation in tutorials, by writing clear and logical arguments in the assignment and when solving tutorial problems.
This course is designed for students who need to use mathematical techniques for applications in the life and social sciences and other disciplines and who do not intend to continue to further studies in Mathematics. Although students who do intend to study Mathematics beyond first year can take MATH1031 as a preparation for MATH1131, which does provide the foundation for further study in mathematics.","The aim of MATH1031 is to provide students with an introduction to the most common mathematical techniques used in modelling of real-world problems with an emphasis on applications in the life sciences. Students will learn how to use software as an aid in mathematical modelling and problem solving and gain experience in effective communication of mathematical ideas using technology, in the assignment, and orally in the tutorials.","Apply the concepts and techniques from Algebra and Calculus to solve mathematical problems
Formulate mathematical models using Algebra and Calculus from real world scenarios
Use technology as an aid for both routine calculation and solving appropriate mathematical modelling problems
Use Algebra and Calculus to solve problems in other disciplines
Communicate mathematical ideas, techniques, and results effectively in written form","Course Description: MATH1031 provides a foundation in techniques in Calculus and Linear Algebra used for mathematical modelling in the life sciences and other disciplines. Applications are presented in interdisciplinary contexts through lectures, videos, and tutorial exercises. This course enhances students’ analytical thinking and problem-solving skills through illustrative examples in lectures, problem-based tutorials and an assignment. Communication skills are developed through active participation in tutorials, by writing clear and logical arguments in the assignment and when solving tutorial problems.
This course is designed for students who need to use mathematical techniques for applications in the life and social sciences and other disciplines and who do not intend to continue to further studies in Mathematics. Although students who do intend to study Mathematics beyond first year can take MATH1031 as a preparation for MATH1131, which does provide the foundation for further study in mathematics.
Course Aims: The aim of MATH1031 is to provide students with an introduction to the most common mathematical techniques used in modelling of real-world problems with an emphasis on applications in the life sciences. Students will learn how to use software as an aid in mathematical modelling and problem solving and gain experience in effective communication of mathematical ideas using technology, in the assignment, and orally in the tutorials.
Course Learning Outcomes: Apply the concepts and techniques from Algebra and Calculus to solve mathematical problems
Formulate mathematical models using Algebra and Calculus from real world scenarios
Use technology as an aid for both routine calculation and solving appropriate mathematical modelling problems
Use Algebra and Calculus to solve problems in other disciplines
Communicate mathematical ideas, techniques, and results effectively in written form",Mathematical modeling and analysis; problem-solving using algebra and calculus; effective communication of mathematical concepts; use of technology in mathematical computations and modeling,Mathematical modeling; Vector algebra; Linear algebra; calculus,Techniques in calculus and linear algebra; applications in life sciences and interdisciplinary contexts; mathematical modeling in real-world scenarios; use of software tools in problem-solving; development of mathematical communication skills,Basic calculus and algebra concepts for modeling real-world problems; communication of mathematical ideas through technology and presentations; practical application of mathematical techniques in non-mathematical fields,"This course develops foundational mathematical skills through problem-solving exercises, tutorials, and assignments, focusing on applications in life sciences and other disciplines."
MATH1041,Statistics for Life and Social Sciences,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1041&activityGroupId=1,"This course is for undergraduate students of life and social sciences. It is not intended for students who propose to study a substantial amount of statistics beyond first-year level. Students are assumed to have received a mark of at least 60 in HSC Mathematics Advanced or at least 70 in HSC Mathematics Standard or equivalent.
The course first introduces the concepts on which statistics is built, namely: Descriptive statistics: exploring the data using numerical and graphical summaries; Study designs and sampling; Probability and independence; Discrete distributions: the binomial distribution. Continuous distributions: the normal, t and chi-square distributions. Random variables: calculating the mean and variance. Building on those, the second part of the course presents techniques for making inference about the population from a sample, that is, using confidence intervals and tests of hypotheses: z-test, t-test and Chi-squared test for statistical independence. Linear regression: correlation, residuals, estimation and prediction.
Technology is used throughout the course: Students will use the R software to analyse datasets.","The aim of this course is to provide a foundation in statistics to students who will not extend their statistics study beyond this course. The aim of this of this course is to equip students with the tools needed to design a study, to collect, analyse and interpret data, which is fundamental to any form of quantitative research.","Apply the principles of study design to real life examples
Calculate confidence intervals and conduct hypothesis tests by hand for small datasets
Identify which analysis procedure is appropriate for a given research problem involving one or two variables
Interpret computer output for a statistical procedure
Apply statistical techniques appropriately to authentic problems
Apply probability theory to practical problems
Apply statistical procedures using statistical software","Course Description: This course is for undergraduate students of life and social sciences. It is not intended for students who propose to study a substantial amount of statistics beyond first-year level. Students are assumed to have received a mark of at least 60 in HSC Mathematics Advanced or at least 70 in HSC Mathematics Standard or equivalent.
The course first introduces the concepts on which statistics is built, namely: Descriptive statistics: exploring the data using numerical and graphical summaries; Study designs and sampling; Probability and independence; Discrete distributions: the binomial distribution. Continuous distributions: the normal, t and chi-square distributions. Random variables: calculating the mean and variance. Building on those, the second part of the course presents techniques for making inference about the population from a sample, that is, using confidence intervals and tests of hypotheses: z-test, t-test and Chi-squared test for statistical independence. Linear regression: correlation, residuals, estimation and prediction.
Technology is used throughout the course: Students will use the R software to analyse datasets.
Course Aims: The aim of this course is to provide a foundation in statistics to students who will not extend their statistics study beyond this course. The aim of this of this course is to equip students with the tools needed to design a study, to collect, analyse and interpret data, which is fundamental to any form of quantitative research.
Course Learning Outcomes: Apply the principles of study design to real life examples
Calculate confidence intervals and conduct hypothesis tests by hand for small datasets
Identify which analysis procedure is appropriate for a given research problem involving one or two variables
Interpret computer output for a statistical procedure
Apply statistical techniques appropriately to authentic problems
Apply probability theory to practical problems
Apply statistical procedures using statistical software",Statistical analysis and interpretation; study design and data collection; application of probability theory; proficiency in using statistical software (R software),R; statistical analysis; data analysis; probability theory,Descriptive statistics and data exploration; study designs and sampling methods; probability concepts and independence; discrete and continuous distributions; hypothesis testing and confidence intervals; linear regression and correlation analysis,Foundational principles of statistics; application of statistical methods in study design and data analysis; usage of R for data analysis; understanding and application of statistical concepts in life and social sciences,"This course introduces and applies statistics concepts, including data exploration, study designs, probability, and inference techniques, as well as equips students with tools for designing and analyzing studies."
MATH1081,Discrete Mathematics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1081&activityGroupId=1,"This course will enhance students' research, inquiry, and analytical thinking abilities and provide them with the mathematical language and mathematical techniques to unravel many seemingly unrelated problems. The course content addresses five major pillars of discrete mathematics: set theory, number theory, proofs and logic, combinatorics, and graph theory. The theory covered will provide a good foundation for understanding many problems that arise in all science disciplines, particularly higher mathematics and computer science.
The mathematical problem-solving skills that students will develop are based on logical arguments and mathematical language that can be applied in multidisciplinary work. The course will also engage students in independent and reflective learning through independent mastery of a wide range of tutorial problems. The course also develops students' communication skills through active participation in tutorials, critical analysis of the work of their peers, and presenting clear, logical arguments when solving problems.
The course is delivered through 5 hours of lectures and 2 hours of tutorials per week, along with weekly self-paced online lessons. All topics are taught from first principles, but due to the relatively fast pace of delivery, it is recommended for students with a solid background in HSC Mathematics Advanced. The course provides a strong foundation for students intending to study higher-level mathematics or computer science.","The course aims to provide students with foundational knowledge of Discrete Mathematics, broken into five main topics: set theory, number theory, proofs and logic, combinatorics, and graph theory. This course introduces important problem-solving skills to students and develops their mathematical thinking and communication skills. It provides an important foundation for studying higher-level pure mathematics, as well as areas in computer science and informatics.","Communicate mathematical ideas effectively using correct terminology
Use technology as an aid to communicate mathematical ideas by properly typesetting mathematical proofs
State the definitions and theorems of the Discrete Mathematics topics taught and recognise how they can be applied to standard numeric problems
Apply the concepts and proof techniques taught to solve problems requiring rigorous logical and mathematical arguments","Course Description: This course will enhance students' research, inquiry, and analytical thinking abilities and provide them with the mathematical language and mathematical techniques to unravel many seemingly unrelated problems. The course content addresses five major pillars of discrete mathematics: set theory, number theory, proofs and logic, combinatorics, and graph theory. The theory covered will provide a good foundation for understanding many problems that arise in all science disciplines, particularly higher mathematics and computer science.
The mathematical problem-solving skills that students will develop are based on logical arguments and mathematical language that can be applied in multidisciplinary work. The course will also engage students in independent and reflective learning through independent mastery of a wide range of tutorial problems. The course also develops students' communication skills through active participation in tutorials, critical analysis of the work of their peers, and presenting clear, logical arguments when solving problems.
The course is delivered through 5 hours of lectures and 2 hours of tutorials per week, along with weekly self-paced online lessons. All topics are taught from first principles, but due to the relatively fast pace of delivery, it is recommended for students with a solid background in HSC Mathematics Advanced. The course provides a strong foundation for students intending to study higher-level mathematics or computer science.
Course Aims: The course aims to provide students with foundational knowledge of Discrete Mathematics, broken into five main topics: set theory, number theory, proofs and logic, combinatorics, and graph theory. This course introduces important problem-solving skills to students and develops their mathematical thinking and communication skills. It provides an important foundation for studying higher-level pure mathematics, as well as areas in computer science and informatics.
Course Learning Outcomes: Communicate mathematical ideas effectively using correct terminology
Use technology as an aid to communicate mathematical ideas by properly typesetting mathematical proofs
State the definitions and theorems of the Discrete Mathematics topics taught and recognise how they can be applied to standard numeric problems
Apply the concepts and proof techniques taught to solve problems requiring rigorous logical and mathematical arguments",Advanced problem-solving and analytical thinking; effective communication of complex mathematical ideas; application of mathematical proof techniques; proficiency in using technology for mathematical typesetting and presentations,Set theory; number theory; rigorous reasoning and proof techniques; combinatorics; graph theory; discrete mathematics,Set theory; number theory; proofs and logic; combinatorics; graph theory; problem-solving using discrete mathematics principles; independent and reflective learning through problem-solving; communication of mathematical arguments,Fundamental concepts of discrete mathematics; application of discrete mathematical principles in science and technology; effective communication of complex mathematical ideas,"This course develops students' research, inquiry, and analytical thinking abilities by enhancing their understanding of discrete mathematics."
MATH1131,Mathematics 1A,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1131&activityGroupId=1,"This course builds on high school calculus-based courses to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year and is usually followed by MATH1231 or MATH1241. The Calculus half of the course develops a deeper understanding of continuous and differentiable functions and introduces the Riemann integral. It shows how theorems such as the Maximum-Minimum Theorem, the Intermediate Value Theorem and Mean Value Theorems are used to justify properties of common functions and to solve both theoretical and applied problems. The Algebra half of the course introduces vectors and matrices and the solution of systems of linear equations by Gaussian elimination which paves the way for linear algebra in later courses. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment. Students are assumed to have a good understanding of NSW HSC Mathematics Extension 1 and 2 subjects.
MATH1131 has a higher version, MATH1141, has greater depth and a greater emphasis on proof and rigorous argument than MATH1131.","The aim of this course is to provide a foundation for further study in mathematics. The course introduces the theorems and definitions on which Calculus is built and vectors, matrices and Gaussian elimination which will form the basis for the study of Linear Algebra. The course also builds mathematical communication skills and introduces students to the computer algebra systems.","Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Communicate mathematical ideas in written form using correct terminology and using technology
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Identify and construct valid mathematical arguments
Apply concepts in Algebra and Calculus to unexpected contexts","Course Description: This course builds on high school calculus-based courses to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year and is usually followed by MATH1231 or MATH1241. The Calculus half of the course develops a deeper understanding of continuous and differentiable functions and introduces the Riemann integral. It shows how theorems such as the Maximum-Minimum Theorem, the Intermediate Value Theorem and Mean Value Theorems are used to justify properties of common functions and to solve both theoretical and applied problems. The Algebra half of the course introduces vectors and matrices and the solution of systems of linear equations by Gaussian elimination which paves the way for linear algebra in later courses. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment. Students are assumed to have a good understanding of NSW HSC Mathematics Extension 1 and 2 subjects.
MATH1131 has a higher version, MATH1141, has greater depth and a greater emphasis on proof and rigorous argument than MATH1131.
Course Aims: The aim of this course is to provide a foundation for further study in mathematics. The course introduces the theorems and definitions on which Calculus is built and vectors, matrices and Gaussian elimination which will form the basis for the study of Linear Algebra. The course also builds mathematical communication skills and introduces students to the computer algebra systems.
Course Learning Outcomes: Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Communicate mathematical ideas in written form using correct terminology and using technology
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Identify and construct valid mathematical arguments
Apply concepts in Algebra and Calculus to unexpected contexts","Advanced mathematical problem-solving abilities; Proficiency in mathematical software usage; Effective mathematical communication skills; Application of calculus and algebra in practice
",Linear algebra; calculus; R; MATLAB; Maple,"Calculus: functions, integrals, fundamental theorems; Algebra: vectors, matrices, linear equations; Gaussian elimination and introductory linear algebra; Mathematical documentation using technology
","Foundation in calculus and algebra for STEM; Capability to solve theoretical and applied problems; Use of Maple and other computer algebra systems; Communication of mathematical concepts via typesetting software; Preparation for advanced mathematics and scientific applications
","This course develops a solid foundation for further study in mathematics by applying definitions, theorems, and technology to justify statements, solve problems, and communicate mathematical ideas."
MATH1141,Higher Mathematics 1A,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1141&activityGroupId=1,"This course builds on high school calculus-based courses to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year and is usually followed by MATH1241 or MATH1231 and, as the higher version of MATH1131, has greater depth and a greater emphasis on proof and rigorous argument than MATH1131. The Calculus half of the course develops a deeper understanding of continuous and differentiable functions and introduces the Riemann integral. It shows how theorems such as the Maximum-Minimum Theorem, the Intermediate Value Theorem and Mean Value Theorems are used to rigorously justify properties of common functions and to solve both theoretical and applied problems. The Algebra half of the course introduces vectors and matrices and the solution of systems of linear equations by Gaussian elimination which paves the way for linear algebra in later courses. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment. Students are assumed to have a good understanding of NSW HSC Mathematics Extension 1 and 2 subjects.","The aim of this course is to provide a foundation for further study in mathematics. The course introduces the theorems and definitions on which Calculus is built and vectors, matrices and Gaussian elimination which will form the basis for the study of Linear Algebra. The course also builds mathematical communication skills and introduces students to computer algebra systems.","Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Identify and construct valid mathematical arguments and proofs of theorems
Apply concepts and techniques from Algebra and Calculus to solve problems
Communicate mathematical ideas in written and oral form using correct terminology and using technology
Apply concepts in Algebra and Calculus to unexpected contexts","Course Description: This course builds on high school calculus-based courses to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year and is usually followed by MATH1241 or MATH1231 and, as the higher version of MATH1131, has greater depth and a greater emphasis on proof and rigorous argument than MATH1131. The Calculus half of the course develops a deeper understanding of continuous and differentiable functions and introduces the Riemann integral. It shows how theorems such as the Maximum-Minimum Theorem, the Intermediate Value Theorem and Mean Value Theorems are used to rigorously justify properties of common functions and to solve both theoretical and applied problems. The Algebra half of the course introduces vectors and matrices and the solution of systems of linear equations by Gaussian elimination which paves the way for linear algebra in later courses. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment. Students are assumed to have a good understanding of NSW HSC Mathematics Extension 1 and 2 subjects.
Course Aims: The aim of this course is to provide a foundation for further study in mathematics. The course introduces the theorems and definitions on which Calculus is built and vectors, matrices and Gaussian elimination which will form the basis for the study of Linear Algebra. The course also builds mathematical communication skills and introduces students to computer algebra systems.
Course Learning Outcomes: Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Identify and construct valid mathematical arguments and proofs of theorems
Apply concepts and techniques from Algebra and Calculus to solve problems
Communicate mathematical ideas in written and oral form using correct terminology and using technology
Apply concepts in Algebra and Calculus to unexpected contexts",Calculus; Linear algebra; Vectors and matrices; Gaussian elimination,Calculus; Linear algebra; Vectors algebra; Gaussian elimination, Calculus; Algebra; vectors and matrices; Gaussian elimination,Continuous and differentiable functions; Riemann integral; linear algebra foundations; computer algebra systems,"This course develops a solid foundation in mathematics for STEM students, applying definitions, theorems, and technology to solve problems."
MATH1151,Mathematics for Actuarial Studies and Finance 1A,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1151&activityGroupId=1,"This course, together with MATH1251, provides the mathematical foundation needed for Actuarial Studies and related disciplines, as well as possible further studies in mathematics and statistics. MATH1151 builds on high school level calculus, focussing first on a more rigorous development of limits and continuous and differentiable functions, and then introduces multivariable calculus with partial derivatives, tangent planes and multivariable chain rules. The Riemann Integral is linked to differential calculus though the fundamental theorem of calculus and techniques of numerical integration are introduced. Vectors and vector geometry are further developed from high school and matrix algebra introduced. Linear equations are treated with Gaussian elimination and matrix methods, and these are used for applications such as basic input-output linear models and least squares approximation. Discrete and continuous random variables are studied including the central limit theorem. Matlab is used throughout MATH1151.
Assumed knowledge: HSC Mathematics Extension 1. Students will be expected to have achieved a combined mark of at least 140 in HSC Mathematics Advanced and HSC Mathematics Extension 1 or a combined mark of 175 in HSC Mathematics Extension 1 and Extension 2.","The aim of MATH1151 is to provide a theoretical basis for the further study and applications of calculus that will be developed in MATH1251 and other courses, the tools needed to solve problems in linear algebra and an understanding of the probability distributions necessary for statistical analysis. Students will develop a practical understanding of how to use Matlab to apply their mathematical knowledge to computational problems.","Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Communicate mathematical ideas in written form using correct terminology and using technology
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Identify and construct valid mathematical arguments
Apply concepts in Algebra and Calculus to unexpected contexts","Course Description: This course, together with MATH1251, provides the mathematical foundation needed for Actuarial Studies and related disciplines, as well as possible further studies in mathematics and statistics. MATH1151 builds on high school level calculus, focussing first on a more rigorous development of limits and continuous and differentiable functions, and then introduces multivariable calculus with partial derivatives, tangent planes and multivariable chain rules. The Riemann Integral is linked to differential calculus though the fundamental theorem of calculus and techniques of numerical integration are introduced. Vectors and vector geometry are further developed from high school and matrix algebra introduced. Linear equations are treated with Gaussian elimination and matrix methods, and these are used for applications such as basic input-output linear models and least squares approximation. Discrete and continuous random variables are studied including the central limit theorem. Matlab is used throughout MATH1151.
Assumed knowledge: HSC Mathematics Extension 1. Students will be expected to have achieved a combined mark of at least 140 in HSC Mathematics Advanced and HSC Mathematics Extension 1 or a combined mark of 175 in HSC Mathematics Extension 1 and Extension 2.
Course Aims: The aim of MATH1151 is to provide a theoretical basis for the further study and applications of calculus that will be developed in MATH1251 and other courses, the tools needed to solve problems in linear algebra and an understanding of the probability distributions necessary for statistical analysis. Students will develop a practical understanding of how to use Matlab to apply their mathematical knowledge to computational problems.
Course Learning Outcomes: Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Communicate mathematical ideas in written form using correct terminology and using technology
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Identify and construct valid mathematical arguments
Apply concepts in Algebra and Calculus to unexpected contexts",Multivariable calculus; Linear algebra; Numerical integration; Matlab proficiency,Multivariable calculus; Linear algebra; Numerical methods; MATLAB; Maple,Limits and continuity; Differential calculus; Multivariable calculus; Vector geometry; Matrix algebra,Fundamental theorem of calculus; Gaussian elimination; Least squares approximation; Central limit theorem,"This course develops the mathematical foundation for Actuarial Studies, statistics, and further studies by applying calculus, algebra, and probability concepts using Matlab."
MATH1231,Mathematics 1B,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1231&activityGroupId=1,"This course builds on MATH1131 or MATH1141 to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year. The Calculus half of the course covers partial derivatives and multivariable chain rules, further techniques of integration and applications of integration, ordinary differential equations, sequences, series and Taylor series. The Linear Algebra half of the course introduces abstract linear algebra, covering vector spaces and linear transformations and eigenvalue and eigenvectors. In addition, there is a topic on probability distributions. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment that focuses on written communication skills.
MATH1231 has a higher version, MATH1241, that has greater depth and a greater emphasis on proof and rigorous argument than MATH1231.","The aim of this course is to provide a foundation for further study in mathematics. The course develops further techniques in Calculus, introduces abstract Linear Algebra, and builds on the foundation of vectors and matrices introduced in MATH1131 or MATH1141. The course also further develops mathematical communication skills and technical skills with computer algebra systems.","Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Identify and construct valid mathematical arguments in the context of Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Communicate mathematical ideas in written and oral form using correct terminology and using technology
Apply concepts in Algebra and Calculus to unexpected contexts","Course Description: This course builds on MATH1131 or MATH1141 to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year. The Calculus half of the course covers partial derivatives and multivariable chain rules, further techniques of integration and applications of integration, ordinary differential equations, sequences, series and Taylor series. The Linear Algebra half of the course introduces abstract linear algebra, covering vector spaces and linear transformations and eigenvalue and eigenvectors. In addition, there is a topic on probability distributions. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment that focuses on written communication skills.
MATH1231 has a higher version, MATH1241, that has greater depth and a greater emphasis on proof and rigorous argument than MATH1231.
Course Aims: The aim of this course is to provide a foundation for further study in mathematics. The course develops further techniques in Calculus, introduces abstract Linear Algebra, and builds on the foundation of vectors and matrices introduced in MATH1131 or MATH1141. The course also further develops mathematical communication skills and technical skills with computer algebra systems.
Course Learning Outcomes: Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Identify and construct valid mathematical arguments in the context of Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Communicate mathematical ideas in written and oral form using correct terminology and using technology
Apply concepts in Algebra and Calculus to unexpected contexts",Multivariable calculus; Abstract linear algebra; Differential equations; Maple software proficiency,"Multivariable calculus; linear algebra;  Partial differential equations; Maple; Ordinary differential equations
",Partial derivatives; Integration techniques; Taylor series; Eigenvalues and eigenvectors; Probability distributions,Vector spaces; Linear transformations; Ordinary differential equations; Sequences and series; Mathematical communication,"This course develops a solid foundation for further study in mathematics by applying definitions, theorems, and techniques in algebra and calculus."
MATH1241,Higher Mathematics 1B,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH1241&activityGroupId=1,"This course builds on MATH1131 or MATH1141 to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year. MATH1241 is the higher version of MATH1231 and has greater depth and a greater emphasis on proof and rigorous argument than MATH1231. The Calculus half of the course covers partial derivatives and multivariable chain rules, further techniques of integration and applications of integration, ordinary differential equations, sequences, series and Taylor series. The Linear Algebra half of the course introduces abstract linear algebra, covering vector spaces and linear transformations and eigenvalue and eigenvectors. In addition, there is a topic on probability distributions. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment that focuses on written communication skills.","The aim of this course is to provide a foundation for further study in mathematics. The course develops further techniques in Calculus, introduces abstract Linear Algebra, and builds on the foundation of vectors and matrices introduced in MATH1131 or MATH1141. The course also further develops mathematical communication skills and technical skills with computer algebra systems.","Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Communicate mathematical ideas in written and oral form using correct terminology and using technology
Identify and construct valid mathematical arguments and proofs of theorems in the context of Algebra and Calculus
Apply concepts in Algebra and Calculus to unexpected contexts","Course Description: This course builds on MATH1131 or MATH1141 to provide a solid foundation for further study in mathematics for students in STEM disciplines. It is taken by undergraduate students typically in their first year. MATH1241 is the higher version of MATH1231 and has greater depth and a greater emphasis on proof and rigorous argument than MATH1231. The Calculus half of the course covers partial derivatives and multivariable chain rules, further techniques of integration and applications of integration, ordinary differential equations, sequences, series and Taylor series. The Linear Algebra half of the course introduces abstract linear algebra, covering vector spaces and linear transformations and eigenvalue and eigenvectors. In addition, there is a topic on probability distributions. Technology is used throughout the course through use of the Maple computer algebra system and students producing a typeset assignment that focuses on written communication skills.
Course Aims: The aim of this course is to provide a foundation for further study in mathematics. The course develops further techniques in Calculus, introduces abstract Linear Algebra, and builds on the foundation of vectors and matrices introduced in MATH1131 or MATH1141. The course also further develops mathematical communication skills and technical skills with computer algebra systems.
Course Learning Outcomes: Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Communicate mathematical ideas in written and oral form using correct terminology and using technology
Identify and construct valid mathematical arguments and proofs of theorems in the context of Algebra and Calculus
Apply concepts in Algebra and Calculus to unexpected contexts",Advanced calculus; Abstract linear algebra; Differential equations; Maple software proficiency,"Multivariable calculus; linear algebra;  Partial differential equations; Maple; Ordinary differential equations
",Multivariable calculus; Integration techniques; Vector spaces; Eigenvalues and eigenvectors; Probability theory,Ordinary differential equations; Taylor series; Linear transformations; Mathematical proofs; Typeset assignments,"This course develops a solid foundation for further study in mathematics by applying definitions, theorems, and techniques to solve problems and justify statements."
MATH1251,Mathematics for Actuarial Studies and Finance 1B,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH1251&activityGroupId=1,"This course builds on the calculus and linear algebra in MATH1151. MATLAB is used throughout. The course is delivered through a series of lectures, classroom tutorials, and online lessons and spans topics in both linear algebra and calculus.In linear algebra, abstract vector spaces and linear transforms are introduced so that the study of vectors and matrices in MATH1151 can be applied to a wide range of applications. The concepts such as spans, linear independence, basis, dimension, kernel, image are studied in both abstract and concrete examples, with links made to data fitting and differential equations. Eigenvalues and eigenvectors are studied along with their applications to Markov chains and systems of differential equations. In calculus, further techniques of integration and the theory and applications of first and second order ordinary differential equations are studied, including existence and uniqueness results and numerical methods. Double integrals, including change of variables are introduced. Convergence results for sequences and series are developed along with Taylor polynomials in both one and two variables and their applications. Optimisation techniques, including classification of critical points and Lagrange multipliers are studied.","The aims of MATH1251, along with MATH1151, are to provide the mathematical tools needed for Actuarial Studies and related disciplines. Students who have completed this course will be able to recognise linear structures and apply techniques in linear algebra to analyse and solve problems of a linear nature. Students will be able to analyse systems governed by commonly occurring ordinary differential equations and apply techniques to solve these analytically and numerically. In addition, students will be able to solve multivariable optimisation problems and use Taylor series techniques to find approximations and derive theoretical results and develop the MATLAB skills needed to apply these mathematical techniques to computational problems.","Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Communicate mathematical ideas in written form using correct terminology and using technology
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Identify and construct valid mathematical arguments
Apply concepts in Algebra and Calculus to unexpected contexts","Course Description: This course builds on the calculus and linear algebra in MATH1151. MATLAB is used throughout. The course is delivered through a series of lectures, classroom tutorials, and online lessons and spans topics in both linear algebra and calculus.In linear algebra, abstract vector spaces and linear transforms are introduced so that the study of vectors and matrices in MATH1151 can be applied to a wide range of applications. The concepts such as spans, linear independence, basis, dimension, kernel, image are studied in both abstract and concrete examples, with links made to data fitting and differential equations. Eigenvalues and eigenvectors are studied along with their applications to Markov chains and systems of differential equations. In calculus, further techniques of integration and the theory and applications of first and second order ordinary differential equations are studied, including existence and uniqueness results and numerical methods. Double integrals, including change of variables are introduced. Convergence results for sequences and series are developed along with Taylor polynomials in both one and two variables and their applications. Optimisation techniques, including classification of critical points and Lagrange multipliers are studied.
Course Aims: The aims of MATH1251, along with MATH1151, are to provide the mathematical tools needed for Actuarial Studies and related disciplines. Students who have completed this course will be able to recognise linear structures and apply techniques in linear algebra to analyse and solve problems of a linear nature. Students will be able to analyse systems governed by commonly occurring ordinary differential equations and apply techniques to solve these analytically and numerically. In addition, students will be able to solve multivariable optimisation problems and use Taylor series techniques to find approximations and derive theoretical results and develop the MATLAB skills needed to apply these mathematical techniques to computational problems.
Course Learning Outcomes: Apply definitions and theorems in Algebra and Calculus to justify mathematical statements and solve problems
Communicate mathematical ideas in written form using correct terminology and using technology
Use technology as an aid to solve appropriate problems in Algebra and Calculus
Apply concepts and techniques from Algebra and Calculus to solve problems
Identify and construct valid mathematical arguments
Apply concepts in Algebra and Calculus to unexpected contexts",Advanced calculus; Abstract linear algebra; MATLAB proficiency; Numerical methods,calculus; linear algebra; MATLAB; Numerical methods; Ordinary differential equations; optimization,Vector spaces and linear transformations; Eigenvalues and eigenvectors; Ordinary differential equations; Optimization techniques; Taylor polynomials,Integration techniques; Markov chains; Lagrange multipliers; Double integrals; Convergence of sequences and series,"This course applies mathematical tools and techniques in linear algebra and calculus to solve problems, analyze systems, and develop computational skills using MATLAB."
MATH2011,Several Variable Calculus,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2011&activityGroupId=1,"This course introduces students to differential, integral and vector calculus for functions of more than one variable. Topics covered in lectures and tutorials include functions of several variables, limits and continuity, differentiability, gradients, surfaces, maxima and minima, Taylor series, Lagrange multipliers, chain rules, inverse function theorem, Jacobian derivatives. Double and triple integrals, iterated integrals, Riemann sums, cylindrical and spherical coordinates, change of variables, centre of mass. Vector calculus, line integrals, parametrised surfaces, surface integrals, del, divergence and curl, Stokes’ theorem, Green’s theorem in the plane, applications to fluid dynamics and electrodynamics.","This course introduces the mathematics crucial to mechanics, dynamics, electromagnetism, fluid flow, financial modelling and many areas of pure and applied mathematics. The course combines and extends the ideas from one variable calculus and linear algebra to develop the calculus of functions in R^2 and R^3. The final topic is an introduction to Fourier series, which concerns the representation of functions of a single real variable by infinite trigonometric series. In this course, the connection between diagrams/visualization and symbols is particularly important. Understanding that relationship is one of the main aims of the course.","Use the methods of several variable calculus to calculate, manipulate and use the relevant mathematical objects that appear in typical problems
Solve maximum/minimum problems in several variables including those with constraints
Set up and calculate multiple integrals in standard and adapted coordinate systems, surface integrals and verify and apply vector integral theorems
Construct well-organized and clear solutions to multivariable calculus problems in written form, ensuring the logical flow of arguments and absence of ambiguities","Course Description: This course introduces students to differential, integral and vector calculus for functions of more than one variable. Topics covered in lectures and tutorials include functions of several variables, limits and continuity, differentiability, gradients, surfaces, maxima and minima, Taylor series, Lagrange multipliers, chain rules, inverse function theorem, Jacobian derivatives. Double and triple integrals, iterated integrals, Riemann sums, cylindrical and spherical coordinates, change of variables, centre of mass. Vector calculus, line integrals, parametrised surfaces, surface integrals, del, divergence and curl, Stokes’ theorem, Green’s theorem in the plane, applications to fluid dynamics and electrodynamics.
Course Aims: This course introduces the mathematics crucial to mechanics, dynamics, electromagnetism, fluid flow, financial modelling and many areas of pure and applied mathematics. The course combines and extends the ideas from one variable calculus and linear algebra to develop the calculus of functions in R^2 and R^3. The final topic is an introduction to Fourier series, which concerns the representation of functions of a single real variable by infinite trigonometric series. In this course, the connection between diagrams/visualization and symbols is particularly important. Understanding that relationship is one of the main aims of the course.
Course Learning Outcomes: Use the methods of several variable calculus to calculate, manipulate and use the relevant mathematical objects that appear in typical problems
Solve maximum/minimum problems in several variables including those with constraints
Set up and calculate multiple integrals in standard and adapted coordinate systems, surface integrals and verify and apply vector integral theorems
Construct well-organized and clear solutions to multivariable calculus problems in written form, ensuring the logical flow of arguments and absence of ambiguities",Multivariable calculus; Vector calculus; Fourier series; Mathematical modeling,Multivariable calculus; Vector calculus; Fourier series; Mathematical modeling,Functions of several variables; Double and triple integrals; Stokes’ and Green’s theorems; Taylor series and Lagrange multipliers,Differential and integral calculus in multiple dimensions; Applications to physics and engineering; Techniques in fluid dynamics and electrodynamics; Visualization of complex mathematical concepts,"This course develops mathematical objects for functions in R^2 and R^3 by introducing differential, integral, and vector calculus."
MATH2018,Engineering Mathematics 2D,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2018&activityGroupId=1,"This course allows students in Engineering programs to explore a range of concepts at the core of applied mathematics. Through a series of online lectures and problem-solving classes, students are shown various methodologies to solving practical example problems from these topics in their discipline.Topics include: partial differentiation and applications, vector algebra, double integrals, ordinary differential equations, introduction to vector field theory, extrema of functions of 2 variables, matrices and their applications, Laplace transforms, Fourier series, partial differential equations and their solution for selected physical problems.Note: Available only to students for whom it is specifically required as part of their program. MATH2018 is equivalent to MATH2019.","This course is designed to introduce students of Engineering to some mathematical tools and analytical reasoning that may be related to, and useful in, their future professions. The course features the mathematical foundations which some of the world's engineering advancements have rested on, or are related to. The course is not designed to be over-technical in terms of theoretical mathematics, rather it features a range of highly useful concepts that are at the core of applied mathematics.","Demonstrate mastery of mathematical techniques by constructing logical solutions to problems in engineering that require creative and critical thinking
Analyse and categorise problems from applied mathematics and engineering, break them into their constituent steps, and apply appropriate mathematical methods in multivariate calculus; differential equations; matrix theory; Laplace Transforms; and Fourier Series
Relate concepts and methods from applied mathematics and describe how these may be used in real-world problems drawn from various fields of engineering","Course Description: This course allows students in Engineering programs to explore a range of concepts at the core of applied mathematics. Through a series of online lectures and problem-solving classes, students are shown various methodologies to solving practical example problems from these topics in their discipline.Topics include: partial differentiation and applications, vector algebra, double integrals, ordinary differential equations, introduction to vector field theory, extrema of functions of 2 variables, matrices and their applications, Laplace transforms, Fourier series, partial differential equations and their solution for selected physical problems.Note: Available only to students for whom it is specifically required as part of their program. MATH2018 is equivalent to MATH2019.
Course Aims: This course is designed to introduce students of Engineering to some mathematical tools and analytical reasoning that may be related to, and useful in, their future professions. The course features the mathematical foundations which some of the world's engineering advancements have rested on, or are related to. The course is not designed to be over-technical in terms of theoretical mathematics, rather it features a range of highly useful concepts that are at the core of applied mathematics.
Course Learning Outcomes: Demonstrate mastery of mathematical techniques by constructing logical solutions to problems in engineering that require creative and critical thinking
Analyse and categorise problems from applied mathematics and engineering, break them into their constituent steps, and apply appropriate mathematical methods in multivariate calculus; differential equations; matrix theory; Laplace Transforms; and Fourier Series
Relate concepts and methods from applied mathematics and describe how these may be used in real-world problems drawn from various fields of engineering",Applied mathematics; Partial differentiation; Vector algebra; Matrix theory; Fourier series,Double integrals; Ordinary differential equations; Vector field theory; Laplace transforms; Partial differential equations,Double integrals; Ordinary differential equations; Vector field theory; Laplace transforms; Partial differential equations,Extrema of multivariable functions; Applications of matrices in engineering; Solution techniques for physical problems; Critical thinking in mathematical problem-solving,"This course teaches students to apply mathematical techniques to solve practical problems in their discipline, focusing on multivariate calculus, differential equations, and other topics."
MATH2019,Engineering Mathematics 2E,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2019&activityGroupId=1,"This subject allows students in Engineering programs to explore a range of concepts at the core of applied mathematics. Through a series of online lectures and problem-solving classes, students are shown various methodologies for solving practical example problems from these topics in their discipline.
Topics include: partial differentiation and applications, vector algebra, double integrals, ordinary differential equations, introduction to vector field theory, extrema of functions of 2 variables, matrices and their applications, Laplace transforms, Fourier series, partial differential equations and their solution for selected physical problems.
Note: Available only to students for whom it is specifically required as part of their program. MATH2019 is equivalent to MATH2018.","This course is designed to introduce students of Engineering to some mathematical tools and analytical reasoning that may be related to, and useful in, their future professions. The course features the mathematical foundations on which some of the world's engineering advancements have rested on, or are related to. The course is not designed to be over-technical in terms of theoretical mathematics, rather it features a range of highly useful concepts that are at the core of applied mathematics.","Demonstrate mastery of mathematical techniques by constructing logical solutions to problems in engineering that require creative and critical thinking
Analyse and categorise problems from applied mathematics and engineering, break them into their constituent steps, and apply appropriate mathematical methods in multivariate calculus; differential equations; matrix theory; Laplace Transforms; and Fourier Series
Relate concepts and methods from applied mathematics and describe how these may be used in real-world problems drawn from various fields of engineering","Course Description: This subject allows students in Engineering programs to explore a range of concepts at the core of applied mathematics. Through a series of online lectures and problem-solving classes, students are shown various methodologies for solving practical example problems from these topics in their discipline.
Topics include: partial differentiation and applications, vector algebra, double integrals, ordinary differential equations, introduction to vector field theory, extrema of functions of 2 variables, matrices and their applications, Laplace transforms, Fourier series, partial differential equations and their solution for selected physical problems.
Note: Available only to students for whom it is specifically required as part of their program. MATH2019 is equivalent to MATH2018.
Course Aims: This course is designed to introduce students of Engineering to some mathematical tools and analytical reasoning that may be related to, and useful in, their future professions. The course features the mathematical foundations on which some of the world's engineering advancements have rested on, or are related to. The course is not designed to be over-technical in terms of theoretical mathematics, rather it features a range of highly useful concepts that are at the core of applied mathematics.
Course Learning Outcomes: Demonstrate mastery of mathematical techniques by constructing logical solutions to problems in engineering that require creative and critical thinking
Analyse and categorise problems from applied mathematics and engineering, break them into their constituent steps, and apply appropriate mathematical methods in multivariate calculus; differential equations; matrix theory; Laplace Transforms; and Fourier Series
Relate concepts and methods from applied mathematics and describe how these may be used in real-world problems drawn from various fields of engineering",Applied mathematics; Critical thinking in engineering; Problem-solving with differential equations; Analytical reasoning,Partial differentiation; Vector algebra; Matrix applications; Laplace transforms; Fourier series,Partial differentiation; Vector algebra; Matrix applications; Laplace transforms; Fourier series,Double integrals; Ordinary differential equations; Vector field theory; Partial differential equations; Extrema of functions of two variables,"This course introduces students to essential mathematical tools and analytical reasoning, allowing them to construct logical solutions to engineering problems through creative and critical thinking."
MATH2089,Numerical Methods and Statistics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2089&activityGroupId=1,"This course gives an introduction to numerical methods and statistics essential in a wide range of engineering disciplines.
Numerical methods: Computing with real numbers. Numerical differentiation, integration, interpolation and curve fitting (regression analysis). Solution of linear and nonlinear algebraic equations. Matrix operations and applications to solution of systems of linear equations, elimination and tri-diagonal matrix algorithms. Introduction to numerical solution of ordinary and partial differential equations.
Statistics: Exploratory data analysis. Probability and distribution theory including the Binomial, Poisson and Normal distributions. Large sample theory including the Central Limit Theorem. Elements of statistical inference including estimation, confidence intervals and hypothesis testing. One-sample and two-sample t-tests. Simple linear regression and analysis of variance.
In each component, applications will be drawn from a variety of engineering disciplines. MATLAB or Python will be used as a practical tool for both numerical and statistical computations and to illustrate theoretical concepts that are introduced during lectures and tutorials.","The aim of this course is to develop core numerical and statistical skills needed for a career in engineering. You will develop skills in numerical and statistical methods for making decisions in engineering contexts, with an emphasis on computational tools for solving different types of equations (involving linear and non-linear terms, or derivatives) and tools for making sense of data. The course builds on your knowledge from foundational mathematics courses.","Apply various graphical and data analysis methods for summarizing and understanding data
Apply numerical techniques to find accurate and efficient solutions for models based on linear and nonlinear systems of equations, ordinary differential equations and partial differential equations
Identify risks associated with floating point computations
Apply various statistical models and methods for drawing conclusions and making decisions under uncertainty in engineering contexts
Use MATLAB or Python to apply numerical and statistical methods and for graphical analysis
Apply numerical techniques to practical problems in Engineering","Course Description: This course gives an introduction to numerical methods and statistics essential in a wide range of engineering disciplines.
Numerical methods: Computing with real numbers. Numerical differentiation, integration, interpolation and curve fitting (regression analysis). Solution of linear and nonlinear algebraic equations. Matrix operations and applications to solution of systems of linear equations, elimination and tri-diagonal matrix algorithms. Introduction to numerical solution of ordinary and partial differential equations.
Statistics: Exploratory data analysis. Probability and distribution theory including the Binomial, Poisson and Normal distributions. Large sample theory including the Central Limit Theorem. Elements of statistical inference including estimation, confidence intervals and hypothesis testing. One-sample and two-sample t-tests. Simple linear regression and analysis of variance.
In each component, applications will be drawn from a variety of engineering disciplines. MATLAB or Python will be used as a practical tool for both numerical and statistical computations and to illustrate theoretical concepts that are introduced during lectures and tutorials.
Course Aims: The aim of this course is to develop core numerical and statistical skills needed for a career in engineering. You will develop skills in numerical and statistical methods for making decisions in engineering contexts, with an emphasis on computational tools for solving different types of equations (involving linear and non-linear terms, or derivatives) and tools for making sense of data. The course builds on your knowledge from foundational mathematics courses.
Course Learning Outcomes: Apply various graphical and data analysis methods for summarizing and understanding data
Apply numerical techniques to find accurate and efficient solutions for models based on linear and nonlinear systems of equations, ordinary differential equations and partial differential equations
Identify risks associated with floating point computations
Apply various statistical models and methods for drawing conclusions and making decisions under uncertainty in engineering contexts
Use MATLAB or Python to apply numerical and statistical methods and for graphical analysis
Apply numerical techniques to practical problems in Engineering",Numerical methods; Statistical analysis; MATLAB/Python programming; Data interpretation and analysis,MATLAB; Python; data management and interpretation; Statistical analysis; data analysis; Statistical inference; Regression; probability theory; numerical methods,Numerical differentiation and integration; Matrix operations; Probability distributions; Statistical inference; Regression analysis,Solution of algebraic equations; Central Limit Theorem; Exploratory data analysis; Numerical solution of differential equations; Engineering applications of statistics,"This course teaches students how to apply numerical methods and statistics to solve real-world engineering problems, utilizing MATLAB or Python."
MATH2099,Mathematics 2B,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2099&activityGroupId=1,"Linear algebra is a key tool in mathematics and its applications. Topics includevector spaces, linear transformations, change of basis, inner products, orthogonalization, least squares approximation, QR factorization, determinants, eigenvalues and eigenvectors, diagonalization, Jordan forms, matrix exponentials and applications to systems of differential equations, other applications of linear algebra.
Probability and statistics provide tools to apply and interpret statistical methods in an Engineering context and to build foundations for future courses in their programs. Topics include descriptive statistics, random variables and special probability distributions such as Binomial, Poisson, Exponential and Normal, sampling distribution and the Central Limit Theorem, statistical inference for proportions and means including confidence intervals and hypothesis testing, statistical analysis in the simple linear regression model and analysis of variance.MATLAB will be used in the statistics part of the course as a tool for statistical computations and graphical and numerical illustration of theoretical concepts.
The course is delivered through a series of lectures and tutorials, where students can extend and refine their knowledge of the lecture material.","Statistics:
The primary objective of the statistics stream is to enable students to apply and interpret statistical methods in an Engineering context, and to build foundations for future courses in their UG degree programs.
Linear Algebra:
This course introduces the basic theory of linear algebra which is essential in all mathematics and in a wide range of engineering disciplines. This course will build on the substantial amount of linear algebra included in first year Mathematics courses. The aim of this strand is to provide a solid understanding of important topics in linear algebra, including vector spaces, linear transformations (with emphasis on geometric transformations such as projections, rotations and reflections) and their representation using matrices, Jordan forms, matrix exponentials and their applications. The strand is structured with a strong emphasis on problem-solving tasks in lectures, in tutorials, and in assessment tasks.","Apply concepts and techniques in Linear Algebra to solve appropriate problems
Understand  basic definitions and theorems in linear algebra and apply them to specific examples
Apply various statistical models and methods for drawing conclusions and making decisions under uncertainty in engineering contexts
Apply various graphical and numerical tools used in exploratory data analysis for summarising data","Course Description: Linear algebra is a key tool in mathematics and its applications. Topics includevector spaces, linear transformations, change of basis, inner products, orthogonalization, least squares approximation, QR factorization, determinants, eigenvalues and eigenvectors, diagonalization, Jordan forms, matrix exponentials and applications to systems of differential equations, other applications of linear algebra.
Probability and statistics provide tools to apply and interpret statistical methods in an Engineering context and to build foundations for future courses in their programs. Topics include descriptive statistics, random variables and special probability distributions such as Binomial, Poisson, Exponential and Normal, sampling distribution and the Central Limit Theorem, statistical inference for proportions and means including confidence intervals and hypothesis testing, statistical analysis in the simple linear regression model and analysis of variance.MATLAB will be used in the statistics part of the course as a tool for statistical computations and graphical and numerical illustration of theoretical concepts.
The course is delivered through a series of lectures and tutorials, where students can extend and refine their knowledge of the lecture material.
Course Aims: Statistics:
The primary objective of the statistics stream is to enable students to apply and interpret statistical methods in an Engineering context, and to build foundations for future courses in their UG degree programs.
Linear Algebra:
This course introduces the basic theory of linear algebra which is essential in all mathematics and in a wide range of engineering disciplines. This course will build on the substantial amount of linear algebra included in first year Mathematics courses. The aim of this strand is to provide a solid understanding of important topics in linear algebra, including vector spaces, linear transformations (with emphasis on geometric transformations such as projections, rotations and reflections) and their representation using matrices, Jordan forms, matrix exponentials and their applications. The strand is structured with a strong emphasis on problem-solving tasks in lectures, in tutorials, and in assessment tasks.
Course Learning Outcomes: Apply concepts and techniques in Linear Algebra to solve appropriate problems
Understand  basic definitions and theorems in linear algebra and apply them to specific examples
Apply various statistical models and methods for drawing conclusions and making decisions under uncertainty in engineering contexts
Apply various graphical and numerical tools used in exploratory data analysis for summarising data",Linear algebra applications; Statistical modeling; MATLAB programming; Data analysis,Linear algebra; Statistical modeling; MATLAB; Data analysis,Vector spaces; Eigenvalues and eigenvectors; Descriptive statistics; Probability distributions; Statistical inference,Linear transformations; Jordan forms; Matrix exponentials; Hypothesis testing; Regression analysis and ANOVA,"This course develops skills in applying concepts and techniques from Linear Algebra to solve problems, as well as understanding fundamental definitions and theorems."
MATH2111,Higher Several Variable Calculus,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2111&activityGroupId=1,"This is a core second-year higher mathematics course for students from all disciplines. The course extends the theory of one-variable calculus to functions or mappings with several variables. It forms the foundation for various courses in pure and applied mathematics, as well as in physics, economics and others. Topics covered include functions of several variables, limits and continuity, differentiability, gradients, surfaces, maxima and minima, Taylor series, Lagrange multipliers, chain rules, inverse function theorem, Jacobian derivatives, double and triple integrals, iterated integrals, Riemann sums, cylindrical and spherical coordinates, change of variables, centre of mass, curves in space, line integrals, parametrised surfaces, surface integrals, divergence and curl, Stokes' theorem, Green's theorem in the plane, applications of integral theorems, Fourier series, convergence of Fourier series, applications of Fourier series. The material will be covered in lectures, problem sheets will be discussed in tutorials.","The aim of this course is to deepen the understanding of the ideas and techniques of integral and differential calculus for functions of several variables. These ideas and techniques are crucial to mechanics, dynamics, electromagnetism, fluid flow and many other areas of pure and applied mathematics. The course combines and extends ideas from one variable calculus and linear algebra to establish the calculus of vector - valued functions: from differentiation through multiple integration to integration over curves and surfaces and the classical Stokes' and Divergence Theorems. The emphasis is on understanding fundamental concepts, developing spatial understanding and acquiring the ability to solve concrete problems.","Prove statements on the theory of several-variable calculus rigorously
Apply basic theory of several-variable calculus to solve problems
Perform computations for problems arising in higher dimensional calculus
Apply the central concepts of mathematical analysis and of classical applied mathematics to appropriate problems","Course Description: This is a core second-year higher mathematics course for students from all disciplines. The course extends the theory of one-variable calculus to functions or mappings with several variables. It forms the foundation for various courses in pure and applied mathematics, as well as in physics, economics and others. Topics covered include functions of several variables, limits and continuity, differentiability, gradients, surfaces, maxima and minima, Taylor series, Lagrange multipliers, chain rules, inverse function theorem, Jacobian derivatives, double and triple integrals, iterated integrals, Riemann sums, cylindrical and spherical coordinates, change of variables, centre of mass, curves in space, line integrals, parametrised surfaces, surface integrals, divergence and curl, Stokes' theorem, Green's theorem in the plane, applications of integral theorems, Fourier series, convergence of Fourier series, applications of Fourier series. The material will be covered in lectures, problem sheets will be discussed in tutorials.
Course Aims: The aim of this course is to deepen the understanding of the ideas and techniques of integral and differential calculus for functions of several variables. These ideas and techniques are crucial to mechanics, dynamics, electromagnetism, fluid flow and many other areas of pure and applied mathematics. The course combines and extends ideas from one variable calculus and linear algebra to establish the calculus of vector - valued functions: from differentiation through multiple integration to integration over curves and surfaces and the classical Stokes' and Divergence Theorems. The emphasis is on understanding fundamental concepts, developing spatial understanding and acquiring the ability to solve concrete problems.
Course Learning Outcomes: Prove statements on the theory of several-variable calculus rigorously
Apply basic theory of several-variable calculus to solve problems
Perform computations for problems arising in higher dimensional calculus
Apply the central concepts of mathematical analysis and of classical applied mathematics to appropriate problems",Multivariable calculus; Vector calculus; Fourier series; Mathematical modeling,Multivariable calculus; Vector calculus; Fourier series; Mathematical modeling,Functions of several variables; Double and triple integrals; Stokes’ and Green’s theorems; Taylor series and Lagrange multipliers,Differential and integral calculus in multiple dimensions; Applications to physics and engineering; Techniques in fluid dynamics and electrodynamics; Visualization of complex mathematical concepts,"This course develops the ideas and techniques of integral and differential calculus for functions of several variables, extending one-variable calculus and linear algebra."
MATH2121,Theory and Applications of Differential Equations,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2121&activityGroupId=1,"This course builds on elementary knowledge of differential equations (taught in MATH1231 at UNSW) to provide further theory and methods for solving ordinary differential equations and partial differential equations with illustrative applications in physics, engineering, and biology.
The specific topics for ordinary differential equations include: first order, linear second order, variation of parameters, dynamical systems, power series representations and Frobenius method, orthogonal functions and Fourier series, initial and boundary value problems, eigenfunction expansions, Bessel's equation.For partial differential equations, topics include: classification, method of separation of variables, application of Fourier series, heat equation, wave equation, Laplace's equation, applications of Bessel functions.
Tutorials are designed to reinforce the techniques taught in lectures for solving differential equations.","The overall aim of this course is to further develop students' skills in solving differential equations. This is done by learning how to approach solving second order ordinary differential equations with variable coefficients and giving an introduction to partial differential equations.
A major aim of this course is to teach students how to obtain information about the solution using power series methods and Frobenius' method in cases where the differential equations cannot be solved in terms of ""elementary"" functions such as polynomials, exponentials or trigonometric functions.
A second major aim is to learn how to find solutions to boundary value problems using Sturm-Liouville methods and Fourier series methods.","Recall and apply fundamental methods for solving ordinary differential equations, including power series and Frobenius’ methods
Solve systems of linear ordinary differential equations, classify equilibrium points, and sketch phase portraits
Solve partial differential equations using the method of separation of variables
Analyse functions, their periodic extension, odd and even extensions using Fourier Series methods","Course Description: This course builds on elementary knowledge of differential equations (taught in MATH1231 at UNSW) to provide further theory and methods for solving ordinary differential equations and partial differential equations with illustrative applications in physics, engineering, and biology.
The specific topics for ordinary differential equations include: first order, linear second order, variation of parameters, dynamical systems, power series representations and Frobenius method, orthogonal functions and Fourier series, initial and boundary value problems, eigenfunction expansions, Bessel's equation.For partial differential equations, topics include: classification, method of separation of variables, application of Fourier series, heat equation, wave equation, Laplace's equation, applications of Bessel functions.
Tutorials are designed to reinforce the techniques taught in lectures for solving differential equations.
Course Aims: The overall aim of this course is to further develop students' skills in solving differential equations. This is done by learning how to approach solving second order ordinary differential equations with variable coefficients and giving an introduction to partial differential equations.
A major aim of this course is to teach students how to obtain information about the solution using power series methods and Frobenius' method in cases where the differential equations cannot be solved in terms of ""elementary"" functions such as polynomials, exponentials or trigonometric functions.
A second major aim is to learn how to find solutions to boundary value problems using Sturm-Liouville methods and Fourier series methods.
Course Learning Outcomes: Recall and apply fundamental methods for solving ordinary differential equations, including power series and Frobenius’ methods
Solve systems of linear ordinary differential equations, classify equilibrium points, and sketch phase portraits
Solve partial differential equations using the method of separation of variables
Analyse functions, their periodic extension, odd and even extensions using Fourier Series methods",Differential equations; Power series methods; Fourier series; Phase portrait analysis,Power series methods; Fourier series; Phase portrait analysis; Ordinary differential equations; Partial differential equations; Bessel's equation; Heat and wave equations,Ordinary differential equations (ODEs); Partial differential equations (PDEs); Bessel's equation; Heat and wave equations,"Sturm-Liouville theory; Frobenius method; Boundary value problems; Applications in physics, engineering, and biology","This course develops students' skills in solving differential equations by applying various methods to ordinary and partial differential equations with applications in physics, engineering, and biology."
MATH2221,Higher Theory and Applications of Differential Equations,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2221&activityGroupId=1,"This course builds on students’ studies on first-order ordinary and second order ordinary differential equations with constant coefficients from their first-year mathematics courses. In this course, students explore second-order ordinary differential equations with variable coefficients and, in addition, are introduced to partial differential equations. An investigation of boundary value problems is conducted, and these problems are contrasted with the initial value problems. Not all differential equations can be solved in terms of known functions such as polynomials and exponentials and the like. At the completion of the course, students will understand how to get information about the solution in these cases using power series methods and the Frobenius method. They will also understand how to find solutions to boundary value problems in 1D using Sturm-Liouville methods and Fourier series methods, and find solutions to boundary value problems in 2D using Elliptic differential operators, Green identities, Elliptic eigenproblems and Wave and diffusion equations.This course is a prerequisite for the third year courses MATH3121 Mathematical Methods and Partial Differential Equations, MATH3120 Dynamical Systems and Chaos, and MATH3261 Fluids, Oceans and Climates.
All content of MATH2121 is common to MATH2221, but presented in greater depth, and with some additional topics. Instruction consists of four hours of lecture per week together with one hour of tutorial per week. Both lecture and tutorial instruction are delivered face-to-face.","The aim of this course is to build on students' previous study of ordinary differential equations (ODEs) as part of first-year calculus. The course is designed to deepen students' developing problem solving skills by broadening their exposure to range of differential equation and expand their repertoire of methods for interrogating and finding a solution to various differential equations. Although the focus of the course is on analytical methods of solution, a variety of applications that give rise to differential equation models are also discussed.","Apply the concept of linear superposition to solve a range of single and multidimensional boundary value problems
Apply a range of methods to find solutions to differential equations
Characterise a wide range of ordinary and partial differential equations and the solution methods appropriate to them
Determine whether solutions to a range of initial value problems and boundary value problems for differential equations exist and are unique","Course Description: This course builds on students’ studies on first-order ordinary and second order ordinary differential equations with constant coefficients from their first-year mathematics courses. In this course, students explore second-order ordinary differential equations with variable coefficients and, in addition, are introduced to partial differential equations. An investigation of boundary value problems is conducted, and these problems are contrasted with the initial value problems. Not all differential equations can be solved in terms of known functions such as polynomials and exponentials and the like. At the completion of the course, students will understand how to get information about the solution in these cases using power series methods and the Frobenius method. They will also understand how to find solutions to boundary value problems in 1D using Sturm-Liouville methods and Fourier series methods, and find solutions to boundary value problems in 2D using Elliptic differential operators, Green identities, Elliptic eigenproblems and Wave and diffusion equations.This course is a prerequisite for the third year courses MATH3121 Mathematical Methods and Partial Differential Equations, MATH3120 Dynamical Systems and Chaos, and MATH3261 Fluids, Oceans and Climates.
All content of MATH2121 is common to MATH2221, but presented in greater depth, and with some additional topics. Instruction consists of four hours of lecture per week together with one hour of tutorial per week. Both lecture and tutorial instruction are delivered face-to-face.
Course Aims: The aim of this course is to build on students' previous study of ordinary differential equations (ODEs) as part of first-year calculus. The course is designed to deepen students' developing problem solving skills by broadening their exposure to range of differential equation and expand their repertoire of methods for interrogating and finding a solution to various differential equations. Although the focus of the course is on analytical methods of solution, a variety of applications that give rise to differential equation models are also discussed.
Course Learning Outcomes: Apply the concept of linear superposition to solve a range of single and multidimensional boundary value problems
Apply a range of methods to find solutions to differential equations
Characterise a wide range of ordinary and partial differential equations and the solution methods appropriate to them
Determine whether solutions to a range of initial value problems and boundary value problems for differential equations exist and are unique",Advanced differential equation techniques; Analytical problem-solving; Application of boundary value solutions,Advanced differential equation techniques,Second-order ODEs with variable coefficients; Partial differential equations (PDEs); Sturm-Liouville theory; Fourier and Green's functions methods,Frobenius method for non-standard solutions; Elliptic differential operators; Applications in various scientific domains; Differential equation modeling in higher dimensions,"This course builds analytical skills by exploring second-order ODEs with variable coefficients, partial differential equations, and boundary value problems, using various solution methods."
MATH2241,Introduction to Atmosphere and Ocean Dynamics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2241&activityGroupId=1,"This course introduces students to mathematical models for the circulation of the atmosphere and oceans. The equations of motion are exploited to provide simplified models for phenomena including the effects of the Earth's rotation, large-scale balanced flows, waves and potential vorticity, and the energy balance in the climate system. Some fundamentals of geophysical fluid dynamics are developed first and then allied to the oceans, to the atmosphere, and to the role of both in the climate system.",The aim of this course is to introduce mathematical models that describe the circulation of the ocean and atmosphere. Students will gain a basic understanding of the physical processes and forcing mechanisms in the ocean and atmosphere. After successfully completing this course students will be able to identify the relevant physical approximations and mathematical techniques needed to model a range of commonly occurring geophysical flows. Students will also gain an understanding of the limitations involved in the modelling process as applied to atmosphere and ocean dynamics.,"Explain the key roles of the atmosphere and ocean in the global climate system
Apply key concepts of geophysical fluid dynamics to observed weather and climate phenomena in the atmosphere and ocean
Construct simple mathematical models, and to apply relevant simplifying physical approximations, for a range of commonly occurring geophysical flows
Interpret the predictions of simple mathematical models in terms of the corresponding geophysical phenomena","Course Description: This course introduces students to mathematical models for the circulation of the atmosphere and oceans. The equations of motion are exploited to provide simplified models for phenomena including the effects of the Earth's rotation, large-scale balanced flows, waves and potential vorticity, and the energy balance in the climate system. Some fundamentals of geophysical fluid dynamics are developed first and then allied to the oceans, to the atmosphere, and to the role of both in the climate system.
Course Aims: The aim of this course is to introduce mathematical models that describe the circulation of the ocean and atmosphere. Students will gain a basic understanding of the physical processes and forcing mechanisms in the ocean and atmosphere. After successfully completing this course students will be able to identify the relevant physical approximations and mathematical techniques needed to model a range of commonly occurring geophysical flows. Students will also gain an understanding of the limitations involved in the modelling process as applied to atmosphere and ocean dynamics.
Course Learning Outcomes: Explain the key roles of the atmosphere and ocean in the global climate system
Apply key concepts of geophysical fluid dynamics to observed weather and climate phenomena in the atmosphere and ocean
Construct simple mathematical models, and to apply relevant simplifying physical approximations, for a range of commonly occurring geophysical flows
Interpret the predictions of simple mathematical models in terms of the corresponding geophysical phenomena",Geophysical fluid dynamics; Mathematical modeling; Climate dynamics; Atmospheric and oceanic circulation,Geophysical fluid dynamics; Mathematical modeling; Climate dynamics; Atmospheric and oceanic circulation,Equations of motion for atmospheric and oceanic flows; Earth's rotation effects; Energy balance in climate systems; Potential vorticity and wave dynamics,Simplified models for large-scale phenomena; Application of physical approximations in environmental modeling; Interpretation of model predictions in real-world scenarios,"This course introduces students to mathematical models for atmospheric and oceanic circulation, applying key concepts of geophysical fluid dynamics to climate and weather phenomena."
MATH2301,Mathematical Computing,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2301&activityGroupId=1,"This is an introductory level course in computational mathematics for students from all disciplines. The course has both a laboratory and theoretical component. Topics covered include Introduction to Matlab and Python, floating point arithmetic, difference equations, nonlinear equations, numerical differentiation and integration, initial value problems. The course provides a foundation for mathematical modelling and simulation.",The aim of this course is to introduce to students from any discipline the use of computers and numerical methods for mathematical modeling and simulation that may be useful in their future professions. The course features some key computer algorithms used in computational mathematics.,"Use basic MATLAB or Python conventions and commands, including loops, conditional statements and functions
Solve problems involving floating point arithmetic and understand its problems
Use MATLAB to solve a variety of numerical problems such as interpolation, linear and non-linear equations, quadrature and solving ordinary differential equations
Collaborate effectively to solve mathematical computing problems","Course Description: This is an introductory level course in computational mathematics for students from all disciplines. The course has both a laboratory and theoretical component. Topics covered include Introduction to Matlab and Python, floating point arithmetic, difference equations, nonlinear equations, numerical differentiation and integration, initial value problems. The course provides a foundation for mathematical modelling and simulation.
Course Aims: The aim of this course is to introduce to students from any discipline the use of computers and numerical methods for mathematical modeling and simulation that may be useful in their future professions. The course features some key computer algorithms used in computational mathematics.
Course Learning Outcomes: Use basic MATLAB or Python conventions and commands, including loops, conditional statements and functions
Solve problems involving floating point arithmetic and understand its problems
Use MATLAB to solve a variety of numerical problems such as interpolation, linear and non-linear equations, quadrature and solving ordinary differential equations
Collaborate effectively to solve mathematical computing problems",Computational mathematics; Programming in MATLAB and Python; Numerical problem-solving,MATLAB; Python; Numerical methods,Numerical integration and differentiation; Floating point arithmetic; Solution of nonlinear equations; Initial value problems,Basic programming constructs and syntax in MATLAB/Python; Application of numerical methods in real-world scenarios; Understanding computational limitations and errors in calculations,"This course introduces students from all disciplines to computational mathematics, teaching computer algorithms for modeling and simulation through hands-on lab work."
MATH2400,Finite Mathematics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2400&activityGroupId=1,"This is an introduction to those areas of Mathematics which (amongst other things) underpin important areas of computing. The main topics are integer and modular arithmetic (including tests for primality of integers), polynomial algebra (including factorisation of polynomials and construction of new fields), and an introduction to cryptography and error-correcting codes. The course is delivered through a series of lectures and tutorials, along with weekly self-paced online lessons. All topics are taught from first principles, but due to the relatively fast pace of delivery, MATH1081 – Discrete Mathematics is recommended prior knowledge. The course provides a strong foundation for students intending to study higher-level mathematics or computer science, and is a core course for the Bachelor of Engineering (Honours) (Software) degree.
Since the introduction of digital computers, the renewed importance of discrete and thus finite theory in mathematics has become apparent. For this reason, MATH2400 – Finite Mathematics should prove useful to future Computer Scientists and Software Engineers while at the same time providing Mathematics students with an introduction to ideas in Number Theory, Finite Fields, Cryptography, and Algebraic Coding Theory. The related course MATH3411 – Information, Codes and Ciphers develops some of these ideas in greater depth.","The aim of this course is to provide students with a foundational knowledge of key areas in Finite Mathematics, introducing important concepts in Number Theory, Finite Fields, Cryptography, and Algebraic Coding Theory.","Solve problems in number theory involving divisibility, congruences, and finite fields
Apply finite field arithmetic in cryptography, coding, number theory, and theoretical computer science
Communicate mathematical ideas effectively and clearly in written form","Course Description: This is an introduction to those areas of Mathematics which (amongst other things) underpin important areas of computing. The main topics are integer and modular arithmetic (including tests for primality of integers), polynomial algebra (including factorisation of polynomials and construction of new fields), and an introduction to cryptography and error-correcting codes. The course is delivered through a series of lectures and tutorials, along with weekly self-paced online lessons. All topics are taught from first principles, but due to the relatively fast pace of delivery, MATH1081 – Discrete Mathematics is recommended prior knowledge. The course provides a strong foundation for students intending to study higher-level mathematics or computer science, and is a core course for the Bachelor of Engineering (Honours) (Software) degree.
Since the introduction of digital computers, the renewed importance of discrete and thus finite theory in mathematics has become apparent. For this reason, MATH2400 – Finite Mathematics should prove useful to future Computer Scientists and Software Engineers while at the same time providing Mathematics students with an introduction to ideas in Number Theory, Finite Fields, Cryptography, and Algebraic Coding Theory. The related course MATH3411 – Information, Codes and Ciphers develops some of these ideas in greater depth.
Course Aims: The aim of this course is to provide students with a foundational knowledge of key areas in Finite Mathematics, introducing important concepts in Number Theory, Finite Fields, Cryptography, and Algebraic Coding Theory.
Course Learning Outcomes: Solve problems in number theory involving divisibility, congruences, and finite fields
Apply finite field arithmetic in cryptography, coding, number theory, and theoretical computer science
Communicate mathematical ideas effectively and clearly in written form",Number theory; Finite field arithmetic; Cryptography; Polynomial algebra,Number theory; Finite field arithmetic; Cryptography; Polynomial algebra,Primality testing; Modular arithmetic; Error-correcting codes; Construction of new fields,Foundations of discrete mathematics; Applications in computing and engineering; Advanced mathematical concepts relevant to software development,"This course introduces key areas of Finite Mathematics, teaching important concepts in Number Theory, Finite Fields, Cryptography, and Algebraic Coding Theory."
MATH2501,Linear Algebra,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2501&activityGroupId=1,"Linear algebra is a critical tool in all mathematics and its applications. For example, the output of many electrical circuits depends linearly on the input (over moderate ranges of input), and successfully correcting the trajectory of a space probe involves repeatedly solving systems of linear equations in hundreds of variables. Linear methods are vital in ecological population models and in mathematics itself. Students have been introduced to systems of linear equations and matrices, vector spaces and linear transformations in first-year Mathematics courses without understanding all the subtleties involved.
MATH2501will review material from first year (MATH1231, MATH1241 or MATH1251) so that vector spaces and linear transformations become familiar friends rather than uneasy acquaintances. Students will learn about important geometric transformations: projections, rotations, and reflections. Students will see their applications, such as the least squares approximations, and will learn how to view many linear transformations as being made up of “stretches”; in various directions, the so-called diagonalisation process, and the more general Jordan form. The course will also introduce Jordan forms, which are used to calculate functions of matrices, such as the exponential of a matrix and hence to solve systems of linear differential equations.
The course is delivered through lectures and tutorials, which provide guidance and activities to help students refine and apply the knowledge gained in lectures.
Note: MATH2601 is the higher level version of this course, which is primarily but not exclusively intended for students aiming to complete honours in applied mathematics, pure mathematics, statistics or data science, and so aims to give students a deeper level of understanding of the course content.","This course aims to examine key ideas in linear algebra. The course will help students improve and develop their analytical thinking skills and their ability to communicate technical arguments clearly. Material on vector spaces and related topics that were introduced in MATH1231, MATH1241 or MATH1251 will be revised and understood in greater depth. We shall introduce more advanced work in this area including applications to geometry, data fitting and differential equations.","Describe the basic concepts and problems of finite dimensional linear algebra
Provide clear and logically written mathematical calculations and proofs
Apply the key ideas of linear algebra to geometry and differential equations","Course Description: Linear algebra is a critical tool in all mathematics and its applications. For example, the output of many electrical circuits depends linearly on the input (over moderate ranges of input), and successfully correcting the trajectory of a space probe involves repeatedly solving systems of linear equations in hundreds of variables. Linear methods are vital in ecological population models and in mathematics itself. Students have been introduced to systems of linear equations and matrices, vector spaces and linear transformations in first-year Mathematics courses without understanding all the subtleties involved.
MATH2501will review material from first year (MATH1231, MATH1241 or MATH1251) so that vector spaces and linear transformations become familiar friends rather than uneasy acquaintances. Students will learn about important geometric transformations: projections, rotations, and reflections. Students will see their applications, such as the least squares approximations, and will learn how to view many linear transformations as being made up of “stretches”; in various directions, the so-called diagonalisation process, and the more general Jordan form. The course will also introduce Jordan forms, which are used to calculate functions of matrices, such as the exponential of a matrix and hence to solve systems of linear differential equations.
The course is delivered through lectures and tutorials, which provide guidance and activities to help students refine and apply the knowledge gained in lectures.
Note: MATH2601 is the higher level version of this course, which is primarily but not exclusively intended for students aiming to complete honours in applied mathematics, pure mathematics, statistics or data science, and so aims to give students a deeper level of understanding of the course content.
Course Aims: This course aims to examine key ideas in linear algebra. The course will help students improve and develop their analytical thinking skills and their ability to communicate technical arguments clearly. Material on vector spaces and related topics that were introduced in MATH1231, MATH1241 or MATH1251 will be revised and understood in greater depth. We shall introduce more advanced work in this area including applications to geometry, data fitting and differential equations.
Course Learning Outcomes: Describe the basic concepts and problems of finite dimensional linear algebra
Provide clear and logically written mathematical calculations and proofs
Apply the key ideas of linear algebra to geometry and differential equations",Linear algebra techniques; Geometric transformations; Matrix operations; Analytical thinking,Linear algebra; Geometric transformations,Systems of linear equations; Vector spaces; Linear transformations; Diagonalisation and Jordan forms,"Application of linear algebra in various fields like ecology, electrical engineering, and mathematics; Advanced matrix functions and their uses in solving differential equations","This course explores key ideas in linear algebra, revising and deepening understanding of vector spaces and related topics while introducing applications to geometry, data fitting, and differential equations."
MATH2601,Higher Linear Algebra,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2601&activityGroupId=1,"The course begins with a revision and extension of material on vector spaces, linear transformations, basis and dimension from first year. It also covers inner products over both the real and complex fields, orthogonalization, reflections, QR factorizations and unitary, self-adjoint and normal transformations. It then turns to the study of eigenvalues and eigenvectors, diagonalization and Jordan forms and functions of matrices. The course also includes applications to linear systems of differential equations, quadratics and rotations as time permits. The course is primarily but not exclusively intended for students aiming to complete honours in applied mathematics, pure mathematics, statistics or data science, and so where content is in common with MATH2501, MATH2601, aims to give students a deeper level of understanding. The course consists of lectures and tutorials, where the latter may be run as active classrooms.","The principal aim of this subject is for students to develop a working knowledge of the central ideas of linear algebra: vector spaces, linear transformations, orthogonality, eigenvalues and eigenvectors, canonical forms and applications of these ideas in science and engineering. In particular, the course introduces students to one of the major themes of modern mathematics: classification of structures and objects. Using linear algebra as a model, we will look at techniques that allow us to tell when two apparently different objects can be treated as if they were the same. A secondary aim is to understand how certain calculations in linear algebra can be thought of as algorithms, that is, as fixed methods which will lead in finite time to solutions of whole classes of problems. Additionally, there will be a focus on writing clear mathematical proofs.","Provide clear and logically written mathematical calculations and proofs
Apply the key ideas of linear algebra to a range of theoretical and applied problems
Describe the structure and properties of finite dimensional vector spaces over the real, complex and simple finite fields","Course Description: The course begins with a revision and extension of material on vector spaces, linear transformations, basis and dimension from first year. It also covers inner products over both the real and complex fields, orthogonalization, reflections, QR factorizations and unitary, self-adjoint and normal transformations. It then turns to the study of eigenvalues and eigenvectors, diagonalization and Jordan forms and functions of matrices. The course also includes applications to linear systems of differential equations, quadratics and rotations as time permits. The course is primarily but not exclusively intended for students aiming to complete honours in applied mathematics, pure mathematics, statistics or data science, and so where content is in common with MATH2501, MATH2601, aims to give students a deeper level of understanding. The course consists of lectures and tutorials, where the latter may be run as active classrooms.
Course Aims: The principal aim of this subject is for students to develop a working knowledge of the central ideas of linear algebra: vector spaces, linear transformations, orthogonality, eigenvalues and eigenvectors, canonical forms and applications of these ideas in science and engineering. In particular, the course introduces students to one of the major themes of modern mathematics: classification of structures and objects. Using linear algebra as a model, we will look at techniques that allow us to tell when two apparently different objects can be treated as if they were the same. A secondary aim is to understand how certain calculations in linear algebra can be thought of as algorithms, that is, as fixed methods which will lead in finite time to solutions of whole classes of problems. Additionally, there will be a focus on writing clear mathematical proofs.
Course Learning Outcomes: Provide clear and logically written mathematical calculations and proofs
Apply the key ideas of linear algebra to a range of theoretical and applied problems
Describe the structure and properties of finite dimensional vector spaces over the real, complex and simple finite fields",Advanced linear algebra; Mathematical proof construction; Algorithmic thinking,linear algebra; algorithm analysis,Orthogonal and unitary transformations; Eigenvalues and eigenvectors; Canonical forms; Applications of linear algebra in differential equations and geometry,Deep understanding of vector spaces and linear transformations; Application of linear algebra to classify and analyze structures in mathematics and engineering; Algorithmic approaches to solving linear algebra problems,"This course develops a working knowledge of central linear algebra concepts, applying ideas to science and engineering through lectures and tutorials."
MATH2801,Theory of Statistics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2801&activityGroupId=1,"The course introduces theoretical concepts used in classical and modern statistics. MATH2801 is the entry-point for a statistics major and a prerequisite for most higher-level statistics courses. Topics covered include probability, random variables, standard distributions, bivariate distributions, transformations, central limit theorem, sampling distributions, point estimation, interval estimation, maximum likelihood estimation and hypothesis testing. Students will use the (free) statistics package R/RStudio. Lecture content will be delivered either in-person or online and will be recorded and made available online. Tutorials will be either in-person or online.
Note: The Assumed Knowledge is first year probability theory and integration. Probability theory revision notes will be made available online and some exercises will be revised briefly in the first tutorial. MATH2801 is compulsory for mathematics majors to ensure an introduction to statistics as a discipline for studying stochastic (random) systems, as opposed to the deterministic. MATH2901 (Higher Theory of Statistics) is a more theoretical/advanced version of MATH2801 which spends more time on proof and theoretical considerations.","The aim of this course is to introduce students to the theoretical underpinnings of statistics, essential knowledge for anyone considering a career in quantitative modelling or data analysis. Students will learn probability and distribution theory on which modern statistical practice is founded, and how to apply this theory to answer important practical questions raised in medical research, ecology, the media and more. In tutorials, students will learn to solve various challenging statistical problems, conduct data analysis and learn basic computer programming in the software R/RStudio.","Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply key methods of statistical inference in applied settings
Use key theoretical tools to explore the properties of random variables
Derive selected fundamental results in the theory of probability and random variables","Course Description: The course introduces theoretical concepts used in classical and modern statistics. MATH2801 is the entry-point for a statistics major and a prerequisite for most higher-level statistics courses. Topics covered include probability, random variables, standard distributions, bivariate distributions, transformations, central limit theorem, sampling distributions, point estimation, interval estimation, maximum likelihood estimation and hypothesis testing. Students will use the (free) statistics package R/RStudio. Lecture content will be delivered either in-person or online and will be recorded and made available online. Tutorials will be either in-person or online.
Note: The Assumed Knowledge is first year probability theory and integration. Probability theory revision notes will be made available online and some exercises will be revised briefly in the first tutorial. MATH2801 is compulsory for mathematics majors to ensure an introduction to statistics as a discipline for studying stochastic (random) systems, as opposed to the deterministic. MATH2901 (Higher Theory of Statistics) is a more theoretical/advanced version of MATH2801 which spends more time on proof and theoretical considerations.
Course Aims: The aim of this course is to introduce students to the theoretical underpinnings of statistics, essential knowledge for anyone considering a career in quantitative modelling or data analysis. Students will learn probability and distribution theory on which modern statistical practice is founded, and how to apply this theory to answer important practical questions raised in medical research, ecology, the media and more. In tutorials, students will learn to solve various challenging statistical problems, conduct data analysis and learn basic computer programming in the software R/RStudio.
Course Learning Outcomes: Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply key methods of statistical inference in applied settings
Use key theoretical tools to explore the properties of random variables
Derive selected fundamental results in the theory of probability and random variables",Statistical theory; Probability calculations; Data analysis; Programming in R/RStudio,Probability theory; Data analysis; R,Distribution theory; Point and interval estimation; Hypothesis testing; Central limit theorem,Application of statistical methods to real-world problems; Use of statistical software for simulations and data analysis; Theoretical foundations of probability and statistics,"This course introduces theoretical concepts used in classical and modern statistics, teaching students to apply probability rules, statistical inference, and computer programming in R/RStudio."
MATH2859,"Probability, Statistics and Information",School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2859&activityGroupId=1,"This course provide tools to apply and interpret statistical methods in an Engineering context and to build foundations for future courses. Topics include descriptive statistics, random variables and special probability distributions such as Binomial, Poisson, Exponential and Normal, sampling distribution and the Central Limit Theorem, statistical inference for proportions and means including confidence intervals and hypothesis testing, statistical analysis in the simple linear regression model and analysis of variance.MATLAB will be used as a tool for statistical computations and graphical and numerical illustration of theoretical concepts introduced during the lecture series, and applied during computing labs.","The primary objective of this course is to enable students to apply and interpret statistical methods in an Engineering context, and to build foundations for future courses in their undergraduate degree programs.","Apply various statistical models and methods for drawing conclusions and making decisions under uncertainty in engineering contexts
Use MATLAB for statistical analysis
Study real or simulated data by applying descriptive data analysis tools, make inferences about means and proportions, perform regression analysis and analysis of variance
Apply various graphical and numerical tools used in exploratory data analysis for summarising and understanding data","Course Description: This course provide tools to apply and interpret statistical methods in an Engineering context and to build foundations for future courses. Topics include descriptive statistics, random variables and special probability distributions such as Binomial, Poisson, Exponential and Normal, sampling distribution and the Central Limit Theorem, statistical inference for proportions and means including confidence intervals and hypothesis testing, statistical analysis in the simple linear regression model and analysis of variance.MATLAB will be used as a tool for statistical computations and graphical and numerical illustration of theoretical concepts introduced during the lecture series, and applied during computing labs.
Course Aims: The primary objective of this course is to enable students to apply and interpret statistical methods in an Engineering context, and to build foundations for future courses in their undergraduate degree programs.
Course Learning Outcomes: Apply various statistical models and methods for drawing conclusions and making decisions under uncertainty in engineering contexts
Use MATLAB for statistical analysis
Study real or simulated data by applying descriptive data analysis tools, make inferences about means and proportions, perform regression analysis and analysis of variance
Apply various graphical and numerical tools used in exploratory data analysis for summarising and understanding data",Statistical analysis; MATLAB programming; Interpretation of data in engineering contexts,Statistical analysis; MATLAB; data management and interpretation,"Descriptive statistics; Probability distributions (Binomial, Poisson, Exponential, Normal); Statistical inference; Regression analysis; Analysis of variance",Application of statistical methods to engineering problems; Use of MATLAB for statistical computations and data visualization; Understanding and applying basic and advanced statistical techniques in real-world engineering scenarios,This course teaches students to apply statistical methods and interpret results in an engineering context using MATLAB.
MATH2871,Data Management for Statistical Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH2871&activityGroupId=1,"This is an introductory level course in programming using the SAS (Statistical Analysis System) for second year students from the disciplines of Data Science, Statistics, and Commerce. The course has both lectures and a laboratory. The course covers the use of spreadsheet tool to organise and query statistical data, programming in an advanced statistical package for file management, data manipulation and cleaning; methods for data screening, cleaning, graphical displays and data analysis using a range of statistical procedures; creation of data analysis reports using modern statistical and graphical methods. The course is based around the SAS statistical analysis system and programming tools. Knowledge and skills developed will be generic and applicable to a range of modern statistical software tools.","The course, which is a collaborative venture of the School of Mathematics and Statistics and SAS, aims to provide a practical introduction to the management and analysis of data. Large data sets are found widely in business, finance, bioinformatics, government, intelligence, etc . Skills in querying, cleaning, managing, displaying and analysing data, which are widely sought, will be developed in this course.
The course will provide students with the opportunity to take the SAS certification in Base Programming. There is a fee to sit this SAS exam and will be stated later. SAS runs this certification via Pearson Vue online. After the course, SAS operates a work experience placement program. Please consult SAS webpage for further information.","Demonstrate knowledge of fundamental programming skills with SAS (Statistical Analysis System
Demonstrate introductory knowledge of Graphics: Bar charts, pie charts, scatterplots
Integrate datasets into SAS
Apply high level tools such as DO loops and arrays to write efficient programs
Demonstrate knowledge of manipulating, validating, cleaning, transforming, and restructuring data sets by producing summary reports","Course Description: This is an introductory level course in programming using the SAS (Statistical Analysis System) for second year students from the disciplines of Data Science, Statistics, and Commerce. The course has both lectures and a laboratory. The course covers the use of spreadsheet tool to organise and query statistical data, programming in an advanced statistical package for file management, data manipulation and cleaning; methods for data screening, cleaning, graphical displays and data analysis using a range of statistical procedures; creation of data analysis reports using modern statistical and graphical methods. The course is based around the SAS statistical analysis system and programming tools. Knowledge and skills developed will be generic and applicable to a range of modern statistical software tools.
Course Aims: The course, which is a collaborative venture of the School of Mathematics and Statistics and SAS, aims to provide a practical introduction to the management and analysis of data. Large data sets are found widely in business, finance, bioinformatics, government, intelligence, etc . Skills in querying, cleaning, managing, displaying and analysing data, which are widely sought, will be developed in this course.
The course will provide students with the opportunity to take the SAS certification in Base Programming. There is a fee to sit this SAS exam and will be stated later. SAS runs this certification via Pearson Vue online. After the course, SAS operates a work experience placement program. Please consult SAS webpage for further information.
Course Learning Outcomes: Demonstrate knowledge of fundamental programming skills with SAS (Statistical Analysis System
Demonstrate introductory knowledge of Graphics: Bar charts, pie charts, scatterplots
Integrate datasets into SAS
Apply high level tools such as DO loops and arrays to write efficient programs
Demonstrate knowledge of manipulating, validating, cleaning, transforming, and restructuring data sets by producing summary reports",SAS programming; Data management and cleaning; Statistical data analysis; Report generation,SAS; data management and interpretation; data cleaning; data analysis; statistical analysis,Data manipulation techniques; Graphical data representation; Advanced programming constructs in SAS; Data integration and transformation,"Practical skills in handling large datasets typical in commerce, bioinformatics, and government sectors; Preparation for SAS Base Programming certification; Application of SAS tools in diverse real-world scenarios","This course teaches students programming skills using the SAS system, covering data management, analysis, and reporting, with a focus on developing generic analytical skills."
MATH2901,Higher Theory of Statistics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH2901&activityGroupId=1,"This course is the entry point for a statistics major and a prerequisite for most higher-level statistics courses. Statistics has important connections with many branches of mathematics and offers an interesting career path for the mathematically minded. This course will introduce the basics of statistics from a mathematical perspective. Topics include random variables, univariate, and bivariate distributions, transformations of random variables, convergence of random variables, the sampling distribution and the Central Limit Theorem. Estimation and inference which include moment and likelihood estimation, interval estimation, and hypothesis testing are also covered. Students in MATH2901 will focus on proof and theoretical considerations, extension material and challenge questions. MATH2801 will focus more on the core material and developing key skills in mathematical statistics.","The aim of this course is to introduce the theoretical underpinnings of statistics, essential knowledge for anyone considering a career in quantitative modelling or data analysis. The course will introduce the basics of probability and distribution theory on which modern statistical practice is founded and will be taught how to apply it to answer important practical questions raised in medical research, ecology, the media and more.","Apply probability rules in a given setting to calculate key quantities
Derive a breadth of fundamental results in the theory of probability and random variables
Apply key methods of statistical inference in applied settings
Use R to perform statistical computations and simulations
Use key theoretical tools to explore the properties of random variables","Course Description: This course is the entry point for a statistics major and a prerequisite for most higher-level statistics courses. Statistics has important connections with many branches of mathematics and offers an interesting career path for the mathematically minded. This course will introduce the basics of statistics from a mathematical perspective. Topics include random variables, univariate, and bivariate distributions, transformations of random variables, convergence of random variables, the sampling distribution and the Central Limit Theorem. Estimation and inference which include moment and likelihood estimation, interval estimation, and hypothesis testing are also covered. Students in MATH2901 will focus on proof and theoretical considerations, extension material and challenge questions. MATH2801 will focus more on the core material and developing key skills in mathematical statistics.
Course Aims: The aim of this course is to introduce the theoretical underpinnings of statistics, essential knowledge for anyone considering a career in quantitative modelling or data analysis. The course will introduce the basics of probability and distribution theory on which modern statistical practice is founded and will be taught how to apply it to answer important practical questions raised in medical research, ecology, the media and more.
Course Learning Outcomes: Apply probability rules in a given setting to calculate key quantities
Derive a breadth of fundamental results in the theory of probability and random variables
Apply key methods of statistical inference in applied settings
Use R to perform statistical computations and simulations
Use key theoretical tools to explore the properties of random variables",Probability theory; Statistical inference; Mathematical statistics,Probability theory; Statistical inference,Random variables; Distribution theory; Estimation methods; Hypothesis testing,"Application of statistical principles to solve practical problems; Use of statistical software (R) for computations; Theoretical foundations of statistics and its implications in various fields such as medicine, ecology, and media","This course introduces the basics of statistics from a mathematical perspective, covering topics like probability, distributions, estimation, and inference."
MATH3101,Computational Mathematics for Science and Engineering,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH3101&activityGroupId=1,"Partial differential equations (PDEs) provide a natural mathematical description for many phenomena of interest in science and engineering. Such equations are often difficult or impossible to solve using purely analytical (pencil and paper) methods, especially for realistic industrial problems. This course introduces finite difference and finite element methods for elliptic and parabolic PDEs, and discusses key concepts such as stability, convergence and computational cost. Relevant techniques in numerical linear algebra are also discussed.
The course includes a substantial practical component dealing with the computer implementation of the algorithms used for solving partial differential equations. This component of the course is supported by a weekly computer lab. In addition, a weekly tutorial class provides exercises on the mathematical content covered in lectures.
The course is intended for students in mathematics programs, or students in science and engineering programs who have a strong mathematical background and an interest in computer modelling.
Note: Students must have prior experience with computer programming using Python, Matlab or Julia. For example, successful completion of an introductory programming course involving one of these three languages should be sufficient.",MATH3101 is designed to provide students with a solid mathematical foundation for employment or further study in a wide range of scientific and engineering fields that rely on numerical modeling based on partial differential equations. The practical component of the course provides students with the opportunity to develop their programming skills.,"Use an appropriate programming language to implement numerical methods for solving partial differential equations, and to visualise and interpret features of the solution
Solve a system of linear equations efficiently by exploiting sparsity and other matrix structures
Determine the stability properties of a few simple time integration schemes for parabolic PDEs
Derive the weak form of an elliptic boundary-value problem and hence formulate an appropriate finite element method to compute an approximate solution
Formulate a finite difference approximation to a partial differential equation
Employ Taylor expansions to estimate the local truncation error and the order of consistency of a finite difference scheme","Course Description: Partial differential equations (PDEs) provide a natural mathematical description for many phenomena of interest in science and engineering. Such equations are often difficult or impossible to solve using purely analytical (pencil and paper) methods, especially for realistic industrial problems. This course introduces finite difference and finite element methods for elliptic and parabolic PDEs, and discusses key concepts such as stability, convergence and computational cost. Relevant techniques in numerical linear algebra are also discussed.
The course includes a substantial practical component dealing with the computer implementation of the algorithms used for solving partial differential equations. This component of the course is supported by a weekly computer lab. In addition, a weekly tutorial class provides exercises on the mathematical content covered in lectures.
The course is intended for students in mathematics programs, or students in science and engineering programs who have a strong mathematical background and an interest in computer modelling.
Note: Students must have prior experience with computer programming using Python, Matlab or Julia. For example, successful completion of an introductory programming course involving one of these three languages should be sufficient.
Course Aims: MATH3101 is designed to provide students with a solid mathematical foundation for employment or further study in a wide range of scientific and engineering fields that rely on numerical modeling based on partial differential equations. The practical component of the course provides students with the opportunity to develop their programming skills.
Course Learning Outcomes: Use an appropriate programming language to implement numerical methods for solving partial differential equations, and to visualise and interpret features of the solution
Solve a system of linear equations efficiently by exploiting sparsity and other matrix structures
Determine the stability properties of a few simple time integration schemes for parabolic PDEs
Derive the weak form of an elliptic boundary-value problem and hence formulate an appropriate finite element method to compute an approximate solution
Formulate a finite difference approximation to a partial differential equation
Employ Taylor expansions to estimate the local truncation error and the order of consistency of a finite difference scheme",Numerical methods for PDEs; Programming for mathematical computations; Computational problem-solving,Numerical methods; Python; MATLAB; Julia,Finite difference methods; Finite element methods; Stability analysis; Computational efficiency; Numerical linear algebra,"Application of numerical techniques to solve complex partial differential equations in science and engineering; Implementation of algorithms in programming languages like Python, Matlab, or Julia; Understanding of theoretical aspects that underpin numerical methods","This course solves partial differential equations using numerical methods, including finite differences and elements, focusing on programming skills and mathematical foundations."
MATH3121,Mathematical Methods and Partial Differential Equations,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3121&activityGroupId=1,"This is an applied mathematics course that builds on MATH2120 Mathematical Methods for Differential Equations. The course will present ways of solving the (usually partial) differential equations that arise in physical, biological, and engineering applications. Many of the methods covered, such as Fourier Transforms, also have applications beyond the solution of differential equations.
The course begins by characterising different partial differential equations (PDEs), and exploring some methods of solution, such as similarity solutions and the method of characteristics. Integral transforms, including Fourier and Laplace transforms, are then investigated. These transforms are particularly useful for solving linear PDEs. Whilst complex contour integration is an intrinsic part of using these transforms, only brief references to complex variable methods will be made.
The success of integral transforms naturally leads to the discussion of Green’s function and integral forms of the solution of PDEs. The power of Green’s functions can be observed in their use as the inverses of differential operators on both infinite and bounded domains. Finally, we will explore techniques to examine the asymptotic behaviour of functions.
The course comprises of weekly lectures and tutorials.","This course aims to introduce you to a range of techniques and theory that will be useful in solving partial differential equations (PDEs). Such equations are of significance due to their use in modelling phenomena from science, engineering and technology.","Apply various techniques, transforms and mathematical methods to solve differential equations
Provide logical and coherent derivations of results
Communicate mathematics effectively in written form","Course Description: This is an applied mathematics course that builds on MATH2120 Mathematical Methods for Differential Equations. The course will present ways of solving the (usually partial) differential equations that arise in physical, biological, and engineering applications. Many of the methods covered, such as Fourier Transforms, also have applications beyond the solution of differential equations.
The course begins by characterising different partial differential equations (PDEs), and exploring some methods of solution, such as similarity solutions and the method of characteristics. Integral transforms, including Fourier and Laplace transforms, are then investigated. These transforms are particularly useful for solving linear PDEs. Whilst complex contour integration is an intrinsic part of using these transforms, only brief references to complex variable methods will be made.
The success of integral transforms naturally leads to the discussion of Green’s function and integral forms of the solution of PDEs. The power of Green’s functions can be observed in their use as the inverses of differential operators on both infinite and bounded domains. Finally, we will explore techniques to examine the asymptotic behaviour of functions.
The course comprises of weekly lectures and tutorials.
Course Aims: This course aims to introduce you to a range of techniques and theory that will be useful in solving partial differential equations (PDEs). Such equations are of significance due to their use in modelling phenomena from science, engineering and technology.
Course Learning Outcomes: Apply various techniques, transforms and mathematical methods to solve differential equations
Provide logical and coherent derivations of results
Communicate mathematics effectively in written form",Applied mathematics; Differential equations; Integral transforms,Laplace transforms;  Partial differential equations; Fourier series; Asymptotic analysis,Partial differential equations (PDEs); Fourier and Laplace transforms; Green’s functions; Asymptotic analysis,"Techniques for solving complex differential equations in various fields such as physics, biology, and engineering; Utilization of mathematical methods for modeling and problem-solving in real-world applications",This course applies various mathematical methods to solve partial differential equations.
MATH3161,Optimization,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3161&activityGroupId=1,"This is an advanced level course in optimization for undergraduate students from all disciplines. Optimization is a field that develops techniques for finding the best possible choice from numerous available alternatives for a given criterion. It provides mathematical methods and numerical algorithms for solving decision-making problems in industry, commerce and scientific disciplines. Optimization methods are likely to have significant impact in many application areas of optimization, such as inventory management, energy distribution and medical treatment planning, by improving inventory controls or reducing the distribution costs or increasing the efficacy of medical treatments. Topics covered in this course include optimization modelling; convexity of sets and functions; unconstrained and constrained optimization problems; optimality and duality principles; numerical methods such as Newton, conjugate gradient and penalty methods; optimal control problems; differential equations; the Pontryagin Maximum Principle; autonomous control problems with fixed and free targets. This is a mathematics course using linear algebra, multi-variable calculus and differential equation techniques.","The main aim of this course is to provide the mathematical theory of multi-variable optimization and optimal control, and to provide students with the skills to formulate, solve and analyze solutions to certain multi-variable optimization problems and infinite dimensional optimal control problems.","Use technology as an aid to solve optimization models and communicate mathematical outcomes
Recognize and create valid optimization models and apply correct mathematical techniques
Apply the concepts and techniques of matrix algebra and multi-variable calculus to solve mathematical optimization problems
State definitions and theorems in the syllabus and apply them to specific examples
Formulate, solve and analyze solutions to certain optimization problems","Course Description: This is an advanced level course in optimization for undergraduate students from all disciplines. Optimization is a field that develops techniques for finding the best possible choice from numerous available alternatives for a given criterion. It provides mathematical methods and numerical algorithms for solving decision-making problems in industry, commerce and scientific disciplines. Optimization methods are likely to have significant impact in many application areas of optimization, such as inventory management, energy distribution and medical treatment planning, by improving inventory controls or reducing the distribution costs or increasing the efficacy of medical treatments. Topics covered in this course include optimization modelling; convexity of sets and functions; unconstrained and constrained optimization problems; optimality and duality principles; numerical methods such as Newton, conjugate gradient and penalty methods; optimal control problems; differential equations; the Pontryagin Maximum Principle; autonomous control problems with fixed and free targets. This is a mathematics course using linear algebra, multi-variable calculus and differential equation techniques.
Course Aims: The main aim of this course is to provide the mathematical theory of multi-variable optimization and optimal control, and to provide students with the skills to formulate, solve and analyze solutions to certain multi-variable optimization problems and infinite dimensional optimal control problems.
Course Learning Outcomes: Use technology as an aid to solve optimization models and communicate mathematical outcomes
Recognize and create valid optimization models and apply correct mathematical techniques
Apply the concepts and techniques of matrix algebra and multi-variable calculus to solve mathematical optimization problems
State definitions and theorems in the syllabus and apply them to specific examples
Formulate, solve and analyze solutions to certain optimization problems",Mathematical optimization; Numerical methods; Optimal control,optimization; Numerical methods,Convexity and optimization modeling; Unconstrained and constrained optimization; Numerical optimization algorithms; Optimal control and the Pontryagin Maximum Principle,mathematical theory of optimization; techniques in linear algebra; principles of differential equations; solution analysis of optimization problems,This course applies mathematical methods and algorithms for solving decision-making problems by finding optimal choices from various alternatives.
MATH3311,Computational Mathematics for Finance,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH3311&activityGroupId=1,"Finance is concerned with making definite numerical recommendations that frequently can only be obtained by analysing sophisticated models using high-speed computers. This course studies the design, implementation and use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It includes a review of MATLAB/Python, floating point numbers, rounding error and computational complexity, and a selection of topics from: approximation and parameter estimation, Fourier series and the FFT, finite difference approximations, partial differential equations (Black-Scholes PDE), sparse linear systems, nonlinear algebraic equations, trees, Monte Carlo methods and simulation, random numbers and variance reduction, numerical integration. The teaching activities include weekly lectures in which the theoretical background is explained and weekly practical computing laboratory classes.","This course aims to teach the use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It provides students with essential tools needed to obtain numerical solutions for a variety of financial models.","Apply the underlying mathematics, computational techniques and problem-solving skills relevant for problems in financial mathematics
Determine confidence in a computed answer and the risks associated with a given computational problem
Apply quantitative skills and mathematical reasoning to solve problems relevant to finance, insurance and risk management
Select appropriate computational techniques to analyse financial data and interpret the answers within a financial problem","Course Description: Finance is concerned with making definite numerical recommendations that frequently can only be obtained by analysing sophisticated models using high-speed computers. This course studies the design, implementation and use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It includes a review of MATLAB/Python, floating point numbers, rounding error and computational complexity, and a selection of topics from: approximation and parameter estimation, Fourier series and the FFT, finite difference approximations, partial differential equations (Black-Scholes PDE), sparse linear systems, nonlinear algebraic equations, trees, Monte Carlo methods and simulation, random numbers and variance reduction, numerical integration. The teaching activities include weekly lectures in which the theoretical background is explained and weekly practical computing laboratory classes.
Course Aims: This course aims to teach the use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It provides students with essential tools needed to obtain numerical solutions for a variety of financial models.
Course Learning Outcomes: Apply the underlying mathematics, computational techniques and problem-solving skills relevant for problems in financial mathematics
Determine confidence in a computed answer and the risks associated with a given computational problem
Apply quantitative skills and mathematical reasoning to solve problems relevant to finance, insurance and risk management
Select appropriate computational techniques to analyse financial data and interpret the answers within a financial problem",Computational finance; Numerical methods; Programming in MATLAB/Python,Numerical methods; MATLAB; Python; Financial modeling; algorithm analysis,"Financial modeling; Error analysis and computational complexity; Numerical techniques in finance (e.g., Fourier series, Monte Carlo methods)",computational complexity understanding; numerical integration; variance reduction techniques; sparse linear systems management,"This course teaches students how to apply computer programs to solve practical mathematical problems in finance, insurance, and risk management by using mathematical reasoning and computational techniques."
MATH3371,Numerical Linear Algebra,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3371&activityGroupId=1,"The course is intended for students from Science and Engineering programs with interests in mathematics, statistics, data science or numerical simulation.Algorithms from numerical linear algebra are ubiquitous in scientific and statistical software. The theoretical component of the course aims to impart an understanding of how these algorithms work as well as an appreciation of their potential limitations. To illustrate the applications of numerical linear algebra, a variety of examples from statistics, data science and applied mathematics are described. The course includes a substantial computing component providing practical experience with widely used software libraries.",The primary aim of the course is to introduce the fundamental algorithms used to solve the three key problems in linear algebra: solving a square system of linear equations; finding the least-squares solution to an overdetermined linear system; and computing the eigenvalues and eigenfunctions of a square matrix. A recurring theme is that the computational cost of a solution can often be greatly reduced by exploiting any special structure present in a matrix. The course also discusses a few of the wide range of applications of numerical linear algebra.,"Identify matrix properties that can compromise the accuracy and reliability of numerical computations
Use a suitable programming language to solve common problems in linear algebra via calls to numerical library functions
Identify relevant structure in a matrix and choose a specialised algorithm that exploits this structure for improved efficiency
Estimate how the computational cost of an algorithm scales with the problem size for common problems in linear algebra
Describe the role of numerical linear algebra in a variety of scientific and statistical applications
Identify when to consider an iterative method in preference to a direct method for solving a problem in linear algebra
Use standard matrix factorisations to construct solution procedures in numerical linear algebra","Course Description: The course is intended for students from Science and Engineering programs with interests in mathematics, statistics, data science or numerical simulation.Algorithms from numerical linear algebra are ubiquitous in scientific and statistical software. The theoretical component of the course aims to impart an understanding of how these algorithms work as well as an appreciation of their potential limitations. To illustrate the applications of numerical linear algebra, a variety of examples from statistics, data science and applied mathematics are described. The course includes a substantial computing component providing practical experience with widely used software libraries.
Course Aims: The primary aim of the course is to introduce the fundamental algorithms used to solve the three key problems in linear algebra: solving a square system of linear equations; finding the least-squares solution to an overdetermined linear system; and computing the eigenvalues and eigenfunctions of a square matrix. A recurring theme is that the computational cost of a solution can often be greatly reduced by exploiting any special structure present in a matrix. The course also discusses a few of the wide range of applications of numerical linear algebra.
Course Learning Outcomes: Identify matrix properties that can compromise the accuracy and reliability of numerical computations
Use a suitable programming language to solve common problems in linear algebra via calls to numerical library functions
Identify relevant structure in a matrix and choose a specialised algorithm that exploits this structure for improved efficiency
Estimate how the computational cost of an algorithm scales with the problem size for common problems in linear algebra
Describe the role of numerical linear algebra in a variety of scientific and statistical applications
Identify when to consider an iterative method in preference to a direct method for solving a problem in linear algebra
Use standard matrix factorisations to construct solution procedures in numerical linear algebra",Numerical linear algebra; Computational problem-solving; Programming for mathematical computations,linear algebra; Python; MATLAB,Matrix operations and properties; Algorithms for solving linear systems; Eigenvalue computations; Numerical stability and efficiency,algorithmic efficiency and scalability; matrix structure exploitation; error analysis in numerical computations; applications of numerical linear algebra in science and statistics,"This course applies fundamental algorithms from numerical linear algebra to solve problems, exploit structure, and optimize efficiency in scientific and statistical applications."
MATH3431,Number Theory,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3431&activityGroupId=1,"The course will cover some basic notions and techniques of number theory. The focus will be on such topics as divisibility, prime numbers, the arithmetic of residues rings, additive properties of integers and their powers and Diophantine approximations. Some applications of number theory to cryptography will be discussed as well. Students taking this course will develop an appreciation of the basic problems of number theory and will learn the interplay between number-theoretic problems and other areas of mathematics.

The ability to provide logical and coherent proofs of number-theoretic results, and the ability to solve concrete number-theoretic problems will be paramount. It is planned that it will be suitable for students in both ordinary and advanced programs.

It is recommended to take it together with MATH3711, which will provide students with very useful complementing knowledge and skills.",,"State and explain fundamental mathematical principles behind the main number theoretic techniques
Apply standard number theoretic techniques to a broad range of number theoretic problems
Communicate effectively in a written form
Demonstrate broad and advanced disciplinary knowledge and skills in number theory","Course Description: The course will cover some basic notions and techniques of number theory. The focus will be on such topics as divisibility, prime numbers, the arithmetic of residues rings, additive properties of integers and their powers and Diophantine approximations. Some applications of number theory to cryptography will be discussed as well. Students taking this course will develop an appreciation of the basic problems of number theory and will learn the interplay between number-theoretic problems and other areas of mathematics.

The ability to provide logical and coherent proofs of number-theoretic results, and the ability to solve concrete number-theoretic problems will be paramount. It is planned that it will be suitable for students in both ordinary and advanced programs.

It is recommended to take it together with MATH3711, which will provide students with very useful complementing knowledge and skills. Course Learning Outcomes: State and explain fundamental mathematical principles behind the main number theoretic techniques
Apply standard number theoretic techniques to a broad range of number theoretic problems
Communicate effectively in a written form
Demonstrate broad and advanced disciplinary knowledge and skills in number theory",Number theory; Problem-solving; Mathematical proof writing,"Number theory; rigorous reasoning and proof techniques; cryptography
",Divisibility and prime numbers; Arithmetic of residue rings; Diophantine approximations; Applications in cryptography,"Understanding and application of number theory concepts to solve real-world problems, particularly in cryptography; Ability to provide logical and coherent proofs and solutions in number theory.","This course explores basic notions and techniques of number theory, developing logical proofs and problem-solving abilities, with applications to cryptography."
MATH3560,History of Mathematics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3560&activityGroupId=1,"This course brings mathematics to life as a human endeavour, influenced by the people and circumstances surrounding its discovery. This course is focused on the original motivations and reflective processes behind the familiar mathematical concepts taught in high school and University. Through study of the past, students will experience mathematics as a living and evolving subject.
By the end of this course students will have a better understanding of how mathematics evolved into its present form, which is useful for researchers and teachers alike.",The course aims to introduce the student to important themes of mathematics from a historical perspective across a wide range of cultures. It will aim to look carefully at ancient mathematics and how the subject has developed over time. The course also aims to augment and enhance material that students have already taken or are studying in other mathematics courses. We aim to provide a unifying historical framework for these areas and give insight into the mathematicians who created these subjects.There will be a strong focus on clear communication and writing in expressing ideas.,"Present and communicate mathematical and historical ideas in writing
Explain how mathematics is influenced by the circumstances in which it was originally discovered, and how this can enhance the teaching of modern mathematics
Describe the historical motivations behind key strands of mathematics, including geometry, algebra, astronomy and calculus","Course Description: This course brings mathematics to life as a human endeavour, influenced by the people and circumstances surrounding its discovery. This course is focused on the original motivations and reflective processes behind the familiar mathematical concepts taught in high school and University. Through study of the past, students will experience mathematics as a living and evolving subject.
By the end of this course students will have a better understanding of how mathematics evolved into its present form, which is useful for researchers and teachers alike.
Course Aims: The course aims to introduce the student to important themes of mathematics from a historical perspective across a wide range of cultures. It will aim to look carefully at ancient mathematics and how the subject has developed over time. The course also aims to augment and enhance material that students have already taken or are studying in other mathematics courses. We aim to provide a unifying historical framework for these areas and give insight into the mathematicians who created these subjects.There will be a strong focus on clear communication and writing in expressing ideas.
Course Learning Outcomes: Present and communicate mathematical and historical ideas in writing
Explain how mathematics is influenced by the circumstances in which it was originally discovered, and how this can enhance the teaching of modern mathematics
Describe the historical motivations behind key strands of mathematics, including geometry, algebra, astronomy and calculus",Historical analysis; Communication; Critical thinking,Mathematics history,History of mathematics; Evolution of mathematical concepts; Contributions of diverse cultures to mathematics,Understanding the development of mathematics through history and its contextual influences; Enhancing the ability to teach and communicate mathematical concepts with a historical perspective.,"This course explores the history of mathematics, examining original motivations and influences behind familiar concepts to provide a unifying framework for understanding mathematical ideas."
MATH3570,Foundations of Calculus,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3570&activityGroupId=1,"What does it mean for a limit to exist? What does it mean for a function to be continuous or differentiable? There are functions which are continuous everywhere but differentiable nowhere! Are there functions whose integral does not exist? In this course, we look again at the essential concepts of limit, continuity, differentiability and integrability and try to place them on a sure footing. The syllabus includes material on sequences and series of real numbers and also of real valued functions. Although of general interest to those studying mathematics for its own sake, this course is of special relevance to those planning a career in secondary teaching.
MATH3570 is a compulsory component of the program for mathematics teachers.","The aim of this course is to re-examine the key ideas behind Calculus to give a deeper understanding of the notions of real numbers, sequences, limits, continuity, differentiability and integrability. We will look at not only what is true, but also what is not true, in order to better understand why definitions are the way that they are, and why the conditions on the main theorems in the course need to be there. This will equip these future Mathematics teachers with the confidence and ability to adopt a rich, understanding-based teaching style rather than a procedural one.","Apply the definitions and theorems on the real number system, sequences, limits and continuous functions so as to justify mathematical statements and solve problems on these topics
Communicate mathematical ideas in written form using rigorous and logical statements, correct terminology and using technology
Synthesize, compare, connect and evaluate relevant fundamental mathematical concepts required to teach calculus to mathematics students
Apply the definitions and theorems on the formal structure of differential and integral calculus to justify mathematical statements and solve problems on these topics","Course Description: What does it mean for a limit to exist? What does it mean for a function to be continuous or differentiable? There are functions which are continuous everywhere but differentiable nowhere! Are there functions whose integral does not exist? In this course, we look again at the essential concepts of limit, continuity, differentiability and integrability and try to place them on a sure footing. The syllabus includes material on sequences and series of real numbers and also of real valued functions. Although of general interest to those studying mathematics for its own sake, this course is of special relevance to those planning a career in secondary teaching.
MATH3570 is a compulsory component of the program for mathematics teachers.
Course Aims: The aim of this course is to re-examine the key ideas behind Calculus to give a deeper understanding of the notions of real numbers, sequences, limits, continuity, differentiability and integrability. We will look at not only what is true, but also what is not true, in order to better understand why definitions are the way that they are, and why the conditions on the main theorems in the course need to be there. This will equip these future Mathematics teachers with the confidence and ability to adopt a rich, understanding-based teaching style rather than a procedural one.
Course Learning Outcomes: Apply the definitions and theorems on the real number system, sequences, limits and continuous functions so as to justify mathematical statements and solve problems on these topics
Communicate mathematical ideas in written form using rigorous and logical statements, correct terminology and using technology
Synthesize, compare, connect and evaluate relevant fundamental mathematical concepts required to teach calculus to mathematics students
Apply the definitions and theorems on the formal structure of differential and integral calculus to justify mathematical statements and solve problems on these topics",Advanced calculus concepts; Mathematical communication; Critical thinking and analysis,Calculus; real analysis,Real numbers; Sequences and series; Limits; Continuity; Differentiability; Integrability,In-depth understanding of foundational calculus concepts; enhanced ability to teach these concepts effectively; the ability to critically analyze and justify mathematical arguments and definitions.,"This course re-examines the foundations of Calculus, exploring key ideas like limits, continuity, differentiability, and integrability to deepen understanding."
MATH3611,Higher Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH3611&activityGroupId=1,"This is a third-year course aimed at students completing a mathematics major or program. It is assumed that students are familiar with single and several variable calculus as taught in first and second-year mathematics courses.
The central concepts of calculus are limits and continuity. These concepts can be extended to quite general situations. The simplest of these is when there is some way of measuring the distance between two objects. Some of the most important examples of these “metric spaces” occur as sets of functions, so this course looks at ways in which one might say that a sequence of functions converges. Taking these ideas one step further, we look at convergence which does not come from a generalised distance function. These are the ideas of point set topology. The course includes topics such as countability, continuity, uniform convergence and compactness, as well as normed vector spaces, which are the central object of study in functional analysis.
This is not a computational course; throughout the emphasis will be on ideas, concepts, and proofs rather than calculations and formulas.
The course consists of 4 hours of lectures per week and 1 hour of tutorial.","The aim of this course is to introduce the foundations of real analysis, which is a central pillar of modern mathematics. Using concrete analytic examples as motivation, the course will first develop the theory of metric spaces, which form a framework for generalising the notion of distance between points. The course will then take a further step toward abstraction and study topological spaces, which generalise the notion of closeness and convergence.","Apply abstract mathematical theory to concrete problems
Construct rigorous mathematical proofs and use them to solve problems
Describe and apply definitions, theorems, and concepts of basic mathematical analysis, including the theory of metric, topological, and Banach spaces to basic problems
Communicate mathematical reasoning effectively in writing","Course Description: This is a third-year course aimed at students completing a mathematics major or program. It is assumed that students are familiar with single and several variable calculus as taught in first and second-year mathematics courses.
The central concepts of calculus are limits and continuity. These concepts can be extended to quite general situations. The simplest of these is when there is some way of measuring the distance between two objects. Some of the most important examples of these “metric spaces” occur as sets of functions, so this course looks at ways in which one might say that a sequence of functions converges. Taking these ideas one step further, we look at convergence which does not come from a generalised distance function. These are the ideas of point set topology. The course includes topics such as countability, continuity, uniform convergence and compactness, as well as normed vector spaces, which are the central object of study in functional analysis.
This is not a computational course; throughout the emphasis will be on ideas, concepts, and proofs rather than calculations and formulas.
The course consists of 4 hours of lectures per week and 1 hour of tutorial.
Course Aims: The aim of this course is to introduce the foundations of real analysis, which is a central pillar of modern mathematics. Using concrete analytic examples as motivation, the course will first develop the theory of metric spaces, which form a framework for generalising the notion of distance between points. The course will then take a further step toward abstraction and study topological spaces, which generalise the notion of closeness and convergence.
Course Learning Outcomes: Apply abstract mathematical theory to concrete problems
Construct rigorous mathematical proofs and use them to solve problems
Describe and apply definitions, theorems, and concepts of basic mathematical analysis, including the theory of metric, topological, and Banach spaces to basic problems
Communicate mathematical reasoning effectively in writing",Real analysis; Abstract mathematical theory; Proof construction,Real analysis; rigorous reasoning and proof techniques,Metric spaces; Topological spaces; Normed vector spaces; Functional analysis,Advanced calculus and analysis concepts; ability to apply abstract mathematical theories to practical problems; skilled at communicating complex mathematical ideas.,This course applies abstract mathematical theories to concrete problems through rigorous proof construction and effective communication.
MATH3711,Higher Algebra,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3711&activityGroupId=1,"In Higher Algebra we examine some of the basic notions of modern algebra that arose in the late 19th and early 20th century. The most fundamental notion is that of a group, which is how mathematicians study symmetry. In this course groups are studied in detail both from an abstract point of view and also to study symmetry in geometry. The other important concept studied is that of a ring. The algebra of adding and multiplying matrices has many similarities with the algebra of numbers. The notion of rings generalises both these two examples. The course examines factorisation theory for certain rings.
This course is one of the three core third year higher pure mathematics courses and is a pre-requisite for pure mathematics students progressing to Honours. In particular, it introduces the axiomatic language and framework that underpins modern mathematics. The delivery will primarily be through lectures with some problem solving tutorials.","The aim of this course is to introduce students to the language and basic concepts of modern algebra. The course includes foundational material essential for all further studies in pure mathematics. Proofs will feature heavily in both classes and assessments, so another aim will be to develop the skill of writing sound mathematical proofs.","Describe mathematical content logically so that any mathematician reading it can easily verify its veracity
Use the general theory of groups, rings and fields to answer specific problems in algebra
Write defect-free proofs in algebra","Course Description: In Higher Algebra we examine some of the basic notions of modern algebra that arose in the late 19th and early 20th century. The most fundamental notion is that of a group, which is how mathematicians study symmetry. In this course groups are studied in detail both from an abstract point of view and also to study symmetry in geometry. The other important concept studied is that of a ring. The algebra of adding and multiplying matrices has many similarities with the algebra of numbers. The notion of rings generalises both these two examples. The course examines factorisation theory for certain rings.
This course is one of the three core third year higher pure mathematics courses and is a pre-requisite for pure mathematics students progressing to Honours. In particular, it introduces the axiomatic language and framework that underpins modern mathematics. The delivery will primarily be through lectures with some problem solving tutorials.
Course Aims: The aim of this course is to introduce students to the language and basic concepts of modern algebra. The course includes foundational material essential for all further studies in pure mathematics. Proofs will feature heavily in both classes and assessments, so another aim will be to develop the skill of writing sound mathematical proofs.
Course Learning Outcomes: Describe mathematical content logically so that any mathematician reading it can easily verify its veracity
Use the general theory of groups, rings and fields to answer specific problems in algebra
Write defect-free proofs in algebra",Abstract algebra; Proof writing; Critical thinking,Abstract algebra; rigorous reasoning and proof techniques,Group theory; Ring theory; Symmetry in mathematics,Proficient understanding of the foundational concepts of modern algebra; ability to apply algebraic structures to various mathematical problems; skill in constructing and writing rigorous mathematical proofs.,"This course introduces students to modern algebra concepts, examining symmetry through group studies and ring theory, developing proof-writing skills."
MATH3801,Probability and Stochastic Processes,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3801&activityGroupId=1,"This is an advanced level course in probability theory and stochastic processes for mathematics/statistics and data science students. Topics covered during the seminars and tutorials include rigorous definition of probability and random variables; convergence of random variables; Poisson and Wiener process, and Ito Calculus.","The course aims to impart analytical skills that will allow students to prove rigorously the basic properties of stochastic processes such as the Wiener process and Ito integral. Students will be expected to understand the properties and subtleties of numerous random objects, allowing them to simulate these on a computer and draw appropriate conclusions. The higher version of the course will require knowledge of some extra proofs and technical arguments.","Identify appropriate stochastic process model(s
State the defining properties of various stochastic process models and related random objects
Provide logical and coherent proofs of fundamental results in the theory of stochastic processes","Course Description: This is an advanced level course in probability theory and stochastic processes for mathematics/statistics and data science students. Topics covered during the seminars and tutorials include rigorous definition of probability and random variables; convergence of random variables; Poisson and Wiener process, and Ito Calculus.
Course Aims: The course aims to impart analytical skills that will allow students to prove rigorously the basic properties of stochastic processes such as the Wiener process and Ito integral. Students will be expected to understand the properties and subtleties of numerous random objects, allowing them to simulate these on a computer and draw appropriate conclusions. The higher version of the course will require knowledge of some extra proofs and technical arguments.
Course Learning Outcomes: Identify appropriate stochastic process model(s
State the defining properties of various stochastic process models and related random objects
Provide logical and coherent proofs of fundamental results in the theory of stochastic processes",Stochastic modeling; Analytical reasoning; Proof construction,Stochastic modeling; rigorous reasoning and proof techniques,Probability theory; Stochastic processes; Poisson and Wiener processes; Ito Calculus,Deep understanding of stochastic processes; ability to rigorously analyze and prove properties of complex random variables and processes; skills in simulating and interpreting stochastic models.,"This course develops analytical skills by rigorously proving basic properties of stochastic processes, such as Wiener process and Ito integral."
MATH3811,Statistical Inference,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3811&activityGroupId=1,"This course introduces students to the field of statistical inference including the main parametric and non-parametric techniques. During seminars and tutorials a range of topics will be introduced including Uniformly minimum variance estimation, Cramer-Rao inequality, Lehmann-Scheffe theorem, monotone likelihood ratio distributions and uniformly most powerful unbiased tests, generalised likelihood ratio tests, exact tests and large sample tests, Bayesian point estimation, interval estimation and hypothesis testing, Robustness and bootstrap resampling, order statistics, goodness of fit, contingency tables, statistical inference based on ranks, one sample, two sample and k-sample problems, blocked data, independence and association.",The aim of the course is to introduce the main ideas and principles behind the parametric and non-parametric inference procedures. The basic methods of inference used throughout Statistics will be discussed rigorously. Students will learn how to choose the appropriate inference procedure and how to perform inference using the chosen procedure.,"Apply the concepts of finite-sample and asymptotic efficiency of inference procedure to appropriate problems
Estimate key population parameters of interest, to test hypotheses about them and to construct confidence regions
Use R to perform computer intensive calculations such as bootstrapping, robust estimation and nonparametric
Explain how statistical inference arises from the first principles of probability theory
Apply nonparametric estimation and testing procedures","Course Description: This course introduces students to the field of statistical inference including the main parametric and non-parametric techniques. During seminars and tutorials a range of topics will be introduced including Uniformly minimum variance estimation, Cramer-Rao inequality, Lehmann-Scheffe theorem, monotone likelihood ratio distributions and uniformly most powerful unbiased tests, generalised likelihood ratio tests, exact tests and large sample tests, Bayesian point estimation, interval estimation and hypothesis testing, Robustness and bootstrap resampling, order statistics, goodness of fit, contingency tables, statistical inference based on ranks, one sample, two sample and k-sample problems, blocked data, independence and association.
Course Aims: The aim of the course is to introduce the main ideas and principles behind the parametric and non-parametric inference procedures. The basic methods of inference used throughout Statistics will be discussed rigorously. Students will learn how to choose the appropriate inference procedure and how to perform inference using the chosen procedure.
Course Learning Outcomes: Apply the concepts of finite-sample and asymptotic efficiency of inference procedure to appropriate problems
Estimate key population parameters of interest, to test hypotheses about them and to construct confidence regions
Use R to perform computer intensive calculations such as bootstrapping, robust estimation and nonparametric
Explain how statistical inference arises from the first principles of probability theory
Apply nonparametric estimation and testing procedures", Statistical inference; parametric and non-parametric techniques; robust estimation; hypothesis testing; R programming, Statistical inference; hypothesis testing; R,Uniformly minimum variance unbiased estimation; Cramer-Rao inequality; Lehmann-Scheffe theorem; generalized likelihood ratio tests; Bayesian inference; bootstrap resampling; order statistics; goodness of fit tests; contingency table analysis; rank-based inference,Principles of statistical inference; application of inference procedures in various statistical scenarios; finite-sample and asymptotic properties of estimators; use of R for statistical computations and analysis,"This course applies key concepts of statistical inference to parametric and non-parametric techniques, introducing students to methods for estimating and testing population parameters."
MATH3821,Statistical Modelling and Computing,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH3821&activityGroupId=1,"The course is an undergraduate level course in statistical modelling and computing, and is a compulsory third-year course for student completing statistics majors. The course introduces modern approaches to statistical modelling and computing. Topics covered in seminars include linear models, generalised linear models, Bayesian linear model, nonparametric regression, nonparametric density estimation and bandwidth selection, Monte Carlo simulation, bootstrap method and Markov chain Monte Carlo. Implementation of the above procedures is conducted using the statistical package R which is introduced during tutorial classes.","This course aims to introduce students to techniques and procedures for statistical modeling and computing. The course will introduce the theory and applications for flexible regression modeling including parametric and non-parametric methods. Applications of simulation in statistical inference such as Monte Carlo simulation, bootstrap methods, and Markov chain Monte Carlo will be discussed.","Apply appropriate theorems in statistical modelling and computing in the correct context
Apply appropriate procedures for a problem given particular assumptions
State definitions used in statistical modelling and computing
Apply the methods of statistical modeling and computing to solve appropriate problems
Communicate results to a general audience","Course Description: The course is an undergraduate level course in statistical modelling and computing, and is a compulsory third-year course for student completing statistics majors. The course introduces modern approaches to statistical modelling and computing. Topics covered in seminars include linear models, generalised linear models, Bayesian linear model, nonparametric regression, nonparametric density estimation and bandwidth selection, Monte Carlo simulation, bootstrap method and Markov chain Monte Carlo. Implementation of the above procedures is conducted using the statistical package R which is introduced during tutorial classes.
Course Aims: This course aims to introduce students to techniques and procedures for statistical modeling and computing. The course will introduce the theory and applications for flexible regression modeling including parametric and non-parametric methods. Applications of simulation in statistical inference such as Monte Carlo simulation, bootstrap methods, and Markov chain Monte Carlo will be discussed.
Course Learning Outcomes: Apply appropriate theorems in statistical modelling and computing in the correct context
Apply appropriate procedures for a problem given particular assumptions
State definitions used in statistical modelling and computing
Apply the methods of statistical modeling and computing to solve appropriate problems
Communicate results to a general audience",Statistical modeling; statistical computing; simulation techniques; use of R for statistical analysis,Statistical modeling; R; numerical methods; Monte Carlo simulation; bootstrap methods; Markov chain Monte Carlo, Linear and generalized linear models; Bayesian linear models; nonparametric regression and density estimation; Monte Carlo simulation; bootstrap methods; Markov chain Monte Carlo,Modern techniques in statistical modeling; computing applications in statistics; parametric and non-parametric methods; theory and practical implementation of statistical methods using R,"This course introduces students to techniques and procedures for statistical modeling and computing, covering topics such as linear models and Monte Carlo simulation."
MATH3831,Statistical Methods in Social and Market Research,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH3831&activityGroupId=1,"In this course, students will develop skills important for the design and analysis of research in the social sciences and in market research. The specific focus will be on issues related to survey sampling, and questionnaire design and analysis. By the end of this course, students will be able to identify an appropriate survey design for a particular situation, estimate the required sample sizes to achieve a given level of precision, estimate key quantities of interest (typically expressed as averages, totals or ratios), and make inferences about key quantities using their sample estimates. In addition, the course provides an opportunity to design a questionnaire suitable for answering a key research question and analyse responses to a questionnaire using a range of modern techniques. A weekly tutorial complements the recorded lecture series.This course is suited primarily for students in their third year of study in Mathematics, Statistics, or related disciplines.","This course aims to develop skills important for the design and analysis of research in the social sciences and in market research. Specific focus will be on developing skills for survey sampling, and questionnaire design and analysis.","Estimate key population parameters and measures of uncertainty for a given sampling strategy
Develop and critique questionnaires with respect to common issues in questionnaire design
Generate and interpret computer output for questionnaire analysis, factor analysis and cluster analysis
Describe the common statistical sampling strategies for a variety of scenarios and recognise them from descriptions of survey methodologies
Identify the appropriate sampling strategy for a given context in social and other research","Course Description: In this course, students will develop skills important for the design and analysis of research in the social sciences and in market research. The specific focus will be on issues related to survey sampling, and questionnaire design and analysis. By the end of this course, students will be able to identify an appropriate survey design for a particular situation, estimate the required sample sizes to achieve a given level of precision, estimate key quantities of interest (typically expressed as averages, totals or ratios), and make inferences about key quantities using their sample estimates. In addition, the course provides an opportunity to design a questionnaire suitable for answering a key research question and analyse responses to a questionnaire using a range of modern techniques. A weekly tutorial complements the recorded lecture series.This course is suited primarily for students in their third year of study in Mathematics, Statistics, or related disciplines.
Course Aims: This course aims to develop skills important for the design and analysis of research in the social sciences and in market research. Specific focus will be on developing skills for survey sampling, and questionnaire design and analysis.
Course Learning Outcomes: Estimate key population parameters and measures of uncertainty for a given sampling strategy
Develop and critique questionnaires with respect to common issues in questionnaire design
Generate and interpret computer output for questionnaire analysis, factor analysis and cluster analysis
Describe the common statistical sampling strategies for a variety of scenarios and recognise them from descriptions of survey methodologies
Identify the appropriate sampling strategy for a given context in social and other research",Survey design; Statistical sampling; Data analysis,Survey design; Statistical sampling; Data analysis,Survey sampling; Questionnaire design and analysis; Estimation techniques,Design and analysis of social research; market research methodologies; estimation of population parameters; uncertainty measures; computer-aided data analysis,"This course develops skills for designing and analyzing research in social sciences and market research through survey sampling, questionnaire design, and analysis."
MATH3841,Statistical Analysis of Dependent Data,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH3841&activityGroupId=1,"This is a third-year statistics course for undergraduate students in mathematics/statistics and data science.Many data applications are concerned with observations that are correlatedand sophisticated methods arerequiredtoanalyzesuch data.This course extends statistical modeling from independently distributed data to modelling dependence in observed data and develops an understanding of basic distributions and models useful in practical situations.It continues with the development of statistical methods for analysis of dependent data arising in multivariate observations, longitudinal data, time series and spatial processes.Specific topics include themultivariate normal distribution, linear mixed models, time series models, ARMA and forecasting ARMA, spatial processes, sample semivariograms and Kriging.The teaching activities include weekly lectures in which the methods and theory are explained and weeklytutorials in which the methods can be applied.","The aim of this course is to extend the student’s understanding of statistical modelling, predominantly based on independently distributed data, to these important practical examples where dependence is required in the models. The course introduces the multivariate normal distribution which is central to the understanding of dependence between measurements within subjects, across time or space. The aim is to apply the basic properties of the multivariate normal distribution to a series of examples drawn from longitudinal data, time series and spatial processes.","Identify the existence of correlated data and describe the limitations of standard methods in these settings
Develop and analytically describe appropriate models for longitudinal, time series and spatial data
Apply appropriate methods to analyze temporally and spatially dependent data
Apply statistical software to model and analyze correlated data","Course Description: This is a third-year statistics course for undergraduate students in mathematics/statistics and data science.Many data applications are concerned with observations that are correlatedand sophisticated methods arerequiredtoanalyzesuch data.This course extends statistical modeling from independently distributed data to modelling dependence in observed data and develops an understanding of basic distributions and models useful in practical situations.It continues with the development of statistical methods for analysis of dependent data arising in multivariate observations, longitudinal data, time series and spatial processes.Specific topics include themultivariate normal distribution, linear mixed models, time series models, ARMA and forecasting ARMA, spatial processes, sample semivariograms and Kriging.The teaching activities include weekly lectures in which the methods and theory are explained and weeklytutorials in which the methods can be applied.
Course Aims: The aim of this course is to extend the student’s understanding of statistical modelling, predominantly based on independently distributed data, to these important practical examples where dependence is required in the models. The course introduces the multivariate normal distribution which is central to the understanding of dependence between measurements within subjects, across time or space. The aim is to apply the basic properties of the multivariate normal distribution to a series of examples drawn from longitudinal data, time series and spatial processes.
Course Learning Outcomes: Identify the existence of correlated data and describe the limitations of standard methods in these settings
Develop and analytically describe appropriate models for longitudinal, time series and spatial data
Apply appropriate methods to analyze temporally and spatially dependent data
Apply statistical software to model and analyze correlated data",Statistical modeling; Data analysis; Time series analysis,Statistical modeling; Data analysis; Time series analysis,Multivariate normal distribution; Linear mixed models; ARMA models; Spatial statistics; Kriging,Advanced understanding of statistical models for dependent data; proficient in analyzing temporal and spatial data; skilled in using statistical software to model and analyze complex datasets.,"This course applies statistical modeling principles to correlated data, extending understanding from independently distributed data to dependence in observed data."
MATH3901,Higher Probability and Stochastic Processes,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3901&activityGroupId=1,"This is an advanced level course in probability theory and stochastic processes for mathematics/statistics and data science students. Topics covered include rigorous definition of probability and random variables; convergence of random variables; Poisson and Wiener process, and Ito Calculus. This version will require knowledge of more proofs and technical arguments.","The course aims to impart analytical skills that will allow students to prove rigorously the basic properties of stochastic processes such as the Wiener process and Ito integral. Student will be expected to understand the properties and subtleties of numerous random objects, allowing them to simulate these on a computer and draw appropriate conclusions. The higher version of the course will require knowledge of some extra proofs and technical arguments.","Identify appropriate stochastic process model(s
Construct  logical and coherent proofs of fundamental results in the theory of stochastic processes
Differentiate and state the defining properties of various stochastic process models and related random objects","Course Description: This is an advanced level course in probability theory and stochastic processes for mathematics/statistics and data science students. Topics covered include rigorous definition of probability and random variables; convergence of random variables; Poisson and Wiener process, and Ito Calculus. This version will require knowledge of more proofs and technical arguments.
Course Aims: The course aims to impart analytical skills that will allow students to prove rigorously the basic properties of stochastic processes such as the Wiener process and Ito integral. Student will be expected to understand the properties and subtleties of numerous random objects, allowing them to simulate these on a computer and draw appropriate conclusions. The higher version of the course will require knowledge of some extra proofs and technical arguments.
Course Learning Outcomes: Identify appropriate stochastic process model(s
Construct  logical and coherent proofs of fundamental results in the theory of stochastic processes
Differentiate and state the defining properties of various stochastic process models and related random objects",Stochastic modeling; Analytical reasoning; Proof construction,"Stochastic modeling; rigorous reasoning and proof techniques
",Probability theory; Stochastic processes; Poisson and Wiener processes; Ito Calculus,properties of stochastic processes; model identification and differentiation in stochastic contexts; technical argumentation in advanced probability,"This course develops analytical skills by rigorously proving basic properties of stochastic processes, such as Wiener process and Ito integral."
MATH3911,Higher Statistical Inference,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH3911&activityGroupId=1,"This course introduces students to the field of statistical inference including the main parametric and non-parametric techniques. During seminars and tutorials a range of topics will be introduced including Uniformly minimum variance estimation, Cramer-Rao inequality, Lehmann-Scheffe theorem, Monotone likelihood ratio distributions and uniformly most powerful unbiased tests, Generalised likelihood ratio tests, exact tests and large sample tests, Bayesian point estimation, interval estimation and hypothesis testing, Robustness and bootstrap resampling, oOrder statistics, goodness of fit, contingency tables, Statistical inference based on ranks, Oone sample, two sample and k-sample problems, blocked data, independence and association.
This course is the higher version of MATH3811, with topics explored at greater depth.",The aim of the course is to introduce the main ideas and principles behind the parametric and non-parametric inference procedures. The basic methods of inference used throughout Statistics will be discussed rigorously. Students will learn how to choose the appropriate inference procedure and how to perform inference using the chosen procedure.,"Select and apply the concepts of finite-sample and asymptotic efficiency of inference procedure to appropriate problems
Formulate and apply nonparametric estimation and testing procedures
Estimate key population parameters of interest, to test hypotheses about them and to construct confidence regions
Use R to perform computer intensive calculations such as bootstrapping, robust estimation and nonparametric
Explain how statistical inference arises from the first principles of probability theory","Course Description: This course introduces students to the field of statistical inference including the main parametric and non-parametric techniques. During seminars and tutorials a range of topics will be introduced including Uniformly minimum variance estimation, Cramer-Rao inequality, Lehmann-Scheffe theorem, Monotone likelihood ratio distributions and uniformly most powerful unbiased tests, Generalised likelihood ratio tests, exact tests and large sample tests, Bayesian point estimation, interval estimation and hypothesis testing, Robustness and bootstrap resampling, oOrder statistics, goodness of fit, contingency tables, Statistical inference based on ranks, Oone sample, two sample and k-sample problems, blocked data, independence and association.
This course is the higher version of MATH3811, with topics explored at greater depth.
Course Aims: The aim of the course is to introduce the main ideas and principles behind the parametric and non-parametric inference procedures. The basic methods of inference used throughout Statistics will be discussed rigorously. Students will learn how to choose the appropriate inference procedure and how to perform inference using the chosen procedure.
Course Learning Outcomes: Select and apply the concepts of finite-sample and asymptotic efficiency of inference procedure to appropriate problems
Formulate and apply nonparametric estimation and testing procedures
Estimate key population parameters of interest, to test hypotheses about them and to construct confidence regions
Use R to perform computer intensive calculations such as bootstrapping, robust estimation and nonparametric
Explain how statistical inference arises from the first principles of probability theory",Statistical inference; Data analysis; Computational statistics,Statistical inference; Data analysis; numerical methods,Parametric and non-parametric techniques; Bayesian statistics; Bootstrap resampling; Hypothesis testing,principles of statistical inference; finite-sample and asymptotic efficiency; nonparametric estimation and testing methods; use of R for statistical calculations,"This course introduces students to statistical inference techniques, including parametric and non-parametric methods, and helps them apply these concepts to real-world problems."
MATH5165,Optimization,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5165&activityGroupId=1,"This is an advanced level course in optimization for postgraduate students from all disciplines. Optimization is a field that develops techniques for finding the best possible choice from numerous available alternatives for a given criterion. It provides mathematical methods and numerical algorithms for solving decision-making problems in industry, commerce and scientific disciplines. Optimization methods are likely to have significant impact in many application areas of optimization, such as inventory management, energy distribution and medical treatment planning, by improving inventory controls or reducing the distribution costs or increasing the efficacy of medical treatments. Topics covered in this course include optimization modelling; convexity of sets and functions; unconstrained and constrained optimization problems; optimality and duality principles; numerical methods such as Newton, conjugate gradient and penalty methods; optimal control problems; differential equations; the Pontryagin Maximum Principle; autonomous control problems with fixed and free targets. This is a mathematics course using linear algebra, multi-variable calculus and differential equation techniques.","The main aim of this course is to provide the mathematical theory of multi-variable optimization and optimal control, and to provide students with the skills to formulate, solve and analyze solutions to certain multi-variable optimization problems and infinite dimensional optimal control problems.","Use technology as an aid to solve optimization models and communicate mathematical outcomes
Recognize and create valid optimization models and apply correct mathematical techniques
Apply the concepts and techniques of matrix algebra and multi-variable calculus to solve mathematical optimization problems
State definitions and theorems in the syllabus and apply them to specific examples
Formulate, solve and analyze solutions to certain optimization problems","Course Description: This is an advanced level course in optimization for postgraduate students from all disciplines. Optimization is a field that develops techniques for finding the best possible choice from numerous available alternatives for a given criterion. It provides mathematical methods and numerical algorithms for solving decision-making problems in industry, commerce and scientific disciplines. Optimization methods are likely to have significant impact in many application areas of optimization, such as inventory management, energy distribution and medical treatment planning, by improving inventory controls or reducing the distribution costs or increasing the efficacy of medical treatments. Topics covered in this course include optimization modelling; convexity of sets and functions; unconstrained and constrained optimization problems; optimality and duality principles; numerical methods such as Newton, conjugate gradient and penalty methods; optimal control problems; differential equations; the Pontryagin Maximum Principle; autonomous control problems with fixed and free targets. This is a mathematics course using linear algebra, multi-variable calculus and differential equation techniques.
Course Aims: The main aim of this course is to provide the mathematical theory of multi-variable optimization and optimal control, and to provide students with the skills to formulate, solve and analyze solutions to certain multi-variable optimization problems and infinite dimensional optimal control problems.
Course Learning Outcomes: Use technology as an aid to solve optimization models and communicate mathematical outcomes
Recognize and create valid optimization models and apply correct mathematical techniques
Apply the concepts and techniques of matrix algebra and multi-variable calculus to solve mathematical optimization problems
State definitions and theorems in the syllabus and apply them to specific examples
Formulate, solve and analyze solutions to certain optimization problems",Optimization techniques; Mathematical modeling; Numerical analysis,Optimization; Mathematical modeling; Numerical methods,Convex optimization; Unconstrained and constrained optimization; Optimal control; Numerical methods,"Convexity of sets and functions; Newton and conjugate gradient methods; Pontryagin Maximum Principle; application of optimization in various fields like inventory management, energy distribution, and medical treatment planning.","This course develops techniques for finding optimal choices from numerous alternatives by teaching optimization modelling, methods, and principles."
MATH5175,Special Topics in Applied Mathematics A,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5175&activityGroupId=1,"This postgraduate course provides students in Applied Mathematics with a variety of tools that are particularly useful for the study of many other Applied Mathematics subjects. In any area of applied research, methods should not be learnt without understanding their theoretical backgrounds. Understanding the theory behind the methods requires some abstract mathematics.
This course may not be offered every year and course content/topics vary when offered, for more information see the School of Mathematics and Statistics web site or contact the School Office.","The aim of this course is to provide students in Applied Mathematics with knowledge of basic Real Analysis and Functional Analysis, particularly topics that are useful for the study of many other Applied Mathematics courses.","Apply mathematical presentation and written skills
Demonstrate mastery of an advanced topic in Applied Mathematics
Apply advanced mathematical techniques to formulate and solve real-world problems","Course Description: This postgraduate course provides students in Applied Mathematics with a variety of tools that are particularly useful for the study of many other Applied Mathematics subjects. In any area of applied research, methods should not be learnt without understanding their theoretical backgrounds. Understanding the theory behind the methods requires some abstract mathematics.
This course may not be offered every year and course content/topics vary when offered, for more information see the School of Mathematics and Statistics web site or contact the School Office.
Course Aims: The aim of this course is to provide students in Applied Mathematics with knowledge of basic Real Analysis and Functional Analysis, particularly topics that are useful for the study of many other Applied Mathematics courses.
Course Learning Outcomes: Apply mathematical presentation and written skills
Demonstrate mastery of an advanced topic in Applied Mathematics
Apply advanced mathematical techniques to formulate and solve real-world problems",Applied mathematics; Mathematical theory; Problem-solving,Real Analysis; Applied mathematics,Real Analysis; Functional Analysis; Advanced mathematical techniques,Theoretical foundations of applied mathematical methods; mastery in advanced applied mathematics topics; utilization of abstract mathematical concepts in practical scenarios.,"This course develops students' knowledge of Real and Functional Analysis, enabling them to apply mathematical techniques to solve complex problems."
MATH5271,Environmental Data Science and Statistics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5271&activityGroupId=1,"This course is a graduate level overview of the applications of data science in an environmental context. Although applications and motivations will be drawn primarily from the ocean, atmospheric and climate sciences, the material covered will apply generally across various environmental and non-environmental science and industry areas. A key focus of this course is an emphasis on practical real-world problems. These include practical approaches to data handling and quality control, consideration of real-world examples of good and bad data science practice, the application of various statistical methods to real world data sets, the integration of statistical approaches with physically based forecast methods, and a project component involving independent exploration and exposition of cutting-edge machine learning methods.","The aim of this course is to give an overview of environmental data science. The course will give students the tools to overcome issues relating to the treatment of raw observational data, practically implement various analysis methods and skillfully interpret the resulting analysis.While practical in nature, the course will rigorously cover underlying fundamentals and aims to give students a powerful and critical framework with which to approach data science issues generally.","Communicate and critically evaluate ideas in environmental data science
Apply a range of techniques for the analysis of environmental data
Evaluate data efficacy and statistical methods in the environmental sciences
Explain the necessary framework for approaching environmental data science problems","Course Description: This course is a graduate level overview of the applications of data science in an environmental context. Although applications and motivations will be drawn primarily from the ocean, atmospheric and climate sciences, the material covered will apply generally across various environmental and non-environmental science and industry areas. A key focus of this course is an emphasis on practical real-world problems. These include practical approaches to data handling and quality control, consideration of real-world examples of good and bad data science practice, the application of various statistical methods to real world data sets, the integration of statistical approaches with physically based forecast methods, and a project component involving independent exploration and exposition of cutting-edge machine learning methods.
Course Aims: The aim of this course is to give an overview of environmental data science. The course will give students the tools to overcome issues relating to the treatment of raw observational data, practically implement various analysis methods and skillfully interpret the resulting analysis.While practical in nature, the course will rigorously cover underlying fundamentals and aims to give students a powerful and critical framework with which to approach data science issues generally.
Course Learning Outcomes: Communicate and critically evaluate ideas in environmental data science
Apply a range of techniques for the analysis of environmental data
Evaluate data efficacy and statistical methods in the environmental sciences
Explain the necessary framework for approaching environmental data science problems",Environmental data science; Statistical analysis; Machine learning applications,Environmental data science; Statistical analysis; Machine learning,Data handling and quality control; Statistical methods integration; Machine learning in environmental contexts,Fundamentals of environmental data science; approaches to raw observational data treatment; integration of statistical methods with physical forecasting; critical analysis frameworks for data science.,"This course applies concepts of data science to environmental contexts, providing students with practical tools and frameworks to overcome data challenges and critically evaluate environmental data science issues."
MATH5295,Special Topics in Applied Mathematics D,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5295&activityGroupId=1,"Not offered every year. Course content varies when offered, see the School of Mathematics and Statistics web site or contact the [http://www.maths.unsw.edu.au/homepage.html | School of Mathematics and Statistics ].",,"demonstrate mastery of an advanced topic in Applied Mathematics
demonstrate an ability to apply advanced mathematical techniques to formulate and solve real-world problems
display advanced competency in mathematical presentation and written skills","Course Learning Outcomes: demonstrate mastery of an advanced topic in Applied Mathematics
demonstrate an ability to apply advanced mathematical techniques to formulate and solve real-world problems
display advanced competency in mathematical presentation and written skills",Advanced mathematical techniques; Problem-solving; Mathematical communication,Advanced mathematical techniques; Problem-solving; Mathematical communication,Applied mathematics; Real-world applications; Mathematical modeling,Mastery of specific advanced topics in applied mathematics; competency in communicating complex mathematical ideas effectively in written and presentation formats.,This course enables students to develop and apply advanced mathematical techniques to formulate and solve real-world problems.
MATH5305,Computational Mathematics for Science and Engineering,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5305&activityGroupId=1,"Partial differential equations (PDEs) provide a natural mathematical description for many phenomena of interest in science and engineering. Such equations are often difficult or impossible to solve using purely analytical (pencil and paper) methods, especially for realistic industrial problems. This course introduces finite difference and finite element methods for elliptic and parabolic PDEs, and discusses key concepts such as stability, convergence and computational cost. Relevant techniques in numerical linear algebra are also discussed.
The course includes a substantial practical component dealing with the computer implementation of the algorithms used for solving partial differential equations. This component of the course is supported by a weekly computer lab. In addition, a weekly tutorial class provides exercises on the mathematical content covered in lectures.
The course is intended for students in mathematics programs, or students in science and engineering programs who have a strong mathematical background and an interest in computer modelling.
Note: Students must have some prior experience with computer programming.",MATH5305 is designed to provide students with a solid mathematical foundation for employment or further study in a wide range of scientific and engineering fields that rely on numerical modeling based on partial differential equations. The practical component of the course provides students with the opportunity to develop their programming skills.,"Solve a system of linear equations efficiently by exploiting sparsity and other matrix structures
Determine the stability properties of a few simple time integration schemes for parabolic PDEs
Derive the weak form of an elliptic boundary-value problem and hence formulate an appropriate finite element method to compute an approximate solution
Formulate a finite difference approximation to a partial differential equation
Employ Taylor expansions to estimate the local truncation error and the order of consistency of a finite difference scheme","Course Description: Partial differential equations (PDEs) provide a natural mathematical description for many phenomena of interest in science and engineering. Such equations are often difficult or impossible to solve using purely analytical (pencil and paper) methods, especially for realistic industrial problems. This course introduces finite difference and finite element methods for elliptic and parabolic PDEs, and discusses key concepts such as stability, convergence and computational cost. Relevant techniques in numerical linear algebra are also discussed.
The course includes a substantial practical component dealing with the computer implementation of the algorithms used for solving partial differential equations. This component of the course is supported by a weekly computer lab. In addition, a weekly tutorial class provides exercises on the mathematical content covered in lectures.
The course is intended for students in mathematics programs, or students in science and engineering programs who have a strong mathematical background and an interest in computer modelling.
Note: Students must have some prior experience with computer programming.
Course Aims: MATH5305 is designed to provide students with a solid mathematical foundation for employment or further study in a wide range of scientific and engineering fields that rely on numerical modeling based on partial differential equations. The practical component of the course provides students with the opportunity to develop their programming skills.
Course Learning Outcomes: Solve a system of linear equations efficiently by exploiting sparsity and other matrix structures
Determine the stability properties of a few simple time integration schemes for parabolic PDEs
Derive the weak form of an elliptic boundary-value problem and hence formulate an appropriate finite element method to compute an approximate solution
Formulate a finite difference approximation to a partial differential equation
Employ Taylor expansions to estimate the local truncation error and the order of consistency of a finite difference scheme",Numerical modeling; Computational mathematics; Programming,Numerical methods; R; MATLAB,Finite difference methods; Finite element methods; Numerical linear algebra; Partial differential equations (PDEs),Techniques for solving linear systems with emphasis on sparsity; stability of time integration schemes; formulation of weak forms for boundary-value problems; approximation methods for PDEs; Taylor expansions for error analysis.,"This course develops computational skills in solving partial differential equations using finite difference and finite element methods, with a focus on practical implementation."
MATH5335,Computational Mathematics for Finance,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5335&activityGroupId=1,"Finance is concerned with making definite numerical recommendations that frequently can only be obtained by analysing sophisticated models using high-speed computers. This course studies the design, implementation and use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It includes a review of MATLAB/Python, floating point numbers, rounding error and computational complexity, and a selection of topics from: approximation and parameter estimation, Fourier series and the FFT, finite difference approximations, partial differential equations (Black-Scholes PDE), sparse linear systems, nonlinear algebraic equations, trees, Monte Carlo methods and simulation, random numbers and variance reduction and numerical integration. The teaching activities include weekly lectures in which the theoretical background is explained and weekly practical computing laboratory classes.","This course aims to teach the use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It provides students with essential tools needed to obtain numerical solutions for a variety of financial models.","Apply the underlying mathematics, computational techniques and problem solving skills relevant for problems in financial mathematics
Determine confidence in a computed answer and the risks associated with a given computational problem
Apply quantitative skills and mathematical reasoning to solve problems relevant to finance, insurance and risk management
Select appropriate computational techniques to analyse financial data and interpret the answers within a financial problem","Course Description: Finance is concerned with making definite numerical recommendations that frequently can only be obtained by analysing sophisticated models using high-speed computers. This course studies the design, implementation and use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It includes a review of MATLAB/Python, floating point numbers, rounding error and computational complexity, and a selection of topics from: approximation and parameter estimation, Fourier series and the FFT, finite difference approximations, partial differential equations (Black-Scholes PDE), sparse linear systems, nonlinear algebraic equations, trees, Monte Carlo methods and simulation, random numbers and variance reduction and numerical integration. The teaching activities include weekly lectures in which the theoretical background is explained and weekly practical computing laboratory classes.
Course Aims: This course aims to teach the use of computer programs to solve practical mathematical problems of relevance to finance, insurance and risk management. It provides students with essential tools needed to obtain numerical solutions for a variety of financial models.
Course Learning Outcomes: Apply the underlying mathematics, computational techniques and problem solving skills relevant for problems in financial mathematics
Determine confidence in a computed answer and the risks associated with a given computational problem
Apply quantitative skills and mathematical reasoning to solve problems relevant to finance, insurance and risk management
Select appropriate computational techniques to analyse financial data and interpret the answers within a financial problem",Computational finance; Financial modeling; Numerical analysis,"Financial modeling; Numerical methods; Black-Scholes model; Python; MATLAB; Fourier series
",MATLAB/Python programming; Fourier series and FFT; Monte Carlo methods; Black-Scholes model,Application of numerical solutions in finance; risk assessment in computational finance; interpretation of financial data analysis.,"This course analyzes mathematical problems in finance using computer programs, teaching students to apply computational techniques and solve problems related to finance, insurance, and risk management."
MATH5371,Numerical Linear Algebra,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5371&activityGroupId=1,"The course is intended for students from Science and Engineering programs with interests in mathematics, statistics, data science or numerical simulation.Algorithms from numerical linear algebra are ubiquitous in scientific and statistical software. The theoretical component of the course aims to impart an understanding of how these algorithms work as well as an appreciation of their potential limitations. To illustrate the applications of numerical linear algebra, a variety of examples from statistics, data science and applied mathematics are described. The course includes a substantial computing component providing practical experience with widely used software libraries.",The primary aim of the course is to introduce the fundamental algorithms used to solve the three key problems in linear algebra: solving a square system of linear equations; finding the least-squares solution to an overdetermined linear system; and computing the eigenvalues and eigenfunctions of a square matrix. A recurring theme is that the computational cost of a solution can often be greatly reduced by exploiting any special structure present in a matrix. The course also discusses a few of the wide range of applications of numerical linear algebra.,"Use a suitable programming language to solve simple and complex problems in linear algebra via calls to numerical library functions
Quantify the relative merits of direct and iterative methods for problems in linear algebra
Identify matrix properties that can compromise the accuracy and reliability of numerical computations
Describe the role of numerical linear algebra in a variety of scientific and statistical applications
Identify relevant structure in a matrix and select and analyse a specialised algorithm that exploits this structure for improved efficiency
Use standard matrix factorisations to construct solution procedures in numerical linear algebra
Estimate how the computational cost of an algorithm scales with the problem size for simple and complex problems in linear algebra","Course Description: The course is intended for students from Science and Engineering programs with interests in mathematics, statistics, data science or numerical simulation.Algorithms from numerical linear algebra are ubiquitous in scientific and statistical software. The theoretical component of the course aims to impart an understanding of how these algorithms work as well as an appreciation of their potential limitations. To illustrate the applications of numerical linear algebra, a variety of examples from statistics, data science and applied mathematics are described. The course includes a substantial computing component providing practical experience with widely used software libraries.
Course Aims: The primary aim of the course is to introduce the fundamental algorithms used to solve the three key problems in linear algebra: solving a square system of linear equations; finding the least-squares solution to an overdetermined linear system; and computing the eigenvalues and eigenfunctions of a square matrix. A recurring theme is that the computational cost of a solution can often be greatly reduced by exploiting any special structure present in a matrix. The course also discusses a few of the wide range of applications of numerical linear algebra.
Course Learning Outcomes: Use a suitable programming language to solve simple and complex problems in linear algebra via calls to numerical library functions
Quantify the relative merits of direct and iterative methods for problems in linear algebra
Identify matrix properties that can compromise the accuracy and reliability of numerical computations
Describe the role of numerical linear algebra in a variety of scientific and statistical applications
Identify relevant structure in a matrix and select and analyse a specialised algorithm that exploits this structure for improved efficiency
Use standard matrix factorisations to construct solution procedures in numerical linear algebra
Estimate how the computational cost of an algorithm scales with the problem size for simple and complex problems in linear algebra",Numerical linear algebra; Algorithmic implementation; Computational efficiency,linear algebra; algorithm design; algorithm analysis,Matrix factorizations; Direct and iterative methods; Specialized algorithms for structured matrices,Algorithmic scalability; matrix properties affecting computations; applications of numerical linear algebra in science and statistics.,"This course introduces students to fundamental algorithms used to solve key problems in linear algebra, emphasizing practical experience and exploiting matrix structure."
MATH5515,Special Topics in Pure Mathematics A,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5515&activityGroupId=1,"Not offered every year. Course content varies when offered, see the School of Mathematics and Statistics web site or contact the [http://www.maths.unsw.edu.au/homepage.html | School of Mathematics and Statistics ].",,"Demonstrate mastery of an advanced topic in pure mathematics
Display advanced competency in mathematical presentation and written skills
Display the ability to apply mathematical theory to solve concrete and theoretical problems","Course Learning Outcomes: Demonstrate mastery of an advanced topic in pure mathematics
Display advanced competency in mathematical presentation and written skills
Display the ability to apply mathematical theory to solve concrete and theoretical problems",Advanced mathematical theory; Problem-solving; Mathematical communication,Advanced mathematical theory; Problem-solving; Mathematical communication,Pure mathematics; Mathematical modeling; Theoretical analysis,Mastery of pure mathematics; application of theory in practical scenarios.,"This course explores, advancing students' knowledge of pure mathematics and their ability to present and apply mathematical theories to solve complex problems."
MATH5525,Special Topics in Pure Mathematics B,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5525&activityGroupId=1,"Not offered every year. Course content varies when offered, see the School of Mathematics and Statistics web site or contact the [http://www.maths.unsw.edu.au/homepage.html | School of Mathematics and Statistics ].",,"Demonstrate mastery of an advanced topic in pure mathematics
Display advanced competency in mathematical presentation and written skills
Display the ability to apply mathematical theory to solve concrete and theoretical problems","Course Learning Outcomes: Demonstrate mastery of an advanced topic in pure mathematics
Display advanced competency in mathematical presentation and written skills
Display the ability to apply mathematical theory to solve concrete and theoretical problems",Advanced mathematical theory; Problem-solving; Mathematical communication,Advanced mathematical theory; Problem-solving; Mathematical communication,Pure mathematics; Mathematical modeling; Theoretical analysis,Mastery of pure mathematics; application of theory in practical scenarios.,"This course develops mastery of advanced pure mathematics topics, applying theory to solve complex problems."
MATH5535,Special Topics in Pure Mathematics C,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5535&activityGroupId=1,"Not offered every year. Course content varies when offered, see the School of Mathematics and Statistics web site or contact the [http://www.maths.unsw.edu.au/homepage.html | School of Mathematics and Statistics ].","The aim of this course is to put the theories of rings, fields and modules in a geometric context. This perspective is of fundamental importancein various branches of mathematics, including number theory, representation theory, differential geometry and mathematical physics.In algebraic geometry varieties play the role of manifolds in differential geometry.
Our first aim is the study of affine and projective varietiesand maps between them.Next, we will go through local properties of these objects and discuss what is meant by singularity. An important goal forthis course is the study of the famous Riemann-Roch theorem for curves, for which we will need the notions of Divisors and Differential Forms. Riemann-Roch traces a deep connection between topology and complex analysis, through purely algebraic methods. As such it provides a showcasefor the power of algebro-geometric techniques. We will end the course by discussing a few applications of this theorem and briefly review some more advanced topics in the field.","Demonstrate mastery of an advanced topic in pure mathematics
Display advanced competency in mathematical presentation and written skills
Display the ability to apply mathematical theory to solve concrete and theoretical problems","Course Aims: The aim of this course is to put the theories of rings, fields and modules in a geometric context. This perspective is of fundamental importancein various branches of mathematics, including number theory, representation theory, differential geometry and mathematical physics.In algebraic geometry varieties play the role of manifolds in differential geometry.
Our first aim is the study of affine and projective varietiesand maps between them.Next, we will go through local properties of these objects and discuss what is meant by singularity. An important goal forthis course is the study of the famous Riemann-Roch theorem for curves, for which we will need the notions of Divisors and Differential Forms. Riemann-Roch traces a deep connection between topology and complex analysis, through purely algebraic methods. As such it provides a showcasefor the power of algebro-geometric techniques. We will end the course by discussing a few applications of this theorem and briefly review some more advanced topics in the field.
Course Learning Outcomes: Demonstrate mastery of an advanced topic in pure mathematics
Display advanced competency in mathematical presentation and written skills
Display the ability to apply mathematical theory to solve concrete and theoretical problems",Algebraic geometry; Theoretical mathematics; Mathematical communication,Algebraic geometry; Ring Theory; fields; modules; Affine and projective varieties; Riemann-Roch theorem,"Rings, fields, and modules; Affine and projective varieties; Riemann-Roch theorem",Geometric context of algebraic structures; local properties and singularities of varieties; applications of Riemann-Roch theorem.,"This course applies algebraic theories to geometric contexts, exploring varieties, maps, and properties, with a focus on the Riemann-Roch theorem and its applications."
MATH5605,Functional Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5605&activityGroupId=1,"This course is an introduction to functional analysis. It is a proof-based course covering abstract topological vector spaces before specialising to Banach spaces (complete normed spaces). Students will prove several key results due to Banach and its school. The course also by considers Hilbert spaces and decomposing compact operators acting on them. This course is lecture based, with tutorials every week.",This course aims to develop the ability of the student to write proofs and to manipulate abstract objects.,"Communicate ideas in functional analysis competently in written form
Use online tools to find information to solve problems in functional analysis
Construct arguments using concepts from a range of different areas of mathematics (e
Understand proofs and adapt them to prove other statements in functional analysis
Assess the appropriate tools to solve varying problems in functional analysis","Course Description: This course is an introduction to functional analysis. It is a proof-based course covering abstract topological vector spaces before specialising to Banach spaces (complete normed spaces). Students will prove several key results due to Banach and its school. The course also by considers Hilbert spaces and decomposing compact operators acting on them. This course is lecture based, with tutorials every week.
Course Aims: This course aims to develop the ability of the student to write proofs and to manipulate abstract objects.
Course Learning Outcomes: Communicate ideas in functional analysis competently in written form
Use online tools to find information to solve problems in functional analysis
Construct arguments using concepts from a range of different areas of mathematics (e
Understand proofs and adapt them to prove other statements in functional analysis
Assess the appropriate tools to solve varying problems in functional analysis",Functional analysis; Proof construction; Mathematical communication,"Topological vector spaces; Banach spaces; Hilbert spaces; Operator theory; rigorous reasoning and proof techniques
",Topological vector spaces; Banach spaces; Hilbert spaces; Operator theory,Techniques in topological vector spaces; applications of compact operators; integration of online tools in mathematical research.,"This course develops the ability to write proofs and manipulate abstract objects by introducing students to functional analysis, focusing on Banach spaces and Hilbert spaces."
MATH5705,Modern Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5705&activityGroupId=1,"This is a Masters course aimed at students completing a mathematics major or program. It is assumed that students are familiar with single and several variable calculus as taught in first and second year mathematics courses.
The central concepts of calculus are limits and continuity. These concepts can be extended to quite general situations. The simplest of these is when there is some way of measuring the distance between two objects. Some of the most important examples of these “metric spaces” occur as sets of functions, so this course looks at ways in which one might say that a sequence of functions converges. Taking these ideas one step further, we look at convergence which does not come from a generalised distance function. These are the ideas of point set topology. The course includes topics such as countability, continuity, uniform convergence and compactness, as well as normed vector spaces, which are the central object of study in functional analysis.
The course consists of 4 hours of lectures per week and 1 hour of tutorial.","The aim of this course is to introduce the foundations of real analysis, which is a central pillar of modern mathematics. Using concrete analytic examples as motivation, the course will first develop the theory of metric spaces, which form a framework for generalising the notion of distance between points. The course will then take a further step toward abstraction and study topological spaces, which generalise the notion of closeness and convergence. This is not a computational course; throughout the emphasis will be on ideas, concepts, and proofs rather than calculations and formulas.","Apply abstract mathematical theory to concrete problems
Describe and apply definitions, theorems, and concepts of basic mathematical analysis, including the theory of metric, topological, and Banach spaces to basic, as well as some more advanced, problems
Construct rigorous mathematical proofs and use them to solve problems
Communicate mathematical reasoning effectively in writing","Course Description: This is a Masters course aimed at students completing a mathematics major or program. It is assumed that students are familiar with single and several variable calculus as taught in first and second year mathematics courses.
The central concepts of calculus are limits and continuity. These concepts can be extended to quite general situations. The simplest of these is when there is some way of measuring the distance between two objects. Some of the most important examples of these “metric spaces” occur as sets of functions, so this course looks at ways in which one might say that a sequence of functions converges. Taking these ideas one step further, we look at convergence which does not come from a generalised distance function. These are the ideas of point set topology. The course includes topics such as countability, continuity, uniform convergence and compactness, as well as normed vector spaces, which are the central object of study in functional analysis.
The course consists of 4 hours of lectures per week and 1 hour of tutorial.
Course Aims: The aim of this course is to introduce the foundations of real analysis, which is a central pillar of modern mathematics. Using concrete analytic examples as motivation, the course will first develop the theory of metric spaces, which form a framework for generalising the notion of distance between points. The course will then take a further step toward abstraction and study topological spaces, which generalise the notion of closeness and convergence. This is not a computational course; throughout the emphasis will be on ideas, concepts, and proofs rather than calculations and formulas.
Course Learning Outcomes: Apply abstract mathematical theory to concrete problems
Describe and apply definitions, theorems, and concepts of basic mathematical analysis, including the theory of metric, topological, and Banach spaces to basic, as well as some more advanced, problems
Construct rigorous mathematical proofs and use them to solve problems
Communicate mathematical reasoning effectively in writing",Real analysis; Abstract reasoning; Mathematical proof construction,"Real analysis; rigorous reasoning and proof techniques
",Metric spaces; Topological spaces; Normed vector spaces; Continuity and compactness,Foundations of real analysis; application of mathematical theories to concrete problems; rigorous proof methodologies.,"This course develops the foundations of real analysis through abstract mathematical theory, focusing on concepts like limits, continuity, and convergence in metric and topological spaces."
MATH5706,Modern Algebra,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5706&activityGroupId=1,"In Modern Algebra we examine some of the basic notions of modern algebra that arose in the late 19th and early 20th century. The most fundamental notion is that of a group, which is how mathematicians study symmetry. In this course, groups are studied in detail both from an abstract point of view and also to study symmetry in geometry. The other important concept studied is that of a ring. The algebra of adding and multiplying matrices has many similarities with the algebra of numbers. The notion of rings generalises both of these two examples. The course examines factorisation theory for certain rings.
The course is indispensable for all further studies in pure mathematics. All Masters level students of pure mathematics who have not covered this material should complete this course. Knowledge of linear algebra is a prerequisite for this course.
This is a demanding course usually with 4 hours of lectures and another hour for a tutorial each week.","This course introduces the basic axiomatic language and ideas of modern algebra, the two main concepts being that of a group and that of a ring. Groups are the vehicle through which mathematicians study symmetry. The data used to define them involves one algebraic operation, group multiplication. Rings on the other hand have two algebraic operations, addition and multiplication, much as you find with ordinary numbers and historically, number theoretic problems such as Fermat's last theorem were the driving force for their study. The course will not only introduce students to how the abstract notions of groups and rings can be used to study mathematical problems in counting and number theory, but also how it is essential to study them in the abstract via algebraic notions such as homomorphisms and quotient objects.
The aim of this course is to introduce students to the language and concepts of modern algebra. The course includes material essential for all further studies in pure mathematics. Proofs will feature heavily in both classes and assessments, so another aim will be to develop the skill of writing sound mathematical proofs.","Formulate mathematical content logically so that any mathematician reading it can easily verify its veracity
Develop defect-free proofs in algebra
Solve algebra problems using the theory of groups, rings and fields covered in lectures","Course Description: In Modern Algebra we examine some of the basic notions of modern algebra that arose in the late 19th and early 20th century. The most fundamental notion is that of a group, which is how mathematicians study symmetry. In this course, groups are studied in detail both from an abstract point of view and also to study symmetry in geometry. The other important concept studied is that of a ring. The algebra of adding and multiplying matrices has many similarities with the algebra of numbers. The notion of rings generalises both of these two examples. The course examines factorisation theory for certain rings.
The course is indispensable for all further studies in pure mathematics. All Masters level students of pure mathematics who have not covered this material should complete this course. Knowledge of linear algebra is a prerequisite for this course.
This is a demanding course usually with 4 hours of lectures and another hour for a tutorial each week.
Course Aims: This course introduces the basic axiomatic language and ideas of modern algebra, the two main concepts being that of a group and that of a ring. Groups are the vehicle through which mathematicians study symmetry. The data used to define them involves one algebraic operation, group multiplication. Rings on the other hand have two algebraic operations, addition and multiplication, much as you find with ordinary numbers and historically, number theoretic problems such as Fermat's last theorem were the driving force for their study. The course will not only introduce students to how the abstract notions of groups and rings can be used to study mathematical problems in counting and number theory, but also how it is essential to study them in the abstract via algebraic notions such as homomorphisms and quotient objects.
The aim of this course is to introduce students to the language and concepts of modern algebra. The course includes material essential for all further studies in pure mathematics. Proofs will feature heavily in both classes and assessments, so another aim will be to develop the skill of writing sound mathematical proofs.
Course Learning Outcomes: Formulate mathematical content logically so that any mathematician reading it can easily verify its veracity
Develop defect-free proofs in algebra
Solve algebra problems using the theory of groups, rings and fields covered in lectures",Modern algebra; Proof development; Abstract reasoning,"rigorous reasoning and proof techniques; Group theory; Ring Theory
",Group theory; Ring theory; Algebraic structures,Application of groups and rings to mathematical problems; development of rigorous mathematical proofs; essential concepts in modern algebra for advanced studies.,"This course develops students' understanding of modern algebra by examining groups, rings, and their applications to study symmetry and number theory."
MATH5735,Modules and Representation Theory,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5735&activityGroupId=1,"Performing linear algebra over a ring of scalars instead of a field leads to the notion of a module. The theory of modules is surprisingly subtle and has many applications, not only to other parts of mathematics but also to mathematical physics. This course focuses on the theory of modules over principal ideal domains and over semisimple rings. The first has applications to linear algebra. The second has applications to group representations which is essential to the study of symmetry. Topics include modules, modules over a principal ideal domain, group representations.","The aim of this course is to develop key results in the classical theory of representations of finite groups and associated topics in module and ring theory. These results, mostly developed around 1900, have proved foundational for much of later algebra. It follows on from earlier courses in linear algebra and group theory and forms a basis for later graduate-level work in algebra.","Typeset mathematics using the LaTeX document preparation system
Use fundamental concepts in modern algebra to solve concrete mathematical problems
Write clear, concise, and correct mathematical proofs
Communicate mathematics effectively with peers and the instructor, both verbally and in writing","Course Description: Performing linear algebra over a ring of scalars instead of a field leads to the notion of a module. The theory of modules is surprisingly subtle and has many applications, not only to other parts of mathematics but also to mathematical physics. This course focuses on the theory of modules over principal ideal domains and over semisimple rings. The first has applications to linear algebra. The second has applications to group representations which is essential to the study of symmetry. Topics include modules, modules over a principal ideal domain, group representations.
Course Aims: The aim of this course is to develop key results in the classical theory of representations of finite groups and associated topics in module and ring theory. These results, mostly developed around 1900, have proved foundational for much of later algebra. It follows on from earlier courses in linear algebra and group theory and forms a basis for later graduate-level work in algebra.
Course Learning Outcomes: Typeset mathematics using the LaTeX document preparation system
Use fundamental concepts in modern algebra to solve concrete mathematical problems
Write clear, concise, and correct mathematical proofs
Communicate mathematics effectively with peers and the instructor, both verbally and in writing",Module theory; Representation theory; Mathematical communication,Group theory; Ring Theory; modules,Modules over rings; Group representations; Principal ideal domains; Semisimple rings,Advanced algebraic structures and their applications; foundational results in module and ring theory; development and communication of mathematical proofs.,"This course develops key results in module theory over principal ideal domains and semisimple rings, exploring applications to linear algebra and group representations."
MATH5835,Advanced Stochastic Processes,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5835&activityGroupId=1,"This is a Postgraduate level course in Stochastic Processes for students in Mathematics and Statistics. The theory of stochastic processes deals with phenomena evolving randomly in time and/or space, such as prices on financial markets, air temperature or wind velocity, spread of diseases, number of hospital admissions in certain area, and many others. This course introduces some of the basic ideas and tools to study such phenomena. In particular, we will introduce the concept of martingale to study phenomena evolving in discrete time and the concept of Poisson process (and its generalizations) and Brownian Motion to study processes evolving continuously in time. Some applications to statistical inference will also be discussed. The course will also equip you with the foundational knowledge for more advanced courses in the Master of Financial Mathematics program. There will be four hours of lectures and one hour of tutorial/consultation each week.
Pre-requisites: 24 units of level III mathematics (including 6 units in MATH3801 Probability and Stochastic Processes or MATH3901 Higher Probability and Stochastic Processes or an equivalent course) or a degree in a numerate discipline or permission of the Head of Department.","The aim of this course is to introduce some of the foundational ideas and tools of the theory of stochastic processes. The course features the fundamental concepts of measure and probability, integral and expectation, conditional expectation, independence, special dependence structures such as martingales and Markov processes, and some basic continuous processes such as Poisson processes and Brownian motion. In addition to familiarise students with the basic types of stochastic processes often encountered in application, the course also intends to equip the students with a level of mathematical maturity needed for the more advanced courses in the Master of Financial Mathematics.","Identify appropriate stochastic process model(s
Provide logical and coherent proofs of important theoretic results
Define the properties of various stochastic process models and related random elements
State the most rudimentary concepts and theorems of measure-theoretic probability theory
Apply the theory of stochastic processes to model real phenomena and answer some questions in applied sciences","Course Description: This is a Postgraduate level course in Stochastic Processes for students in Mathematics and Statistics. The theory of stochastic processes deals with phenomena evolving randomly in time and/or space, such as prices on financial markets, air temperature or wind velocity, spread of diseases, number of hospital admissions in certain area, and many others. This course introduces some of the basic ideas and tools to study such phenomena. In particular, we will introduce the concept of martingale to study phenomena evolving in discrete time and the concept of Poisson process (and its generalizations) and Brownian Motion to study processes evolving continuously in time. Some applications to statistical inference will also be discussed. The course will also equip you with the foundational knowledge for more advanced courses in the Master of Financial Mathematics program. There will be four hours of lectures and one hour of tutorial/consultation each week.
Pre-requisites: 24 units of level III mathematics (including 6 units in MATH3801 Probability and Stochastic Processes or MATH3901 Higher Probability and Stochastic Processes or an equivalent course) or a degree in a numerate discipline or permission of the Head of Department.
Course Aims: The aim of this course is to introduce some of the foundational ideas and tools of the theory of stochastic processes. The course features the fundamental concepts of measure and probability, integral and expectation, conditional expectation, independence, special dependence structures such as martingales and Markov processes, and some basic continuous processes such as Poisson processes and Brownian motion. In addition to familiarise students with the basic types of stochastic processes often encountered in application, the course also intends to equip the students with a level of mathematical maturity needed for the more advanced courses in the Master of Financial Mathematics.
Course Learning Outcomes: Identify appropriate stochastic process model(s
Provide logical and coherent proofs of important theoretic results
Define the properties of various stochastic process models and related random elements
State the most rudimentary concepts and theorems of measure-theoretic probability theory
Apply the theory of stochastic processes to model real phenomena and answer some questions in applied sciences",Stochastics processes; Theoretical and applied statistics,Stochastic processes; Martingales; Poisson processes; Brownian motion; Measure-theoretic probability,Martingales; Poisson processes; Brownian motion; Measure-theoretic probability,Fundamental principles of stochastic processes; modeling of random phenomena evolving over time; foundational tools for advanced financial mathematics studies.,"This course introduces students to the foundational ideas and tools of stochastic processes, providing knowledge on martingales, Poisson processes, Brownian motion, and more."
MATH5845,Time Series,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5845&activityGroupId=1,"The course is concerned with the theory and application of appropriate statistical techniques for analysis of time series data -- data collected over time. Through a series of lectures, the course will help students develop a sound understanding of stationary and non-stationary time series models and their properties in discrete time. The topics include the theory of stationary time series; methods for trend and seasonal analysis and adjustment; modelling and forecasting with autoregressive moving average processes; modelling the impact of exogenous or intervention variables on responses; models for stochastic volatility and long-term dependence; regression models for time series. Applications are primarily drawn from finance and public health and the R software environment is used to perform appropriate analyses for numerical examples.","The aim of the course is to provide the theory and application of appropriate statistical techniques for analysis of time series data, data that is collected over time. The teaching material and activities will help students develop a sound understanding of time series methods and their applications along with capability to perform appropriate analysis and interpret the results. The knowledge from this course will contribute to the design and analysis of research in the different areas, such as economics and environmental science.","Understand the properties of the major types of time series observed in discrete time
Estimate the time series models using different methods
Apply diagnostic checking for the adequacy of the fit of a model
Perform linear prediction for a range of time series models
Identify appropriate models for time series
Generate, interpret and explain R software output appropriate for time series identification, modeling and forecasting","Course Description: The course is concerned with the theory and application of appropriate statistical techniques for analysis of time series data -- data collected over time. Through a series of lectures, the course will help students develop a sound understanding of stationary and non-stationary time series models and their properties in discrete time. The topics include the theory of stationary time series; methods for trend and seasonal analysis and adjustment; modelling and forecasting with autoregressive moving average processes; modelling the impact of exogenous or intervention variables on responses; models for stochastic volatility and long-term dependence; regression models for time series. Applications are primarily drawn from finance and public health and the R software environment is used to perform appropriate analyses for numerical examples.
Course Aims: The aim of the course is to provide the theory and application of appropriate statistical techniques for analysis of time series data, data that is collected over time. The teaching material and activities will help students develop a sound understanding of time series methods and their applications along with capability to perform appropriate analysis and interpret the results. The knowledge from this course will contribute to the design and analysis of research in the different areas, such as economics and environmental science.
Course Learning Outcomes: Understand the properties of the major types of time series observed in discrete time
Estimate the time series models using different methods
Apply diagnostic checking for the adequacy of the fit of a model
Perform linear prediction for a range of time series models
Identify appropriate models for time series
Generate, interpret and explain R software output appropriate for time series identification, modeling and forecasting",Time series analysis; Statistical modeling; Data interpretation,"Time series analysis; Statistical modeling; data management and interpretation
",Stationary and non-stationary models; Autoregressive moving average processes; Regression models for time series,Theory of time series analysis; application of time series in finance and public health; use of R for statistical analysis; interpretation of statistical outputs; model adequacy testing,"This course applies statistical techniques to analyze time series data, enabling students to understand properties, estimate models, perform diagnostics, and generate forecasts."
MATH5846,Introduction to Probability and Stochastic Processes,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1A&deliveryLocation=Kensington&courseCode=MATH5846&activityGroupId=1,"This course covers probabilistic concepts which are necessary to study various complex phenomena arising in Engineering, Biology, Medicine and Economics. This course introduces basic concepts which are needed to analyse different phenomena. In particular, we discuss the concepts of random events, random variables, structures of dependence, computation of probabilities using the Central Limit Theorem, simple Markov chains, and Brownian motion. This course consists of two 3-hour lectures per week where the course convenor will go through key concepts and exercises with the students. Due to the intensity of the course, students are expected to go through the material before attending lectures.","The aim of this course is to introduce the main probabilistic concepts which are necessary to study various complex phenomena arising in Engineering, Biology, Medicine and Economics. A basic introduction to stochastic processes will also be covered. This knowledge will lay the foundation for further studies in statistics.","Apply principles of Markov Chains and Brownian motion to practical and theoretical problems
Use key theoretical tools to explore properties of random variables
Apply the principles of probability to practical and theoretical problems
Derive fundamental results in the theory of probability and random variables","Course Description: This course covers probabilistic concepts which are necessary to study various complex phenomena arising in Engineering, Biology, Medicine and Economics. This course introduces basic concepts which are needed to analyse different phenomena. In particular, we discuss the concepts of random events, random variables, structures of dependence, computation of probabilities using the Central Limit Theorem, simple Markov chains, and Brownian motion. This course consists of two 3-hour lectures per week where the course convenor will go through key concepts and exercises with the students. Due to the intensity of the course, students are expected to go through the material before attending lectures.
Course Aims: The aim of this course is to introduce the main probabilistic concepts which are necessary to study various complex phenomena arising in Engineering, Biology, Medicine and Economics. A basic introduction to stochastic processes will also be covered. This knowledge will lay the foundation for further studies in statistics.
Course Learning Outcomes: Apply principles of Markov Chains and Brownian motion to practical and theoretical problems
Use key theoretical tools to explore properties of random variables
Apply the principles of probability to practical and theoretical problems
Derive fundamental results in the theory of probability and random variables",Probability theory; Stochastic processes; Theoretical and applied statistics,Probability theory; Stochastic processes,Random variables; Markov chains; Brownian motion; Central Limit Theorem,principles of probability; fundamental results in probability theory; properties exploration of random variables,"This course introduces and applies probabilistic concepts, covering topics like random events, variables, dependence structures, and stochastic processes to analyze complex phenomena."
MATH5856,Introduction to Statistics and Statistical Computations,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1B&deliveryLocation=Kensington&courseCode=MATH5856&activityGroupId=1,"The aim of this course is to learn about the basic principles of statistical reasoning, the most important methods for estimating unknown parameters of a system and for taking decisions without complete information, and the use of statistical packages. The methods discussed are for visualising data, for simulating random phenomena, for estimating parameters using Maximum Likelihood and Least Squares estimators, and for testing hypotheses. General Linear Models will be studied using R.","The aim of this course is to provide students with general understanding of statistical theory and application. At the end of the course, students are expected to be familiar with undergraduate level statistical methods, and be proficient in the usage of the statistical programming language R.","Use terminology and reporting styles appropriately and successfully to communicate information and understanding
Have working knowledge of appropriate theorems
Apply the concepts discussed in MATH5856 to solve appropriate problems
Describe the output of statistical software and interpret the results
Correctly state definitions introduced in the lecture notes
Be able to code simple programs in R","Course Description: The aim of this course is to learn about the basic principles of statistical reasoning, the most important methods for estimating unknown parameters of a system and for taking decisions without complete information, and the use of statistical packages. The methods discussed are for visualising data, for simulating random phenomena, for estimating parameters using Maximum Likelihood and Least Squares estimators, and for testing hypotheses. General Linear Models will be studied using R.
Course Aims: The aim of this course is to provide students with general understanding of statistical theory and application. At the end of the course, students are expected to be familiar with undergraduate level statistical methods, and be proficient in the usage of the statistical programming language R.
Course Learning Outcomes: Use terminology and reporting styles appropriately and successfully to communicate information and understanding
Have working knowledge of appropriate theorems
Apply the concepts discussed in MATH5856 to solve appropriate problems
Describe the output of statistical software and interpret the results
Correctly state definitions introduced in the lecture notes
Be able to code simple programs in R",Statistical analysis; Statistical programming; Data visualization,Statistical analysis; R; Data visualization,Maximum Likelihood Estimation; Least Squares Estimation; General Linear Models; Hypothesis testing,Basic principles of statistics; Maximum Likelihood Estimation; Least Squares Estimation; general linear models; usage of R software,"This course teaches students to apply statistical reasoning, methods, and tools to analyze data, make decisions, and communicate findings effectively."
MATH5885,Longitudinal Data Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH5885&activityGroupId=1,"This course focuses on modelling response profiles over time, whilst accounting for the correlation that will typically exist between measurements taken on the same individual and the variability between individual response profiles. MATH5885 brings together multivariate regression modelling, time series modelling and random effects modelling for continuous and discrete valued response measurements and aims to enhance a student’s capacity to analyze and understand large, complex data sets. The focus will be on applications to biomedical studies, but the ideas have a wider application, for example, to panel studies that arise in market research and social surveys.","This course aims to introduce the main statistical concepts, methods, and models used in the analysis of longitudinal data. The content and activities in the course will contribute to future learning of strategies to deal with practical scenarios where multiple measurements of response are collected over time for each individual in a study resulting in large and complex data sets. The models discussed combine temporal correlation models for equally and unequally spaced observations through time with random effects models for between individual variations.","Learn the key features of longitudinal data and the ability to use longitudinal data analysis techniques
Use linear models when incorporating correlated errors to analyze longitudinal data
Distinguish between a ""subject-specific"" and ""population-average"" interpretation of parameters
Use marginal models to analyze non-normal longitudinal data via generalized estimating equations
Explain the distinct types of correlation that can occur in longitudinal data and choose appropriate models for correlation structures in given datasets
Use the R software to fit the models studied, visualize patterns, and interpret the output
Derive the likelihoods for correlated data and use them to calculate maximum likelihood estimates
Use the linear mixed effects models for analyzing continuous longitudinal data and show how this extends to generalized linear mixed effects models for analyzing non-normal longitudinal data","Course Description: This course focuses on modelling response profiles over time, whilst accounting for the correlation that will typically exist between measurements taken on the same individual and the variability between individual response profiles. MATH5885 brings together multivariate regression modelling, time series modelling and random effects modelling for continuous and discrete valued response measurements and aims to enhance a student’s capacity to analyze and understand large, complex data sets. The focus will be on applications to biomedical studies, but the ideas have a wider application, for example, to panel studies that arise in market research and social surveys.
Course Aims: This course aims to introduce the main statistical concepts, methods, and models used in the analysis of longitudinal data. The content and activities in the course will contribute to future learning of strategies to deal with practical scenarios where multiple measurements of response are collected over time for each individual in a study resulting in large and complex data sets. The models discussed combine temporal correlation models for equally and unequally spaced observations through time with random effects models for between individual variations.
Course Learning Outcomes: Learn the key features of longitudinal data and the ability to use longitudinal data analysis techniques
Use linear models when incorporating correlated errors to analyze longitudinal data
Distinguish between a ""subject-specific"" and ""population-average"" interpretation of parameters
Use marginal models to analyze non-normal longitudinal data via generalized estimating equations
Explain the distinct types of correlation that can occur in longitudinal data and choose appropriate models for correlation structures in given datasets
Use the R software to fit the models studied, visualize patterns, and interpret the output
Derive the likelihoods for correlated data and use them to calculate maximum likelihood estimates
Use the linear mixed effects models for analyzing continuous longitudinal data and show how this extends to generalized linear mixed effects models for analyzing non-normal longitudinal data",Longitudinal data analysis; Statistical modeling; Data interpretation,Longitudinal data analysis; Statistical modeling; data management and interpretation,Multivariate regression; Time series; Random effects models; Generalized estimating equations,Statistical methods for longitudinal data; correlation structures analysis; marginal and mixed effects modeling; interpretation of statistical models; computational techniques in R,"This course explores analyzing complex data sets by modeling response profiles over time, accounting for correlations between measurements and individual variations."
MATH5901,Stochastic Processes,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5901&activityGroupId=1,"This is an advanced level postgraduate course in probability theory and stochastic processes for mathematics/statistics and data science students. Topics covered include rigorous definition of probability and random variables; convergence of random variables; Poisson and Wiener process, and Ito Calculus.","The course aims to impart analytical skills that will allow students to prove rigorously the basic properties of stochastic processes such as the Wiener process and Ito integral. Student will be expected to understand the properties and subtleties of numerous random objects, allowing them to simulate these on a computer and draw appropriate conclusions.","Identify appropriate stochastic process model(s
State the defining properties of various stochastic process models and related random objects
Provide logical and coherent proofs of fundamental results in the theory of stochastic processes","Course Description: This is an advanced level postgraduate course in probability theory and stochastic processes for mathematics/statistics and data science students. Topics covered include rigorous definition of probability and random variables; convergence of random variables; Poisson and Wiener process, and Ito Calculus.
Course Aims: The course aims to impart analytical skills that will allow students to prove rigorously the basic properties of stochastic processes such as the Wiener process and Ito integral. Student will be expected to understand the properties and subtleties of numerous random objects, allowing them to simulate these on a computer and draw appropriate conclusions.
Course Learning Outcomes: Identify appropriate stochastic process model(s
State the defining properties of various stochastic process models and related random objects
Provide logical and coherent proofs of fundamental results in the theory of stochastic processes",Advanced probability; Stochastic processes; Theoretical proofs,"probability theory; Stochastic processes; rigorous reasoning and proof techniques
",Probability theory; Poisson process; Wiener process; Ito Calculus,Understanding and application of stochastic process models; rigorous proof techniques in stochastic processes; simulation of random processes and analysis of their properties; foundational principles of stochastic processes,"This course develops analytical skills in probability theory and stochastic processes, enabling students to rigorously prove properties of stochastic processes and simulate random objects on a computer."
MATH5905,Statistical Inference,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5905&activityGroupId=1,"This postgraduate course presents general inference theory based on maximum likelihood and on Bayes methods. Estimation, confidence set construction, and hypothesis testing are discussed within decision-theoretic framework. Computationally intensive methods such as bootstrap are also discussed and are compared to asymptotic approximations such as saddlepoint and empirical likelihood. Pre-requisites: 24 units of Level 3 mathematics or a degree in numerate discipline or permission of the Head of Department.","The aim of the course is to introduce the main ideas and principles behind parametric and non-parametric inference procedures. Both frequentist and Bayesian perspectives will be discussed. Estimation, confidence set construction, and hypothesis testing are discussed within the decision-theoretic framework. Both finite sample optimality and asymptotic optimality will be defined and discussed. Computationally intensive methods such as bootstrap are discussed and are compared to asymptotic approximations such as: Edgeworth expansions and the saddlepoint method. Students will learn how to determine appropriate inference procedures and to draw inferences using the chosen procedure. Time permitting, applications in Statistical Financial Engineering will also be discussed.","Use computer packages to generate output for common Inference procedures and for computer-intensive calculations such as bootstrapping and robust estimation
Apply the parametric and non-parametric delta method, asymptotic normality, Edgeworth expansions and saddlepoint method to solve appropriate problems
Apply concepts of finite-sample and asymptotic efficiency of inference procedure to appropriate problems
Use parametric, nonparametric, Bayes and robust inference methods
Estimate key population parameters of interest, test hypotheses about them and construct confidence regions
Explain how statistical inference arises from the first principles of probability theory
Apply the fundamental principles of inference: sufficiency, likelihood, ancillarity, and equivariance","Course Description: This postgraduate course presents general inference theory based on maximum likelihood and on Bayes methods. Estimation, confidence set construction, and hypothesis testing are discussed within decision-theoretic framework. Computationally intensive methods such as bootstrap are also discussed and are compared to asymptotic approximations such as saddlepoint and empirical likelihood. Pre-requisites: 24 units of Level 3 mathematics or a degree in numerate discipline or permission of the Head of Department.
Course Aims: The aim of the course is to introduce the main ideas and principles behind parametric and non-parametric inference procedures. Both frequentist and Bayesian perspectives will be discussed. Estimation, confidence set construction, and hypothesis testing are discussed within the decision-theoretic framework. Both finite sample optimality and asymptotic optimality will be defined and discussed. Computationally intensive methods such as bootstrap are discussed and are compared to asymptotic approximations such as: Edgeworth expansions and the saddlepoint method. Students will learn how to determine appropriate inference procedures and to draw inferences using the chosen procedure. Time permitting, applications in Statistical Financial Engineering will also be discussed.
Course Learning Outcomes: Use computer packages to generate output for common Inference procedures and for computer-intensive calculations such as bootstrapping and robust estimation
Apply the parametric and non-parametric delta method, asymptotic normality, Edgeworth expansions and saddlepoint method to solve appropriate problems
Apply concepts of finite-sample and asymptotic efficiency of inference procedure to appropriate problems
Use parametric, nonparametric, Bayes and robust inference methods
Estimate key population parameters of interest, test hypotheses about them and construct confidence regions
Explain how statistical inference arises from the first principles of probability theory
Apply the fundamental principles of inference: sufficiency, likelihood, ancillarity, and equivariance",Statistical inference; Bayesian methods; Computational statistics,Statistical inference; Bayesian statistics; numerical methods,Maximum likelihood estimation; Bayesian inference; Bootstrap methods; Asymptotic approximations,Parametric and non-parametric inference; bootstrap methods; asymptotic approximations; saddlepoint and empirical likelihood methods; concepts of finite-sample and asymptotic efficiency,"This course develops parametric and non-parametric inference procedures, introducing students to frequentist and Bayesian perspectives on estimation, hypothesis testing, and confidence set construction."
MATH5916,Survival Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5916&activityGroupId=1,"Survival analysis is the analysis of data representing the time to occurrence of a certain event or endpoint (time-to-event data). This course introduces the special features of time-to-event data and explores methods and models available to deal with them. Extensive use will be made of the computer methods in analysing real datasets. The course material will be delivered through lectures and computer labs.
Pre-requisites: 24 units of level III mathematics or a degree in a numerate discipline or permission of the Head of Department.","The aim of this course is to introduce the main statistical concepts, methods and models used in the analysis of survival data. These methods are essential for students who will analyse time-to-event data common in medical, business and engineering applications.","Use common R packages and functions for the processing and analysis of survival data
Understand and apply the Cox proportional hazards model to examine the effect of covariates on survival including the use of time-dependent covariates
Understand the counting process formulation for survival data to calculate residuals and influence for survival models including assessing the proportional hazards assumption
Understand the key features of survival data including censoring, truncation, hazard, and frailty
Understand and apply parametric and non-parametric inference techniques for the analysis of survival data
Solve theoretical statistical problems related to the analysis of survival data","Course Description: Survival analysis is the analysis of data representing the time to occurrence of a certain event or endpoint (time-to-event data). This course introduces the special features of time-to-event data and explores methods and models available to deal with them. Extensive use will be made of the computer methods in analysing real datasets. The course material will be delivered through lectures and computer labs.
Pre-requisites: 24 units of level III mathematics or a degree in a numerate discipline or permission of the Head of Department.
Course Aims: The aim of this course is to introduce the main statistical concepts, methods and models used in the analysis of survival data. These methods are essential for students who will analyse time-to-event data common in medical, business and engineering applications.
Course Learning Outcomes: Use common R packages and functions for the processing and analysis of survival data
Understand and apply the Cox proportional hazards model to examine the effect of covariates on survival including the use of time-dependent covariates
Understand the counting process formulation for survival data to calculate residuals and influence for survival models including assessing the proportional hazards assumption
Understand the key features of survival data including censoring, truncation, hazard, and frailty
Understand and apply parametric and non-parametric inference techniques for the analysis of survival data
Solve theoretical statistical problems related to the analysis of survival data",Survival analysis; Statistical modeling; Data interpretation,Survival analysis; Statistical modeling; data management and interpretation,Cox proportional hazards model; Censoring and truncation; Hazard models; Frailty models,"Survival data characteristics (censoring, hazard rates); Cox model and its applications; parametric versus non-parametric methods; statistical computing for survival analysis; evaluation of survival models using residuals and influence measures","This course teaches students to analyze time-to-event data using various methods and models, including the Cox proportional hazards model and counting process formulation."
MATH5965,Discrete Time Financial Modelling,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5965&activityGroupId=1,"The course provides an overview of the most important classes of financial contracts traded on over-the-counter exchanges between financial institutions and their clients in discrete time. The option of European and American style, futures contracts and forward contracts is also discussed. The basic ideas of arbitrage pricing are studied in the classical Cox-Ross-Rubinstein binominal model of stock price.
Subsequently, the valuation and hedging of European and American options and general contingent claims are established. The proofs of the fundamental theorems of asset pricing for finite models of security markets which is central to the modern theory of derivative pricing are given.",The course aims to provide an overview of the essential concepts of financial contracts traded on exchanges or over the counter between financial institutions and their clients in discrete time.,"Solve practical problems to understand the usefulness of probability and stochastic analysis in a professional setting
Identify and apply which procedures are appropriate for a given financial problem
Apply probability theory and stochastic analysis to practical problems
Communicate mathematics and statistics effectively in written and oral forms","Course Description: The course provides an overview of the most important classes of financial contracts traded on over-the-counter exchanges between financial institutions and their clients in discrete time. The option of European and American style, futures contracts and forward contracts is also discussed. The basic ideas of arbitrage pricing are studied in the classical Cox-Ross-Rubinstein binominal model of stock price.
Subsequently, the valuation and hedging of European and American options and general contingent claims are established. The proofs of the fundamental theorems of asset pricing for finite models of security markets which is central to the modern theory of derivative pricing are given.
Course Aims: The course aims to provide an overview of the essential concepts of financial contracts traded on exchanges or over the counter between financial institutions and their clients in discrete time.
Course Learning Outcomes: Solve practical problems to understand the usefulness of probability and stochastic analysis in a professional setting
Identify and apply which procedures are appropriate for a given financial problem
Apply probability theory and stochastic analysis to practical problems
Communicate mathematics and statistics effectively in written and oral forms",Financial mathematics; Derivative pricing; Stochastic analysis,"Financial modeling; Derivative pricing; Stochastic modeling
",Arbitrage pricing; Cox-Ross-Rubinstein model; European and American options; Fundamental theorems of asset pricing,European and American options; futures and forward contracts; fundamental theorems of asset pricing; valuation techniques for contingent claims; proof techniques in finance,"This course examines the valuation and hedging of financial contracts, including options and contingent claims, using probability and stochastic analysis."
MATH5975,Introduction to Stochastic Analysis,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=MATH5975&activityGroupId=1,"Modern theory of financial markets relies on advanced mathematical statistical methods that are used to model, forecast and manage risk in complex financial transactions. After the publication in 1973 of the ground-breaking paper of Black and Scholes on the arbitrage pricing of European call options, Stochastic Analysis became an indispensable tool for the theory of financial markets, derivation of prices of standard and exotic options and other derivative securities, hedging-related financial risk, as well as managing the interest rate risk. This is a postgraduate level course in which you will learn the basic concepts and techniques of Stochastic Analysis, such as Brownian motion, Ito stochastic integral, Ito's formula, changes of measures, stochastic differential equations and their relations to second-order partial differential equations, and Feynman-Kac formula. The course has only a lecture component. Pre-requisites: 24 units of level III mathematics or a degree in a numerate discipline or permission of the Head of Department.","The aim of this course is to introduce the mathematics required to understand the modern theory of financial markets. The modern theory of financial markets relies on advanced mathematical and statistical methods that are used to model, forecast, and manage risk in complex financial transactions.
The course consists of theorems and proofs. The main goal of the course is to provide the necessary mathematical background for MATH5816 Continuous Time Financial Modelling and MATH5985 Term Structure Modelling, rather than to focus directly on financial concepts.","Explain the usefulness of probability and stochastic analysis in a professional setting
Communicate mathematics effectively in a written form
Apply probability theory and stochastic analysis to practical problems
Identify which analysis procedure is appropriate for a given research problem","Course Description: Modern theory of financial markets relies on advanced mathematical statistical methods that are used to model, forecast and manage risk in complex financial transactions. After the publication in 1973 of the ground-breaking paper of Black and Scholes on the arbitrage pricing of European call options, Stochastic Analysis became an indispensable tool for the theory of financial markets, derivation of prices of standard and exotic options and other derivative securities, hedging-related financial risk, as well as managing the interest rate risk. This is a postgraduate level course in which you will learn the basic concepts and techniques of Stochastic Analysis, such as Brownian motion, Ito stochastic integral, Ito's formula, changes of measures, stochastic differential equations and their relations to second-order partial differential equations, and Feynman-Kac formula. The course has only a lecture component. Pre-requisites: 24 units of level III mathematics or a degree in a numerate discipline or permission of the Head of Department.
Course Aims: The aim of this course is to introduce the mathematics required to understand the modern theory of financial markets. The modern theory of financial markets relies on advanced mathematical and statistical methods that are used to model, forecast, and manage risk in complex financial transactions.
The course consists of theorems and proofs. The main goal of the course is to provide the necessary mathematical background for MATH5816 Continuous Time Financial Modelling and MATH5985 Term Structure Modelling, rather than to focus directly on financial concepts.
Course Learning Outcomes: Explain the usefulness of probability and stochastic analysis in a professional setting
Communicate mathematics effectively in a written form
Apply probability theory and stochastic analysis to practical problems
Identify which analysis procedure is appropriate for a given research problem",Stochastic analysis; Financial modeling; Risk management,Stochastic modeling; Financial modeling; Risk management,Brownian motion; Ito's lemma; Stochastic differential equations; Feynman-Kac formula,Stochastic processes in finance; mathematical proofs and theorems; application of stochastic methods to financial markets; advanced statistical modeling in finance,"This course applies mathematical statistical methods to model, forecast, and manage financial risk through introduction to basic concepts and techniques of Stochastic Analysis."
MATH6781,Biomathematics,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%202&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T2&deliveryLocation=Kensington&courseCode=MATH6781&activityGroupId=1,"This course introduces mathematical modelling and data analysis for biological and biomedical systems. The course is suitable for students with an interest in the real-world application of differential equation modelling. Examples of the biological systems studied in the course include: population dynamics, the spread of infectious diseases, drug delivery and metabolism, biochemical reactions, the formation of animal coat patterns, and the growth of tumours. The emphasis in this course is on the development of the governing model equations, and on the analysis and interpretation of the model solutions. Methods for computer simulation of the model equations will be demonstrated but students’ knowledge of these methods will not be assessed in the course.In addition to lectures, the course will feature tutorials and workshops. Weekly tutorials require the class to solve a series of mathematical problems that build upon the lecture material. Workshops (several during the course) further consolidate the lecture material as the class makes use of modelling, analysis and computer simulations to perform in-depth studies of particular biological applications. Assumed Knowledge:Completion of two years of an undergraduate degree in mathematics or statistics.","The aim of this course is to introduce students to the broad field of Biomathematics, with particular emphasis on differential equation modelling of biological and biomedical systems. The course aims to provide knowledge on the development, solution and analysis of different types of differential equation models. The ability to interpret the solutions and analyses of these models in the context of the relevant biological systems is a key focus of student learning. The skills in modelling, analysis and enquiry developed during this course will be useful for all future endeavours in applied mathematics and science.","Derive or explain partial differential equation models for the time-dependent dynamics of structured populations and the spatio-temporal dynamics of biological diffusion and transport, and analyse and interpret the solutions of such models
Communicate discipline specific information in written form with appropriate referencing
Derive or explain ordinary differential equation models for the time-dependent dynamics of populations, epidemics, drug metabolism and chemical reactions, and analyse and interpret the solutions of such models
Mathematically analyse ordinary differential equation models of biological systems by identifying steady states, their stability, and any bifurcations that occur as a parameter is varied","Course Description: This course introduces mathematical modelling and data analysis for biological and biomedical systems. The course is suitable for students with an interest in the real-world application of differential equation modelling. Examples of the biological systems studied in the course include: population dynamics, the spread of infectious diseases, drug delivery and metabolism, biochemical reactions, the formation of animal coat patterns, and the growth of tumours. The emphasis in this course is on the development of the governing model equations, and on the analysis and interpretation of the model solutions. Methods for computer simulation of the model equations will be demonstrated but students’ knowledge of these methods will not be assessed in the course.In addition to lectures, the course will feature tutorials and workshops. Weekly tutorials require the class to solve a series of mathematical problems that build upon the lecture material. Workshops (several during the course) further consolidate the lecture material as the class makes use of modelling, analysis and computer simulations to perform in-depth studies of particular biological applications. Assumed Knowledge:Completion of two years of an undergraduate degree in mathematics or statistics.
Course Aims: The aim of this course is to introduce students to the broad field of Biomathematics, with particular emphasis on differential equation modelling of biological and biomedical systems. The course aims to provide knowledge on the development, solution and analysis of different types of differential equation models. The ability to interpret the solutions and analyses of these models in the context of the relevant biological systems is a key focus of student learning. The skills in modelling, analysis and enquiry developed during this course will be useful for all future endeavours in applied mathematics and science.
Course Learning Outcomes: Derive or explain partial differential equation models for the time-dependent dynamics of structured populations and the spatio-temporal dynamics of biological diffusion and transport, and analyse and interpret the solutions of such models
Communicate discipline specific information in written form with appropriate referencing
Derive or explain ordinary differential equation models for the time-dependent dynamics of populations, epidemics, drug metabolism and chemical reactions, and analyse and interpret the solutions of such models
Mathematically analyse ordinary differential equation models of biological systems by identifying steady states, their stability, and any bifurcations that occur as a parameter is varied",Mathematical modeling; Differential equations; Data analysis,"Population dynamics; Infectious disease modeling; Drug metabolism; Biochemical reactions; Ordinary differential equations;  Partial differential equations
",Population dynamics; Infectious disease modeling; Drug metabolism; Biochemical reactions,Partial differential equations (PDEs); ordinary differential equations (ODEs); stability analysis; bifurcation analysis; mathematical modeling in biology and medicine,"This course develops mathematical modelling skills for biological and biomedical systems through differential equation analysis, interpretation, and simulation."
SENG2021,Requirements and Design Workshop,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=SENG2021&activityGroupId=1,"This course is the first of the workshops series that are a key feature of the Software Engineering degree. These workshops are designed to teach students to work in teams (or groups) using agile methods and apply their theoretical knowledge to solve real-life problems. Building on foundational Software Engineering principles of first year core course COMP1531, this workshop focuses on the processes of designing and building components (APIs) of a large software application.
This workshop will offer students the opportunity to get practical experience on the activities of analysing software requirements and producing design artifacts as well as use collaborative techniques and tools to support these processes. In addition, it aims to provide students with teamwork skills and software design techniques that an engineer would use in the development process. The students will also be getting experience on different aspects of designing and developing an API microservice and a web-based application. The requirements for this course have been determined in collaboration with industry partners and will relate to developing a realistic application. The course has a number of industry sponsors that include Nine and Macquarie Bank.","SENG2021 is the first Software Engineering-specific workshop that builds on the foundation of COMP1531, and where we begin to answer the question ""What does it mean to be a Software Engineer?"". A critical element of the workshop is to provide teams of students with industry-proven collaborative software development tools from Atlassian (Jira and Confluence) to help them apply agile methods in practice. The students will also get experience in project management with the development of project plans, brainstorming, requirement documents, prototyping techniques, issues and tasks management and peer reviews. Throughout a realistic business application in the area of e-invoicing, they will learn about the processes of converting requirements to design artifacts in a realistic context and acquire practical design skills, particularly in architectural design and software component integration using APIs.","Explain the principles and processes involved in the software development life cycle
Contribute to system documentation for a software product
Understand and apply the principles of project management in a dynamic software development environment
Understand stack-based software architecture and acquire skills in full-stack design and construction
Synthesise and interpret requirements to create tangible architectural and technical designs in a team-based dynamic development environment
Build software systems using appropriate languages, libraries and frameworks","Course Description: This course is the first of the workshops series that are a key feature of the Software Engineering degree. These workshops are designed to teach students to work in teams (or groups) using agile methods and apply their theoretical knowledge to solve real-life problems. Building on foundational Software Engineering principles of first year core course COMP1531, this workshop focuses on the processes of designing and building components (APIs) of a large software application.
This workshop will offer students the opportunity to get practical experience on the activities of analysing software requirements and producing design artifacts as well as use collaborative techniques and tools to support these processes. In addition, it aims to provide students with teamwork skills and software design techniques that an engineer would use in the development process. The students will also be getting experience on different aspects of designing and developing an API microservice and a web-based application. The requirements for this course have been determined in collaboration with industry partners and will relate to developing a realistic application. The course has a number of industry sponsors that include Nine and Macquarie Bank.
Course Aims: SENG2021 is the first Software Engineering-specific workshop that builds on the foundation of COMP1531, and where we begin to answer the question ""What does it mean to be a Software Engineer?"". A critical element of the workshop is to provide teams of students with industry-proven collaborative software development tools from Atlassian (Jira and Confluence) to help them apply agile methods in practice. The students will also get experience in project management with the development of project plans, brainstorming, requirement documents, prototyping techniques, issues and tasks management and peer reviews. Throughout a realistic business application in the area of e-invoicing, they will learn about the processes of converting requirements to design artifacts in a realistic context and acquire practical design skills, particularly in architectural design and software component integration using APIs.
Course Learning Outcomes: Explain the principles and processes involved in the software development life cycle
Contribute to system documentation for a software product
Understand and apply the principles of project management in a dynamic software development environment
Understand stack-based software architecture and acquire skills in full-stack design and construction
Synthesise and interpret requirements to create tangible architectural and technical designs in a team-based dynamic development environment
Build software systems using appropriate languages, libraries and frameworks",Software development; Agile methodologies; Project management,"agile software development; Project management; API Development: RESTful, GraphQL APIs; API Integration; font-end; back-end; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB


",API design and development; Full-stack software architecture; Software lifecycle management,"Software development life cycle (SDLC); architectural and technical design; collaborative software development tools (e.g., Jira, Confluence); requirements analysis and design artifact creation","This course prepares students to work in teams, applying agile methods to develop realistic software applications by designing and building API components."
SENG2991,Software Workplace Practice 1,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=SENG2991&activityGroupId=1,This course provides scholars with a practical application of the fundamental principles of software engineering in an industry environment.,"This course is the first of three fully assessable Industry Placement courses. Students complete this course as part of their Bachelor of Engineering(Hons) (Software) degree. This course allows students to start to develop their capabilities to work as effective Software Engineers. It is only available to students who have an approved position in a relevant workplace.
A key aim in this course is to develop students’ lifelong reflection skills. The most realistic experiences on which to reflect generally occur in the workplace. The documentation of reflective activity may include:

Records of learning
Reflective records
Personal development portfolios
Critical incident diaries

This course helps students develop reflective practices to prepare them for reflective activities in professional practice. This course is designed:

to start to develop professional skills in software engineering students.
to provide an understanding of the role of Software Engineers in supporting business operations.
to refine the ability to ‘learn from experience’ through personal reflection and analysis of their IT1 experiences.
to refine the ability to learn through collaborative reflective learning (i.e. via peer exchange of IT1 experiences).","explain the role of Requirements and Design Fundamental Concepts and Processes in an industry context
describe how people are managed using collaboration tools to support complex software development activities
work effectively in an “agile team” in the workplace
describe the different phases of the software engineering cycle (requirements, design, implementation and testing
explain the nature of developing a complex software system in which stakeholders from multiple application domains are involved","Course Description: This course provides scholars with a practical application of the fundamental principles of software engineering in an industry environment.
Course Aims: This course is the first of three fully assessable Industry Placement courses. Students complete this course as part of their Bachelor of Engineering(Hons) (Software) degree. This course allows students to start to develop their capabilities to work as effective Software Engineers. It is only available to students who have an approved position in a relevant workplace.
A key aim in this course is to develop students’ lifelong reflection skills. The most realistic experiences on which to reflect generally occur in the workplace. The documentation of reflective activity may include:

Records of learning
Reflective records
Personal development portfolios
Critical incident diaries

This course helps students develop reflective practices to prepare them for reflective activities in professional practice. This course is designed:

to start to develop professional skills in software engineering students.
to provide an understanding of the role of Software Engineers in supporting business operations.
to refine the ability to ‘learn from experience’ through personal reflection and analysis of their IT1 experiences.
to refine the ability to learn through collaborative reflective learning (i.e. via peer exchange of IT1 experiences).
Course Learning Outcomes: explain the role of Requirements and Design Fundamental Concepts and Processes in an industry context
describe how people are managed using collaboration tools to support complex software development activities
work effectively in an “agile team” in the workplace
describe the different phases of the software engineering cycle (requirements, design, implementation and testing
explain the nature of developing a complex software system in which stakeholders from multiple application domains are involved",Reflective practice; Agile teamwork; Software engineering principles,"agile software development; Project management; API Development: RESTful, GraphQL APIs; API Integration; font-end; back-end; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB; Professional team dynamics management; team collaboration
",Software development cycles; Requirements and design processes; Collaborative work management,Requirements and design in software; managing software development; learning from industry experience; role of software engineers in business,This course develops students' capabilities to work as effective Software Engineers by applying fundamental principles in an industry environment.
SENG3011,Software Engineering Workshop 3,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=SENG3011&activityGroupId=1,"This course is the last of the workshops series that are a key feature of the Software Engineering degree. These workshops are designed to teach students to work in teams using agile methods and apply their theoretical knowledge to solve real-life problems. This workshop builds on foundational Software Engineering principles of first year core course COMP1531, as well as the second-year workshop SENG2021. Students in this course are required to use modern technologies and tools that are used in industry to build robust, performant and scalable software services in the context of an enterprise DevOps environment. Alongside a development of technical maturity, students explore ideas surrounding leadership in a Software Engineering context through working in a team and individual reflection. The course has a number of industry sponsors that include Atlassian, GitHub, AWS, Optiver and New Relic.","This course is a key part of the software engineering degree practical component as it is intended to broaden the experience obtained in the preceding Software Engineering courses in stages 1 & 2. As a workshop, it particularly focuses on the issues of designing and implementing a quality software system that conforms to the requirements of a stakeholder using agile methods. Besides sharpening their design and coding skills, students will have to get immersed in a complex application domain, learn the basic concepts to be able to understand the requirements and continuously communicate with the stakeholder to discuss issues arising from the project such as design trade-offs, additional functionalities, new interface features etc.
In addition, students will develop interpersonal communication skills by preparing correctly formatted and structured reports, negotiating technical, management and interpersonal issues within their teams and resolving problems within their development teams using effective conflict resolution techniques.
In this workshop, teams will be working on developing software components that are linked by a common theme as if they were part of the same organisation. Each team will be directly supervised by a mentor with significant programming experience. The mentor will advise on the technologies and methods to be used as they will depend on the task at hand. Each mentor will also act as the stakeholder defining the essential features of a product. Additional information will be given during the mentoring sessions. Guest lectures will be organised with industry speakers in various areas related to the workshop.","Explore and work with modern DevOps and software toolchains used in industry development
Develop skills in leadership and management in a dynamic Software Engineering environment
Deepen the ability to plan, design, implement, test and document quality software in an agile environment
Understand and explore the architecture of cloud-based microservice and API-based software systems
Synthesise and adapt large-scale software systems to changes in requirements, evolutions in technology, and the need for scalability","Course Description: This course is the last of the workshops series that are a key feature of the Software Engineering degree. These workshops are designed to teach students to work in teams using agile methods and apply their theoretical knowledge to solve real-life problems. This workshop builds on foundational Software Engineering principles of first year core course COMP1531, as well as the second-year workshop SENG2021. Students in this course are required to use modern technologies and tools that are used in industry to build robust, performant and scalable software services in the context of an enterprise DevOps environment. Alongside a development of technical maturity, students explore ideas surrounding leadership in a Software Engineering context through working in a team and individual reflection. The course has a number of industry sponsors that include Atlassian, GitHub, AWS, Optiver and New Relic.
Course Aims: This course is a key part of the software engineering degree practical component as it is intended to broaden the experience obtained in the preceding Software Engineering courses in stages 1 & 2. As a workshop, it particularly focuses on the issues of designing and implementing a quality software system that conforms to the requirements of a stakeholder using agile methods. Besides sharpening their design and coding skills, students will have to get immersed in a complex application domain, learn the basic concepts to be able to understand the requirements and continuously communicate with the stakeholder to discuss issues arising from the project such as design trade-offs, additional functionalities, new interface features etc.
In addition, students will develop interpersonal communication skills by preparing correctly formatted and structured reports, negotiating technical, management and interpersonal issues within their teams and resolving problems within their development teams using effective conflict resolution techniques.
In this workshop, teams will be working on developing software components that are linked by a common theme as if they were part of the same organisation. Each team will be directly supervised by a mentor with significant programming experience. The mentor will advise on the technologies and methods to be used as they will depend on the task at hand. Each mentor will also act as the stakeholder defining the essential features of a product. Additional information will be given during the mentoring sessions. Guest lectures will be organised with industry speakers in various areas related to the workshop.
Course Learning Outcomes: Explore and work with modern DevOps and software toolchains used in industry development
Develop skills in leadership and management in a dynamic Software Engineering environment
Deepen the ability to plan, design, implement, test and document quality software in an agile environment
Understand and explore the architecture of cloud-based microservice and API-based software systems
Synthesise and adapt large-scale software systems to changes in requirements, evolutions in technology, and the need for scalability",DevOps practices; Leadership and management in software projects; Agile software development,"agile software development; Project management; API Development: RESTful, GraphQL APIs; API Integration; font-end; back-end; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB; Professional team dynamics management; team collaboration
",Cloud architectures; Microservices; API-based systems; Stakeholder engagement,Agile software development; DevOps toolchains; software system architecture; interpersonal communication in tech environments; industry-standard technologies and tools,This course develops skills in applying theoretical knowledge to real-life problems using modern technologies and tools in an enterprise DevOps environment.
SENG4920,Ethics and Management,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Term%201&deliveryMode=Multimodal&deliveryFormat=Standard&teachingPeriod=T1&deliveryLocation=Kensington&courseCode=SENG4920&activityGroupId=1,"In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ""ethics washing"" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general.",To give students an overview of contemporary ethics of computer science,"Articulate the major normative and meta-ethical theories that underpin real, research-level moral debates in both academic and professional contexts
Build, articulate, and justify their own moral arguments - as well as how to analyse moral judgements and moral arguments in general
Openly and robustly discuss ethical dilemmas around specific technological case studies
Recognise the ethical issues and pitfalls in their own professional practice of developing novel technologies, including AI (e
Define and employ ethical values, principles, and practices for responsible research and innovation of technological and computing advances","Course Description: In this course we will explore ethical issues for computer science, widely conceived. We will examine in detail the nature of ethical claims/moral judgements themselves, and how it is that our beliefs about their nature can affect our understanding of the ethical issues relating to computer science that we will examined far. We will learn about ethical arguments, and how to construct and evaluate them. We will cover utilitarian, deontological, and virtue ethics, and run test cases past real-world computer science cases. We will learn to engage critically with research ethics, as well as the relationship between ethical responsibility and AI frameworks and innovation. There will be considerable discussion of ""ethics washing"" - the pretence of ethical reasoning by those in positions of power for the purpose of avoiding regulation, As well as explore the related issues of trust, accountability, and privacy in our current online, informationalised world. We will explore equity, bias and fairness in algorithmic and dataset design, as well as the ethics of AI more broadly. We will also explore the ethical ramifications of transparency and explainability - along with their attendant relationships with power, as they relate to computer science in general.
Course Aims: To give students an overview of contemporary ethics of computer science
Course Learning Outcomes: Articulate the major normative and meta-ethical theories that underpin real, research-level moral debates in both academic and professional contexts
Build, articulate, and justify their own moral arguments - as well as how to analyse moral judgements and moral arguments in general
Openly and robustly discuss ethical dilemmas around specific technological case studies
Recognise the ethical issues and pitfalls in their own professional practice of developing novel technologies, including AI (e
Define and employ ethical values, principles, and practices for responsible research and innovation of technological and computing advances",Ethical reasoning in technology; Critical analysis of moral arguments; Ethical decision-making in AI and computing,"ethical issues in technology
",Normative ethics; Meta-ethics; Ethics of AI and technology,Normative and meta-ethical theories; research ethics in technology; transparency and fairness in AI,"This course examines ethical issues in computer science by analyzing moral theories, constructing arguments, and evaluating real-world cases to promote responsible innovation and decision-making."
ZEIT1208,Introduction to Electrical Engineering,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT1208&activityGroupId=1,"The focus of the course is on introducing students to fundamental concepts in electrical engineering and to the profession of electrical engineering. The course will also develop students’ learning skills, and confidence and competence in assembling and measuring electrical circuits on a breadboard. The course will cover circuit variables (voltage, current, power, energy), circuit elements (sources, Ohm’s law, Kirchhoff’s laws), and simple resistive circuits (series and parallel resistors, voltage and current divider), as well as an introduction to microcontrollers, digital inputs and outputs, and analog sensors. Students will be introduced to software used by professional engineers. The course will introduce aspects of the past, present, and future of the electrical engineering profession, and the ethical obligations of a practising electrical engineer.",,"Use appropriate engineering writing to communicate lab and theoretical results, including using software to create figures and graphs
Demonstrate competency in the use of common Electrical Engineering laboratory equipment and design and simulation tools
Begin to reflect on your performance as an engineer, including providing feedback to yourself and others
Apply Ohm’s & Kirchhoff’s Laws to analyse and design DC circuits and circuits containing ideal operational amplifiers","Course Description: The focus of the course is on introducing students to fundamental concepts in electrical engineering and to the profession of electrical engineering. The course will also develop students’ learning skills, and confidence and competence in assembling and measuring electrical circuits on a breadboard. The course will cover circuit variables (voltage, current, power, energy), circuit elements (sources, Ohm’s law, Kirchhoff’s laws), and simple resistive circuits (series and parallel resistors, voltage and current divider), as well as an introduction to microcontrollers, digital inputs and outputs, and analog sensors. Students will be introduced to software used by professional engineers. The course will introduce aspects of the past, present, and future of the electrical engineering profession, and the ethical obligations of a practising electrical engineer. Course Learning Outcomes: Use appropriate engineering writing to communicate lab and theoretical results, including using software to create figures and graphs
Demonstrate competency in the use of common Electrical Engineering laboratory equipment and design and simulation tools
Begin to reflect on your performance as an engineer, including providing feedback to yourself and others
Apply Ohm’s & Kirchhoff’s Laws to analyse and design DC circuits and circuits containing ideal operational amplifiers",Circuit analysis; Practical electrical engineering; Engineering communication,Circuit analysis; Practical electrical engineering,DC circuit design; Use of engineering design and simulation tools; Electrical engineering ethics,Introduction to electrical engineering principles and tools; design and analysis of simple resistive circuits; ethical considerations in electrical engineering practices.,"This course introduces students to fundamental electrical engineering concepts and profession, developing learning skills, circuit-building confidence, and analyzing DC circuits using Ohm's and Kirchhoff's laws."
ZEIT1504,"Introduction to Mechanical, Aeronautical and Naval Architecture Engineering",School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT1504&activityGroupId=2,"This is a foundational course designed to equip students with an introduction to concepts of engineering practice. The material addressed during this course will provide the foundations of later engineering courses. Significant aspects of the course address social context, sustainability, ethics, safety, research methods, technical report writing, graphical communication using sketching and drawing, CAD 3D modelling and drawing production (using CATIA), and an introduction to engineering materials (metals, polymers, ceramics and composites). This course also provides an introduction to the profession through the eyes of practicing engineers who will deliver “guest lectures” based on their career experience.
The workshop practice component of the course will provide engineering students with basic hand tool competencies and other familiarity that will be called upon in future courses.
This course will be followed in Semester 2 by ZEIT1501 which will address further CAD modelling, provide an introduction to manufacturing and develop machine tool competency. These two courses then provide the foundation for the sequence of subsequent design courses beginning with ZEIT2501 which engages students in the International “Warman Design and Build Competition”.","The course is intended to cover a range of foundational concepts that are essential for engineers. These include introduction to profession and social context of engineering, ethics, workplace health and safety, engineering graphics, technical drawings and reports, quantitative methods and introduction to materials.","On successful completion of this course, understand and consider the professional working regime of engineers with respect to for example social context, sustainability, ethics and safety
On successful completion of this course, understand and apply research methods and technical writing
On successful completion of this course, the student will be able to operate safely in practical engineering environments
On successful completion of this course, the student will be able to interpret and create engineering drawings and sketches using conventional (hand drawn
On successful completion of this course, understand and articulate the basic issues and principles surrounding the choice and application of engineering materials","Course Description: This is a foundational course designed to equip students with an introduction to concepts of engineering practice. The material addressed during this course will provide the foundations of later engineering courses. Significant aspects of the course address social context, sustainability, ethics, safety, research methods, technical report writing, graphical communication using sketching and drawing, CAD 3D modelling and drawing production (using CATIA), and an introduction to engineering materials (metals, polymers, ceramics and composites). This course also provides an introduction to the profession through the eyes of practicing engineers who will deliver “guest lectures” based on their career experience.
The workshop practice component of the course will provide engineering students with basic hand tool competencies and other familiarity that will be called upon in future courses.
This course will be followed in Semester 2 by ZEIT1501 which will address further CAD modelling, provide an introduction to manufacturing and develop machine tool competency. These two courses then provide the foundation for the sequence of subsequent design courses beginning with ZEIT2501 which engages students in the International “Warman Design and Build Competition”.
Course Aims: The course is intended to cover a range of foundational concepts that are essential for engineers. These include introduction to profession and social context of engineering, ethics, workplace health and safety, engineering graphics, technical drawings and reports, quantitative methods and introduction to materials.
Course Learning Outcomes: On successful completion of this course, understand and consider the professional working regime of engineers with respect to for example social context, sustainability, ethics and safety
On successful completion of this course, understand and apply research methods and technical writing
On successful completion of this course, the student will be able to operate safely in practical engineering environments
On successful completion of this course, the student will be able to interpret and create engineering drawings and sketches using conventional (hand drawn
On successful completion of this course, understand and articulate the basic issues and principles surrounding the choice and application of engineering materials",Technical report writing; CAD 3D modeling; Engineering materials application,Technical report writing; CAD 3D modeling; Experience in conducting research; technical writing and presentation,Engineering ethics and safety; Research methods in engineering; Graphical communication in engineering,Foundational engineering concepts and practices; application of research methods in engineering; understanding and creating engineering drawings; basics of material selection in engineering projects.,"This course equips students with foundational concepts in engineering practice, covering social context, sustainability, ethics, research methods, technical writing, and material selection."
ZEIT1600,Introduction to Civil Engineering,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT1600&activityGroupId=1,"This course introduces students to the Civil Engineering discipline and its various specialised fields. They will learn to effectively communicate engineering information using engineering drawings. Students will achieve knowledge of the interface between design, surveying and construction. Students will also learn surveying techniques and will be introduced to the various stages of design and construction of a residential house.",To introduce students to the Civil Engineering Practice,"Investigate, analyse, design and report on a residential building project
Understand how engineering construction has effects on communities beyond that of the technical achievementsEngineers Australia - Professional Engineer (Stage 1
Develop skills to effectively communicate the intents of an engineering project to technical and non-technical stakeholdersPEE3
Apply engineering principles to assess the factors controlling the design and construction of a project
Develop skills to effectively communicate the intents of an engineering project to technical and non-technical stakeholders
Develop skills to effectively communicate the intents of an engineering project to technical and non-technical stakeholdersEngineers Australia - Professional Engineer (Stage 1
Apply engineering principles to assess the factors controlling the design and construction of a projectEngineers Australia - Professional Engineer (Stage 1
Apply a disciplined, holistic approach that incorporates all aspects of a basic design situationPEE2
Apply engineering principles to assess the factors controlling the design and construction of a projectPEE1
Apply a disciplined, holistic approach that incorporates all aspects of a basic design situationEngineers Australia - Professional Engineer (Stage 1
Understand how engineering construction has effects on communities beyond that of the technical achievementsPEE2
Apply a disciplined, holistic approach that incorporates all aspects of a basic design situation
Understand how engineering construction has effects on communities beyond that of the technical achievements","Course Description: This course introduces students to the Civil Engineering discipline and its various specialised fields. They will learn to effectively communicate engineering information using engineering drawings. Students will achieve knowledge of the interface between design, surveying and construction. Students will also learn surveying techniques and will be introduced to the various stages of design and construction of a residential house.
Course Aims: To introduce students to the Civil Engineering Practice
Course Learning Outcomes: Investigate, analyse, design and report on a residential building project
Understand how engineering construction has effects on communities beyond that of the technical achievementsEngineers Australia - Professional Engineer (Stage 1
Develop skills to effectively communicate the intents of an engineering project to technical and non-technical stakeholdersPEE3
Apply engineering principles to assess the factors controlling the design and construction of a project
Develop skills to effectively communicate the intents of an engineering project to technical and non-technical stakeholders
Develop skills to effectively communicate the intents of an engineering project to technical and non-technical stakeholdersEngineers Australia - Professional Engineer (Stage 1
Apply engineering principles to assess the factors controlling the design and construction of a projectEngineers Australia - Professional Engineer (Stage 1
Apply a disciplined, holistic approach that incorporates all aspects of a basic design situationPEE2
Apply engineering principles to assess the factors controlling the design and construction of a projectPEE1
Apply a disciplined, holistic approach that incorporates all aspects of a basic design situationEngineers Australia - Professional Engineer (Stage 1
Understand how engineering construction has effects on communities beyond that of the technical achievementsPEE2
Apply a disciplined, holistic approach that incorporates all aspects of a basic design situation
Understand how engineering construction has effects on communities beyond that of the technical achievements",Engineering project communication; Design and construction assessment; Community impact analysis,Civil engineering; Surveying techniques; Residential building design and construction,Civil engineering; Surveying techniques; Residential building design and construction,Introduction to civil engineering practices; application of engineering principles to design and construction; understanding the broader impacts of engineering projects on communities.,This course introduces students to Civil Engineering and its specialized fields by investigating and analyzing residential building projects.
ZEIT2207,Analog Electronics,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT2207&activityGroupId=1,"This course focuses on the analysis, design, and construction of analog electronic circuits, including semiconductor devices such as diodes and transistors. Circuit analysis via the Laplace transform will also be introduced to analyse frequency-dependent circuits. This course builds upon the development of the DC and AC circuit analysis techniques introduced in Electrical Circuits, as well as on skills developed in Mathematics 1B and 2A. This course will cover the principles of semiconductors, pn junctions and diodes, the principles of transistors, biasing of transistors, transistor amplifiers, small-signal models, the Laplace transform, circuit analysis based on the Laplace transform, and frequency-selective circuits (analog filters).",,"Calculate and design transfer functions of frequency-selective circuits (analog filters
Solve linear circuits using the Laplace transform
Perform DC biasing of transistor circuits, and analyse and design transistor amplifiers
Analyse circuits including diodes and transistors using DC large-signal models
Perform small-signal analysis of circuits containing transistors","Course Description: This course focuses on the analysis, design, and construction of analog electronic circuits, including semiconductor devices such as diodes and transistors. Circuit analysis via the Laplace transform will also be introduced to analyse frequency-dependent circuits. This course builds upon the development of the DC and AC circuit analysis techniques introduced in Electrical Circuits, as well as on skills developed in Mathematics 1B and 2A. This course will cover the principles of semiconductors, pn junctions and diodes, the principles of transistors, biasing of transistors, transistor amplifiers, small-signal models, the Laplace transform, circuit analysis based on the Laplace transform, and frequency-selective circuits (analog filters). Course Learning Outcomes: Calculate and design transfer functions of frequency-selective circuits (analog filters
Solve linear circuits using the Laplace transform
Perform DC biasing of transistor circuits, and analyse and design transistor amplifiers
Analyse circuits including diodes and transistors using DC large-signal models
Perform small-signal analysis of circuits containing transistors",Analog circuit design; Laplace transform applications; Semiconductor device analysis,Analog circuit design; Laplace transforms; Semiconductor device analysis,Transistor biasing and amplification; Frequency-selective circuits; Small-signal analysis,Principles of semiconductors and pn junctions; DC and AC circuit analysis techniques; small-signal models; use of Laplace transform in circuit analysis,"This course analyzes and designs analog electronic circuits, introducing Laplace transforms to analyze frequency-dependent circuits and semiconductor devices."
ZEIT2208,Digital Electronics and Microcontrollers,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT2208&activityGroupId=1,"This course provides a thorough examination of modern digital systems. Fundamental concepts of numbering systems, logic gates, boolean algebra and logic simplification pave the way towards eventual implementations with flip-flops, registers, as well as analog-to-digital and digital-to-analog conversions. With the focus on practical use cases for microcontrollers, C programming language is leveraged to arrive at successful integrations of microcontrollers with additional peripherals. Finally, standardised communication buses are discussed to introduce how a microcontroller may function within the greater realm of all digital systems.",This course aims to provide a thorough examination of modern digital systems.,"Analyse, design and implement digital circuits within practical programming languages, such as C
Recognise the limitations of digital circuit implementations; and specify solutions that fits within the modern communications frameworks
Describe the fundamental building blocks of a digital system and combine their operations to help implement complex digital systems
Generate and organize digital circuits to manipulate peripherals attached to a microcontroller","Course Description: This course provides a thorough examination of modern digital systems. Fundamental concepts of numbering systems, logic gates, boolean algebra and logic simplification pave the way towards eventual implementations with flip-flops, registers, as well as analog-to-digital and digital-to-analog conversions. With the focus on practical use cases for microcontrollers, C programming language is leveraged to arrive at successful integrations of microcontrollers with additional peripherals. Finally, standardised communication buses are discussed to introduce how a microcontroller may function within the greater realm of all digital systems.
Course Aims: This course aims to provide a thorough examination of modern digital systems.
Course Learning Outcomes: Analyse, design and implement digital circuits within practical programming languages, such as C
Recognise the limitations of digital circuit implementations; and specify solutions that fits within the modern communications frameworks
Describe the fundamental building blocks of a digital system and combine their operations to help implement complex digital systems
Generate and organize digital circuits to manipulate peripherals attached to a microcontroller",Digital systems design; Microcontroller integration; C programming for hardware control,"Digital systems design; Microcontroller integration; C; Boolean algebras
",Logic gates and boolean algebra; Analog-to-digital and digital-to-analog conversions; Communication protocols,Boolean algebra; logic simplification; flip-flops and registers; standard communication protocols,"This course explores and implements modern digital systems, analyzing and designing digital circuits with practical programming languages like C."
ZEIT2500,Thermofluids,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT2500&activityGroupId=1,"Have you ever wondered, “how many hair dryers it takes to launch into space? Or pondered if it is possible to reverse the effects of climate change with air conditioning?” These captivating questions serve as the entry point into the world of ThermoFluids - an intricate intersection of thermodynamics and fluid mechanics that has captivated engineers for centuries. In the pursuit of economical and efficient solutions, engineers have grappled with challenges like generating power, transferring heat and energy, and constructing fluid-immersed structures such as airplanes, dams, wind turbines, and bridges. As we propel into the future, the next generation of engineers will harness their expertise to design innovative devices and unravel solutions to unforeseen problems, making this course an essential exploration of the foundational knowledge required for analysing and designing cutting-edge equipment and technologies.
Within the context of engineering, this course delves deep into the profound impact of ThermoFluids. From unravelling the fundamental properties of fluids to exploring their dynamic motion, students gain invaluable insights into the intricate interplay between thermodynamics and fluid mechanics. The application of the first and second laws of thermodynamics to scenarios like closed and open systems, along with the examination of simple thermodynamic cycles, equips students with the skills needed to navigate real-world challenges. These compelling questions not only spark curiosity but also encourage students to explore the limitless possibilities within the captivating realm of ThermoFluids.","The overarching objectives of this course are designed to empower students with the essential skills and knowledge necessary to address core challenges in energy transfer and basic fluid flow problem-solving. Specifically, the aims of this course are:

Establish a Foundation in Thermodynamics Fundamentals: Instil a solid understanding of the fundamentals of thermodynamics, encompassing the governing laws that underpin this crucial discipline.
Lay the Groundwork for Fluid Mechanics Principles: Provide a foundational grasp of the fundamental principles of fluid mechanics, including the key laws governing fluid flow, fostering a comprehensive comprehension of fluid behaviour.
 Enhance Problem-Solving Proficiency in ThermoFluids: Develop comprehension and proficiency of students in applying fundamental ThermoFluids principles to solve simple to complex problems.
Cultivate Engineering Problem-Solving and Critical Thinking Skills: Foster the development of students' engineering approach to problem-solving and critical thinking, enabling them to apply both new and existing knowledge to address challenges within the realm of ThermoFluids.","Analyse the performance of power generating engines
Calculate the operating conditions of engineering processes using thermodynamics principles
Integrate fluid mechanics principles to study forces on offshore structures
Define the thermodynamic state of a fluid system
Apply control volume analysis to fluid-mechanical systems
Define foundational concepts of fluid mechanics (Hydrostatic pressure, Bernoulli equation and conservation of mass and momentum","Course Description: Have you ever wondered, “how many hair dryers it takes to launch into space? Or pondered if it is possible to reverse the effects of climate change with air conditioning?” These captivating questions serve as the entry point into the world of ThermoFluids - an intricate intersection of thermodynamics and fluid mechanics that has captivated engineers for centuries. In the pursuit of economical and efficient solutions, engineers have grappled with challenges like generating power, transferring heat and energy, and constructing fluid-immersed structures such as airplanes, dams, wind turbines, and bridges. As we propel into the future, the next generation of engineers will harness their expertise to design innovative devices and unravel solutions to unforeseen problems, making this course an essential exploration of the foundational knowledge required for analysing and designing cutting-edge equipment and technologies.
Within the context of engineering, this course delves deep into the profound impact of ThermoFluids. From unravelling the fundamental properties of fluids to exploring their dynamic motion, students gain invaluable insights into the intricate interplay between thermodynamics and fluid mechanics. The application of the first and second laws of thermodynamics to scenarios like closed and open systems, along with the examination of simple thermodynamic cycles, equips students with the skills needed to navigate real-world challenges. These compelling questions not only spark curiosity but also encourage students to explore the limitless possibilities within the captivating realm of ThermoFluids.
Course Aims: The overarching objectives of this course are designed to empower students with the essential skills and knowledge necessary to address core challenges in energy transfer and basic fluid flow problem-solving. Specifically, the aims of this course are:

Establish a Foundation in Thermodynamics Fundamentals: Instil a solid understanding of the fundamentals of thermodynamics, encompassing the governing laws that underpin this crucial discipline.
Lay the Groundwork for Fluid Mechanics Principles: Provide a foundational grasp of the fundamental principles of fluid mechanics, including the key laws governing fluid flow, fostering a comprehensive comprehension of fluid behaviour.
 Enhance Problem-Solving Proficiency in ThermoFluids: Develop comprehension and proficiency of students in applying fundamental ThermoFluids principles to solve simple to complex problems.
Cultivate Engineering Problem-Solving and Critical Thinking Skills: Foster the development of students' engineering approach to problem-solving and critical thinking, enabling them to apply both new and existing knowledge to address challenges within the realm of ThermoFluids.
Course Learning Outcomes: Analyse the performance of power generating engines
Calculate the operating conditions of engineering processes using thermodynamics principles
Integrate fluid mechanics principles to study forces on offshore structures
Define the thermodynamic state of a fluid system
Apply control volume analysis to fluid-mechanical systems
Define foundational concepts of fluid mechanics (Hydrostatic pressure, Bernoulli equation and conservation of mass and momentum",ThermoFluids analysis; Thermodynamic and fluid mechanics integration; Engineering problem-solving,ThermoFluids analysis; Thermodynamic and fluid mechanics integration,Thermodynamics principles; Fluid mechanics applications; Energy transfer systems,Laws of thermodynamics; fluid dynamics; engineering process calculations; thermodynamic system states; hydrostatic pressure concepts,This course applies fundamental concepts of thermodynamics and fluid mechanics to solve real-world engineering problems.
ZEIT2501,Mechanical and Electronic Design,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT2501&activityGroupId=1,"This course aims to develop sound design practice through participation in the Warman Design and Build Project and Competition, which is a small-group, semester-long, authentic project-based learning activity. The project is unique each year but mechatronic in nature, and students will be exposed to the broad principles of mechanical and electronic design in a professional context including requirements analysis, concept development, detailed design, fabrication, testing and evaluation, teamwork and reporting. The lectures,design studio and workshop sessions will deliver the relevant material and scaffolding for the successful completion of the project.","The aims of this course are to develop sound design principles through participation in the Warman Design and Build Competition, which is a small-group, project-based learning activity.","Communicate verbally and through documents appropriate design information using words, mathematics and drawings and the language of the discipline
Analyse, evaluate and create a hardware solution to an open engineering problem as posed within the context of the Warman Design and Build Competition
Critically reflect on personal and group/team performance, particularly in task management and teaming issues
Analyse, evaluate and create a hardware solution to an open engineering problem as posed within the context of the Warman Design and Build CompetitionEngineers Australia - Professional Engineer (Stage 1
Apply an understanding of the basic principles of mechanical, electrical and electronic technology through developing a mechatronic system
Apply an understanding of the basic context and theory of design as a process involving art and science
Apply an understanding of the basic principles of mechanical, electrical and electronic technology through developing a mechatronic systemEngineers Australia - Professional Engineer (Stage 1
Apply an understanding of the basic principles of mechanical, electrical and electronic technology through developing a mechatronic systemPEE2
Analyse, evaluate and create a hardware solution to an open engineering problem as posed within the context of the Warman Design and Build CompetitionPEE1","Course Description: This course aims to develop sound design practice through participation in the Warman Design and Build Project and Competition, which is a small-group, semester-long, authentic project-based learning activity. The project is unique each year but mechatronic in nature, and students will be exposed to the broad principles of mechanical and electronic design in a professional context including requirements analysis, concept development, detailed design, fabrication, testing and evaluation, teamwork and reporting. The lectures,design studio and workshop sessions will deliver the relevant material and scaffolding for the successful completion of the project.
Course Aims: The aims of this course are to develop sound design principles through participation in the Warman Design and Build Competition, which is a small-group, project-based learning activity.
Course Learning Outcomes: Communicate verbally and through documents appropriate design information using words, mathematics and drawings and the language of the discipline
Analyse, evaluate and create a hardware solution to an open engineering problem as posed within the context of the Warman Design and Build Competition
Critically reflect on personal and group/team performance, particularly in task management and teaming issues
Analyse, evaluate and create a hardware solution to an open engineering problem as posed within the context of the Warman Design and Build CompetitionEngineers Australia - Professional Engineer (Stage 1
Apply an understanding of the basic principles of mechanical, electrical and electronic technology through developing a mechatronic system
Apply an understanding of the basic context and theory of design as a process involving art and science
Apply an understanding of the basic principles of mechanical, electrical and electronic technology through developing a mechatronic systemEngineers Australia - Professional Engineer (Stage 1
Apply an understanding of the basic principles of mechanical, electrical and electronic technology through developing a mechatronic systemPEE2
Analyse, evaluate and create a hardware solution to an open engineering problem as posed within the context of the Warman Design and Build CompetitionPEE1",Mechatronic system design; Project management; Team collaboration,Mechatronic system design; Project management; Team collaboration,Mechanical and electronic design integration; Requirements analysis and testing; Engineering problem-solving,Principles of mechanical engineering; electronic and electrical technology; design process theory; professional engineering practices,"This course develops sound design practice by guiding students through a semester-long project-based learning activity, focusing on mechanical and electronic design principles."
ZEIT2603,Civil Engineering Materials,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT2603&activityGroupId=1,"This course presents the basic topics of modern construction materials and their applications in civil engineering. Topics covered include: history and development of materials; interactions between processes, design, and implementation; basic material properties; manipulating material properties; soils, rocks, aggregates, asphalt, cement and concrete, steel, composites, and other natural materials; materials in practical implementations; new materials for civil engineering; civil engineering materials and the environment.","This course aims to provide a comprehensive introduction to civil engineering materials. It covers basic topics on modern construction materials, their properties and their applications in civil engineering projects. Emphases will be given to factors that affecting material selections in terms of strength, serviceability, durability and sustainability in practice.","Understand, describe and characterise properties of artificial materials and their relationship and impact on civil engineering
Understand and describe and analyse relationships between materials properties and design needs; apply such knowledge
Understand, describe and characterise properties of naturally occurring materials with which civil engineers must deal; apply such knowledge in practical situations
Understand, describe and characterise basic properties of materials and apply such knowledge to civil engineering","Course Description: This course presents the basic topics of modern construction materials and their applications in civil engineering. Topics covered include: history and development of materials; interactions between processes, design, and implementation; basic material properties; manipulating material properties; soils, rocks, aggregates, asphalt, cement and concrete, steel, composites, and other natural materials; materials in practical implementations; new materials for civil engineering; civil engineering materials and the environment.
Course Aims: This course aims to provide a comprehensive introduction to civil engineering materials. It covers basic topics on modern construction materials, their properties and their applications in civil engineering projects. Emphases will be given to factors that affecting material selections in terms of strength, serviceability, durability and sustainability in practice.
Course Learning Outcomes: Understand, describe and characterise properties of artificial materials and their relationship and impact on civil engineering
Understand and describe and analyse relationships between materials properties and design needs; apply such knowledge
Understand, describe and characterise properties of naturally occurring materials with which civil engineers must deal; apply such knowledge in practical situations
Understand, describe and characterise basic properties of materials and apply such knowledge to civil engineering",Civil engineering materials knowledge; Material property analysis; Sustainable construction practices,Civil engineering materials knowledge; Material property analysis; Sustainable construction practices,Properties and applications of construction materials; Material selection for civil engineering projects; Environmental impact of construction materials,Properties of civil engineering materials; material-environment interactions,"This course introduces students to modern construction materials and their applications in civil engineering, exploring properties and implementations for practical use."
ZEIT2901,Engineering Research 2A,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT2901&activityGroupId=1,"This course is restricted to those students undertaking the BE(Aero)(CDF), BE(Civil)(CDF), BE(Elec)(CDF), BE(Mech)(CDF), or BTech(Aero)(CDF) programs. Students undertake problem-based learning or research project on a nominated topic approved by the course authority in a specific discipline area that is commensurate with study at Year 2 level.
As one of the aims of the program is to further develop critical thinking and independent research skills, the project will involve ""hands on"" research experience in collaboration with a staff member and their research team. A supervisor, who will work closely with the student, will manage each project. Final assessment will be based on a written paper and an oral presentation, with appropriate weighting.","In this 6 unit of credit course you will undertake an individual research project under the supervision of an academic staff member. Students are expected to undertake a diverse range of projects over the length of their CDF program, to be determined in consultation with the CDF Coordinator.","Produce a survey of peer-reviewed background research literature
Demonstrate independent self-directed learning and critical thinking in approaching your research problem
Prepare a substantial and logical discussion of your research project's progress, results and conclusions
Critically assess novel engineering theory and research projects
Apply engineering theory to work towards achieving a project's specific technical goals","Course Description: This course is restricted to those students undertaking the BE(Aero)(CDF), BE(Civil)(CDF), BE(Elec)(CDF), BE(Mech)(CDF), or BTech(Aero)(CDF) programs. Students undertake problem-based learning or research project on a nominated topic approved by the course authority in a specific discipline area that is commensurate with study at Year 2 level.
As one of the aims of the program is to further develop critical thinking and independent research skills, the project will involve ""hands on"" research experience in collaboration with a staff member and their research team. A supervisor, who will work closely with the student, will manage each project. Final assessment will be based on a written paper and an oral presentation, with appropriate weighting.
Course Aims: In this 6 unit of credit course you will undertake an individual research project under the supervision of an academic staff member. Students are expected to undertake a diverse range of projects over the length of their CDF program, to be determined in consultation with the CDF Coordinator.
Course Learning Outcomes: Produce a survey of peer-reviewed background research literature
Demonstrate independent self-directed learning and critical thinking in approaching your research problem
Prepare a substantial and logical discussion of your research project's progress, results and conclusions
Critically assess novel engineering theory and research projects
Apply engineering theory to work towards achieving a project's specific technical goals",Independent research; Critical thinking; Engineering application and theory,"Project management; Experience in conducting research; Presentation of research findings
",Research methodology; Project management; Technical writing and presentation skills,Application of engineering principles in a specific discipline; critical assessment of engineering theories; effective communication of research findings,"This course investigates an approved topic through hands-on research experience, developing critical thinking and independent research skills under the guidance of a supervisor."
ZEIT3215,Signals and Systems,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3215&activityGroupId=1,"This course introduces descriptions of basic continuous and discrete time signals. It introduces the delta-impulse signal and its properties. Continuous-time and discrete-time systems and their properties are discussed. The convolution operation and linear system impulse response are introduced. The course presents an analysis of signals using Fourier series and Fourier transform. Properties of the Fourier transforms, Fourier spectrum and power spectrum, Parseval's theorem, energy spectral density and power spectral density are presented. An application of these transforms in sampling theory is discussed. The tool of Laplace transforms and the methods of partial fraction expansions are discussed, including the concepts of transfer functions. These tools are applied in the analysis of active filters. The course also introduces computer aided analysis of analog linear systems.","This course aims to introduce fundamental concepts of frequency and time domain duality, transforms, causality, spectra, impulse and step response system characteristics which will feed other courses in communications, image and signal processing, design and control.","Analysis of systems and signals in the frequency domain: By the end of the course, students will be able to analyze frequency domain spectra of signals and systems using techniques based on integral and series transforms; determine and analyse characteristics of linear-time invariant systems such as transfer function and frequency response; analyze properties of linear-time- invariant systems based on poles and zeros of their transfer functions; analyze and synthesize simple systems such as filters to desired performance specifications
After completing the course, students will be able to demonstrate their competency in the course material by solving problems in the area of signals and systems within the scope set by the lecturer
Analysis of systems and signals in the time domain: By the end of the course, students will be able to identify and quantify properties and characteristics of continuous- and discrete time signals such as periodicity, energy and average power","Course Description: This course introduces descriptions of basic continuous and discrete time signals. It introduces the delta-impulse signal and its properties. Continuous-time and discrete-time systems and their properties are discussed. The convolution operation and linear system impulse response are introduced. The course presents an analysis of signals using Fourier series and Fourier transform. Properties of the Fourier transforms, Fourier spectrum and power spectrum, Parseval's theorem, energy spectral density and power spectral density are presented. An application of these transforms in sampling theory is discussed. The tool of Laplace transforms and the methods of partial fraction expansions are discussed, including the concepts of transfer functions. These tools are applied in the analysis of active filters. The course also introduces computer aided analysis of analog linear systems.
Course Aims: This course aims to introduce fundamental concepts of frequency and time domain duality, transforms, causality, spectra, impulse and step response system characteristics which will feed other courses in communications, image and signal processing, design and control.
Course Learning Outcomes: Analysis of systems and signals in the frequency domain: By the end of the course, students will be able to analyze frequency domain spectra of signals and systems using techniques based on integral and series transforms; determine and analyse characteristics of linear-time invariant systems such as transfer function and frequency response; analyze properties of linear-time- invariant systems based on poles and zeros of their transfer functions; analyze and synthesize simple systems such as filters to desired performance specifications
After completing the course, students will be able to demonstrate their competency in the course material by solving problems in the area of signals and systems within the scope set by the lecturer
Analysis of systems and signals in the time domain: By the end of the course, students will be able to identify and quantify properties and characteristics of continuous- and discrete time signals such as periodicity, energy and average power",Signal analysis; System characterization; Application of mathematical transforms,Fourier series; Laplace transforms; Time and frequency domain analysis; Linear-time invariant systems; Continuous and discrete time signals and systems,Fourier and Laplace transforms; Time and frequency domain analysis; Linear-time invariant systems,"Continuous and discrete time signals and systems, properties of transforms, filter design, computer-aided system analysis","This course introduces signal analysis techniques, including Fourier series and transform, Laplace transforms, and convolution, for both frequency and time domains."
ZEIT3220,Engineering Electromagnetics,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3220&activityGroupId=1,"The focus of this course is on developing an understanding of the electromagnetic properties of electronic circuits and electromagnetic devices from an electrical engineering perspective. This course builds upon previous courses in electromagnetics and circuit theory, focussing on the design and utilisation of electromagnetic devices in practical situations. This course will cover transmission lines, revisit Maxwell's equations, develop free-space propagation concepts, and apply those conceptsto waveguides and antennas.","This 6 UoC course aims to provide you with an understanding of electromagnetic technology, circuits and devices from an electrical engineering perspective. This course builds upon previous courses in electromagnetics and circuit theory, with a focus on how this technology may be applied in practical situations.

Specific topics covered include:
Unit 1 - Transmission Lines: structures, transmission line parameters, characteristic impedance, propagation coefficient, reflection and transmission coefficients, transmission line applications.
Unit 2 - Fields and Sources: a detailed overview of electromagnetics building up towards the Maxwell's equations and electromagnetic boundary conditions.
Unit 3 - Plane Wave Propagation: wave equation and time harmonic fields; propagation in lossless and lossy media, normal and oblique incidence to boundaries, reflection and transmission; polarization
Unit 4 - Waveguides: TEM, TE and TM propagation; field theory for metallic and dielectric waveguides; losses, modes, cutoff, wavelength, dispersion and bandwidth.
Unit 5- Antennas: radiation pattern, polarisation, directivity, gain, impedance; wire and loop antennas, aperture antennas; antenna arrays; link budget and RADAR cross-section.","recognise antenna structures and estimate their key performance characteristics; and apply antenna theory to the solution of simple radio communication and radar problemsPEE1
determine the propagation characteristics of transmission line structures, and manipulate transmission line parameters to solve specific technical problemsEngineers Australia - Professional Engineer (Stage 1
model and characterise the propagation behaviour of plane waves propagating in real world environments;
model and characterise the propagation behaviour of plane waves propagating in real world environments;PEE1
model and characterise the propagation behaviour of plane waves propagating in real world environments;Engineers Australia - Professional Engineer (Stage 1
derive the mode structure of simple metallic waveguides; discuss the properties of more complex waveguides and their modes; calculate important parameters relating to waveguidesEngineers Australia - Professional Engineer (Stage 1
recognise antenna structures and estimate their key performance characteristics; and apply antenna theory to the solution of simple radio communication and radar problemsEngineers Australia - Professional Engineer (Stage 1
determine the propagation characteristics of transmission line structures, and manipulate transmission line parameters to solve specific technical problemsPEE1
determine the propagation characteristics of transmission line structures, and manipulate transmission line parameters to solve specific technical problems
recognise antenna structures and estimate their key performance characteristics; and apply antenna theory to the solution of simple radio communication and radar problems
derive the mode structure of simple metallic waveguides; discuss the properties of more complex waveguides and their modes; calculate important parameters relating to waveguidesPEE1
derive the mode structure of simple metallic waveguides; discuss the properties of more complex waveguides and their modes; calculate important parameters relating to waveguides","Course Description: The focus of this course is on developing an understanding of the electromagnetic properties of electronic circuits and electromagnetic devices from an electrical engineering perspective. This course builds upon previous courses in electromagnetics and circuit theory, focussing on the design and utilisation of electromagnetic devices in practical situations. This course will cover transmission lines, revisit Maxwell's equations, develop free-space propagation concepts, and apply those conceptsto waveguides and antennas.
Course Aims: This 6 UoC course aims to provide you with an understanding of electromagnetic technology, circuits and devices from an electrical engineering perspective. This course builds upon previous courses in electromagnetics and circuit theory, with a focus on how this technology may be applied in practical situations.

Specific topics covered include:
Unit 1 - Transmission Lines: structures, transmission line parameters, characteristic impedance, propagation coefficient, reflection and transmission coefficients, transmission line applications.
Unit 2 - Fields and Sources: a detailed overview of electromagnetics building up towards the Maxwell's equations and electromagnetic boundary conditions.
Unit 3 - Plane Wave Propagation: wave equation and time harmonic fields; propagation in lossless and lossy media, normal and oblique incidence to boundaries, reflection and transmission; polarization
Unit 4 - Waveguides: TEM, TE and TM propagation; field theory for metallic and dielectric waveguides; losses, modes, cutoff, wavelength, dispersion and bandwidth.
Unit 5- Antennas: radiation pattern, polarisation, directivity, gain, impedance; wire and loop antennas, aperture antennas; antenna arrays; link budget and RADAR cross-section.
Course Learning Outcomes: recognise antenna structures and estimate their key performance characteristics; and apply antenna theory to the solution of simple radio communication and radar problemsPEE1
determine the propagation characteristics of transmission line structures, and manipulate transmission line parameters to solve specific technical problemsEngineers Australia - Professional Engineer (Stage 1
model and characterise the propagation behaviour of plane waves propagating in real world environments;
model and characterise the propagation behaviour of plane waves propagating in real world environments;PEE1
model and characterise the propagation behaviour of plane waves propagating in real world environments;Engineers Australia - Professional Engineer (Stage 1
derive the mode structure of simple metallic waveguides; discuss the properties of more complex waveguides and their modes; calculate important parameters relating to waveguidesEngineers Australia - Professional Engineer (Stage 1
recognise antenna structures and estimate their key performance characteristics; and apply antenna theory to the solution of simple radio communication and radar problemsEngineers Australia - Professional Engineer (Stage 1
determine the propagation characteristics of transmission line structures, and manipulate transmission line parameters to solve specific technical problemsPEE1
determine the propagation characteristics of transmission line structures, and manipulate transmission line parameters to solve specific technical problems
recognise antenna structures and estimate their key performance characteristics; and apply antenna theory to the solution of simple radio communication and radar problems
derive the mode structure of simple metallic waveguides; discuss the properties of more complex waveguides and their modes; calculate important parameters relating to waveguidesPEE1
derive the mode structure of simple metallic waveguides; discuss the properties of more complex waveguides and their modes; calculate important parameters relating to waveguides",Electromagnetic theory application; Circuit and device design; Practical problem-solving in antenna and waveguide technology,Electromagnetic theory; Analog circuit design; antenna and waveguide technology,Transmission line theory; Maxwell's equations and applications; Antenna and waveguide design and analysis,"Maxwell's equations, electromagnetic field behavior, antenna performance characteristics, propagation characteristics in various media","This course develops an understanding of electromagnetic properties in electronic circuits and devices from an electrical engineering perspective, covering transmission lines, Maxwell's equations, and antenna theory."
ZEIT3224,Electric Machines and Power Electronics,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3224&activityGroupId=1,"The focus of this course is on developing an understanding of the principles of electrical machines and power electronic circuits. This course builds upon previous study in circuit theory and electromagnetics, focussing on the analysis and design of electrical machines and power electronic circuits in practical scenarios. This course will cover three-phase circuits and transformers, DC and AC motors and generators, power diodes and transistors, inverters, power supplies, and drives.","This course aims to provide students with an understanding of the fundamental principles of electrical power, machines and power electronics.","Identify an appropriate motor drive and describe its technical specifications
Demonstrate how to apply different forms of power conversion (e
Demonstrate effective control of machines by using power electronics
Explain how power electronic circuits work by controlling switches
Explain the fundamental principles of operation and the main characteristics of electrical machines","Course Description: The focus of this course is on developing an understanding of the principles of electrical machines and power electronic circuits. This course builds upon previous study in circuit theory and electromagnetics, focussing on the analysis and design of electrical machines and power electronic circuits in practical scenarios. This course will cover three-phase circuits and transformers, DC and AC motors and generators, power diodes and transistors, inverters, power supplies, and drives.
Course Aims: This course aims to provide students with an understanding of the fundamental principles of electrical power, machines and power electronics.
Course Learning Outcomes: Identify an appropriate motor drive and describe its technical specifications
Demonstrate how to apply different forms of power conversion (e
Demonstrate effective control of machines by using power electronics
Explain how power electronic circuits work by controlling switches
Explain the fundamental principles of operation and the main characteristics of electrical machines",Electrical design and analysis; Power electronics control; Motor drive system implementation,Electrical design and analysis; Power electronics control; Motor drive system implementation,Three-phase circuits; Motor and generator mechanics; Power conversion technologies,"Principles of electrical power and machines, technical operations of power electronic circuits, control and application of electrical machines in practical scenarios","This course develops an understanding of electrical machine and power electronic circuit principles, analyzing and designing practical scenarios."
ZEIT3501,Engineering Materials,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3501&activityGroupId=1,"This course deals with the selection and use of engineering materials for aerospace and mechanical engineering applications. It builds on the scientific and technology basis of the Year 2 prerequisite course in Engineering Materials and Chemistry (ZINT2501) and is the capstone materials course. The course is structured so as to provide a framework for sound and balanced decision making in the selection and use of these materials. It also provides guidance in the use of Codes and Standards in engineering practice. The course comprises two major topics addressing issues in the selection, use and behaviour of metals, ceramics; and polymers and composites in broad engineering practice. The emphasis is on developing an understanding of the critical inter-relationship between decisions made in the various stages of an engineering project, namely during the design phase, in the selection of materials, and in fabrication. This course interfaces with design courses in Years 3 and 4 of the various engineering programs.","This aims of the course is for students to develop an understanding of the critical inter-relationship between decisions made in the various stages of an engineering project, namely during the design phase, in the selection of materials, and in fabrication.","On successful completion of this course, the student will be able to investigate the problems related to the use and behaviour of metals, ceramics, polymers, and compositesEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to undertake research including the utilization and integration of a range of technical resourcesPEE1
On successful completion of this course, the student will be able to explain the principles of the materials selection and decision making in design and fabricationEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to undertake research including the utilization and integration of a range of technical resources
On successful completion of this course, the student will be able to explain the principles of the materials selection and decision making in design and fabricationPEE1
On successful completion of this course, the student will be able to undertake research including the utilization and integration of a range of technical resourcesEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to apply theory and knowledge of engineering materials to the solution of the practical engineering problems
On successful completion of this course, the student will be able to apply theory and knowledge of engineering materials to the solution of the practical engineering problemsPEE1
On successful completion of this course, the student will be able to investigate the problems related to the use and behaviour of metals, ceramics, polymers, and composites
On successful completion of this course, the student will be able to apply theory and knowledge of engineering materials to the solution of the practical engineering problemsEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to investigate the problems related to the use and behaviour of metals, ceramics, polymers, and compositesPEE1
On successful completion of this course, the student will be able to explain the principles of the materials selection and decision making in design and fabrication","Course Description: This course deals with the selection and use of engineering materials for aerospace and mechanical engineering applications. It builds on the scientific and technology basis of the Year 2 prerequisite course in Engineering Materials and Chemistry (ZINT2501) and is the capstone materials course. The course is structured so as to provide a framework for sound and balanced decision making in the selection and use of these materials. It also provides guidance in the use of Codes and Standards in engineering practice. The course comprises two major topics addressing issues in the selection, use and behaviour of metals, ceramics; and polymers and composites in broad engineering practice. The emphasis is on developing an understanding of the critical inter-relationship between decisions made in the various stages of an engineering project, namely during the design phase, in the selection of materials, and in fabrication. This course interfaces with design courses in Years 3 and 4 of the various engineering programs.
Course Aims: This aims of the course is for students to develop an understanding of the critical inter-relationship between decisions made in the various stages of an engineering project, namely during the design phase, in the selection of materials, and in fabrication.
Course Learning Outcomes: On successful completion of this course, the student will be able to investigate the problems related to the use and behaviour of metals, ceramics, polymers, and compositesEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to undertake research including the utilization and integration of a range of technical resourcesPEE1
On successful completion of this course, the student will be able to explain the principles of the materials selection and decision making in design and fabricationEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to undertake research including the utilization and integration of a range of technical resources
On successful completion of this course, the student will be able to explain the principles of the materials selection and decision making in design and fabricationPEE1
On successful completion of this course, the student will be able to undertake research including the utilization and integration of a range of technical resourcesEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to apply theory and knowledge of engineering materials to the solution of the practical engineering problems
On successful completion of this course, the student will be able to apply theory and knowledge of engineering materials to the solution of the practical engineering problemsPEE1
On successful completion of this course, the student will be able to investigate the problems related to the use and behaviour of metals, ceramics, polymers, and composites
On successful completion of this course, the student will be able to apply theory and knowledge of engineering materials to the solution of the practical engineering problemsEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the student will be able to investigate the problems related to the use and behaviour of metals, ceramics, polymers, and compositesPEE1
On successful completion of this course, the student will be able to explain the principles of the materials selection and decision making in design and fabrication",Materials selection and application; Engineering design integration; Practical problem-solving in material science,"Engineering materials application; problem-solving; Engineering design integration
","Behavior and use of metals, ceramics, polymers, and composites; Engineering codes and standards; Material decision-making in design and fabrication","Interrelationship of design, selection, and fabrication phases in engineering projects; application of materials theory in practical engineering problems","This course focuses on selecting and using materials in aerospace and mechanical engineering, integrating scientific principles and standards in decision-making processes."
ZEIT3502,Vibration and Control Engineering,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3502&activityGroupId=1,"This course provides a foundation in modelling dynamics of engineering systems and leads to solution of practical problems in vibration and automatic control. Free body diagrams and energy methods will be shown. Solution of free and forced response will be investigated. Basic vibration analysis will be used to apply vibration isolation methods. Multiple degree of freedom systems including lumped parameter systems will be introduced leading to the eigenvalue problem and modal analysis. The course will enable students to analyse and design effective feedback control using a broad range of control design tools including mathematical modelling of system components, block diagram manipulation, linearisation, Laplace transform androot locus. Students will study practical controllers such as the PID controller.
The course builds upon the knowledge from the earlier course on dynamics along with mathematics.",This course aim to provide students with the foundation in modelling the dynamics of engineering systems and leads to the solution of practical problems in vibration and automatic control.,"On successful completion of this program, the student will be able to review and improve the response of the system using simple feedback controllers
On successful completion of this program, the student will be able to apply techniques to obtain dynamic system model parametersEngineers Australia - Professional Engineer (Stage 1
On successful completion of this program, the student will be able to convert models among differential equations and transfer functionsEngineers Australia - Professional Engineer (Stage 1
On successful completion of this program, the student will be able to convert models among differential equations and transfer functions
On successful completion of this program, the student will be able to analyse dynamical systems and represent them through differential equations
On successful completion of this program, the student will be able to convert models among differential equations and transfer functionsPEE1
On successful completion of this program, the student will be able to apply techniques to obtain dynamic system model parametersPEE1
On successful completion of this program, the student will be able to apply techniques to obtain dynamic system model parameters
On successful completion of this program, the student will be able to analyse dynamical systems and represent them through differential equationsPEE1
On successful completion of this program, the student will be able to analyse dynamical systems and represent them through differential equationsEngineers Australia - Professional Engineer (Stage 1","Course Description: This course provides a foundation in modelling dynamics of engineering systems and leads to solution of practical problems in vibration and automatic control. Free body diagrams and energy methods will be shown. Solution of free and forced response will be investigated. Basic vibration analysis will be used to apply vibration isolation methods. Multiple degree of freedom systems including lumped parameter systems will be introduced leading to the eigenvalue problem and modal analysis. The course will enable students to analyse and design effective feedback control using a broad range of control design tools including mathematical modelling of system components, block diagram manipulation, linearisation, Laplace transform androot locus. Students will study practical controllers such as the PID controller.
The course builds upon the knowledge from the earlier course on dynamics along with mathematics.
Course Aims: This course aim to provide students with the foundation in modelling the dynamics of engineering systems and leads to the solution of practical problems in vibration and automatic control.
Course Learning Outcomes: On successful completion of this program, the student will be able to review and improve the response of the system using simple feedback controllers
On successful completion of this program, the student will be able to apply techniques to obtain dynamic system model parametersEngineers Australia - Professional Engineer (Stage 1
On successful completion of this program, the student will be able to convert models among differential equations and transfer functionsEngineers Australia - Professional Engineer (Stage 1
On successful completion of this program, the student will be able to convert models among differential equations and transfer functions
On successful completion of this program, the student will be able to analyse dynamical systems and represent them through differential equations
On successful completion of this program, the student will be able to convert models among differential equations and transfer functionsPEE1
On successful completion of this program, the student will be able to apply techniques to obtain dynamic system model parametersPEE1
On successful completion of this program, the student will be able to apply techniques to obtain dynamic system model parameters
On successful completion of this program, the student will be able to analyse dynamical systems and represent them through differential equationsPEE1
On successful completion of this program, the student will be able to analyse dynamical systems and represent them through differential equationsEngineers Australia - Professional Engineer (Stage 1",Dynamic systems modeling; Vibration analysis and control; Feedback control system design,Dynamic systems modeling; Vibration analysis and control; Feedback control system design,System dynamics and modeling; Vibration isolation techniques; Feedback control mechanisms including PID controllers,Engineering system dynamics; free and forced response analysis; linearization techniques,"This course teaches students to model and analyze engineering systems' dynamics, enabling them to design and control vibrations, automatic control, and feedback controllers."
ZEIT3503,Aerodynamics,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3503&activityGroupId=1,"ZEIT 3503 is a 3rd year 6UoC core course for the BE Aero and BTech Aero programs.
This course builds on ZEIT2500 Thermofluids and ZEIT2503 Fluid Mechanics. The fluid mechanical knowledge assumed in the present course is the knowledge of the physical principles and, in particular, the conservation laws governing fluid flow and the forces exerted by fluids as they flow over solid objects.
The primary aim of this course is to impart knowledge and understanding of how wings and other bodies produce aerodynamic forces known as lift and drag in flight/motion. The course also aims at elucidating the physical origins of the more subtle aspects of the interaction between a fluid and a solid.
As flight speed rises, the physical behaviour of the flow around a solid body, such as an aircraft, alters markedly causing major changes in the forces the flow exerts on the body. Detailed understanding of flow behaviour is therefore vital for ensuring that an aircraft will behave as desired throughout the full range of its flight regime.
A further aim is to have students experience the acquisition of non-intuitive knowledge that is not easily accessible. This fits into the whole program’s underlying purpose to teach students how to learn.
A third aim is to demonstrate that such apparently esoteric theory can inform us about flight in “the real world”.",The primary aim of this course is to impart knowledge and understanding of how wings and other bodies produce aerodynamic forces known as lift and drag in flight/motion. The course also aims at elucidating the physical origins of the more subtle aspects of the interaction between a fluid and a solid.,"Estimate the loading imparted on a structure by a shock or blast wavePEE1
Perform basic calculations to determine the flow properties in simple two-dimensional compressible flowsPEE1
Construct inviscid flow patterns around objects of simple shape by using the fundamental “building block” flows of Potential Flow TheoryEngineers Australia - Engineering Technologist (Stage 1
Estimate the loading imparted on a structure by a shock or blast waveEngineers Australia - Engineering Technologist (Stage 1
Determine the lift and drag of simple geometric structures in supersonic flowsEngineers Australia - Engineering Technologist (Stage 1
Construct inviscid flow patterns around objects of simple shape by using the fundamental “building block” flows of Potential Flow Theory
Determine the lift and drag of simple geometric structures in supersonic flows
Perform basic calculations to determine the flow properties in simple two-dimensional compressible flowsEngineers Australia - Engineering Technologist (Stage 1
Determine the lift and drag of simple geometric structures in supersonic flowsET2
Determine the lift and drag for airfoils and finite wings in incompressible flowsEngineers Australia - Engineering Technologist (Stage 1
Construct inviscid flow patterns around objects of simple shape by using the fundamental “building block” flows of Potential Flow TheoryPEE2
Determine the lift and drag for airfoils and finite wings in incompressible flows
Perform basic calculations to determine the flow properties in simple two-dimensional compressible flows
Estimate the loading imparted on a structure by a shock or blast wave
Determine the lift and drag for airfoils and finite wings in incompressible flowsPEE2","Course Description: ZEIT 3503 is a 3rd year 6UoC core course for the BE Aero and BTech Aero programs.
This course builds on ZEIT2500 Thermofluids and ZEIT2503 Fluid Mechanics. The fluid mechanical knowledge assumed in the present course is the knowledge of the physical principles and, in particular, the conservation laws governing fluid flow and the forces exerted by fluids as they flow over solid objects.
The primary aim of this course is to impart knowledge and understanding of how wings and other bodies produce aerodynamic forces known as lift and drag in flight/motion. The course also aims at elucidating the physical origins of the more subtle aspects of the interaction between a fluid and a solid.
As flight speed rises, the physical behaviour of the flow around a solid body, such as an aircraft, alters markedly causing major changes in the forces the flow exerts on the body. Detailed understanding of flow behaviour is therefore vital for ensuring that an aircraft will behave as desired throughout the full range of its flight regime.
A further aim is to have students experience the acquisition of non-intuitive knowledge that is not easily accessible. This fits into the whole program’s underlying purpose to teach students how to learn.
A third aim is to demonstrate that such apparently esoteric theory can inform us about flight in “the real world”.
Course Aims: The primary aim of this course is to impart knowledge and understanding of how wings and other bodies produce aerodynamic forces known as lift and drag in flight/motion. The course also aims at elucidating the physical origins of the more subtle aspects of the interaction between a fluid and a solid.
Course Learning Outcomes: Estimate the loading imparted on a structure by a shock or blast wavePEE1
Perform basic calculations to determine the flow properties in simple two-dimensional compressible flowsPEE1
Construct inviscid flow patterns around objects of simple shape by using the fundamental “building block” flows of Potential Flow TheoryEngineers Australia - Engineering Technologist (Stage 1
Estimate the loading imparted on a structure by a shock or blast waveEngineers Australia - Engineering Technologist (Stage 1
Determine the lift and drag of simple geometric structures in supersonic flowsEngineers Australia - Engineering Technologist (Stage 1
Construct inviscid flow patterns around objects of simple shape by using the fundamental “building block” flows of Potential Flow Theory
Determine the lift and drag of simple geometric structures in supersonic flows
Perform basic calculations to determine the flow properties in simple two-dimensional compressible flowsEngineers Australia - Engineering Technologist (Stage 1
Determine the lift and drag of simple geometric structures in supersonic flowsET2
Determine the lift and drag for airfoils and finite wings in incompressible flowsEngineers Australia - Engineering Technologist (Stage 1
Construct inviscid flow patterns around objects of simple shape by using the fundamental “building block” flows of Potential Flow TheoryPEE2
Determine the lift and drag for airfoils and finite wings in incompressible flows
Perform basic calculations to determine the flow properties in simple two-dimensional compressible flows
Estimate the loading imparted on a structure by a shock or blast wave
Determine the lift and drag for airfoils and finite wings in incompressible flowsPEE2",Aerodynamic analysis; Compressible and incompressible flow dynamics; Potential Flow Theory application,Aerodynamic analysis; Compressible and incompressible flow dynamics; Potential Flow Theory,Aerodynamic forces (lift and drag); Flow behavior around solid objects; Shock and blast wave effects on structures,Aerodynamic forces in various flight regimes; interaction between fluid and solid bodies; fundamental principles of fluid mechanics,"This course develops knowledge of aerodynamic forces, particularly lift and drag, and their physical origins, applying fundamental principles to real-world flight scenarios."
ZEIT3600,Structural Analysis,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3600&activityGroupId=1,"Fundamental to structural engineering is the ability to make predictions about how structures will behave when they are subject to some actions. For example, when the Sydney Harbour Bridge was designed by engineers, they needed to be able to predict how it would behave so that they could be confident that it would not fail when loaded by cars, trucks and trains. Making such predictions is never easy. There are however a range of mathematically based analytical techniques which can be used to make reliable and accurate predictions.",The course aims to introduce the students to some of the methods used in structural analysis.Thecourse covers the fundamental theorems of structural analysis and serves as an introduction to more advanced structural analysis methods.,"Apply moment distribution method to analyse statically indeterminate structuresPEE1
Calculate deflections in structuresEngineers Australia - Engineering Technologist (Stage 1
Evaluate and construct shear force, normal force, and bending moment diagrams for beams and framesEngineers Australia - Engineering Technologist (Stage 1
Apply the force method to analyse statically indeterminate structuresPEE2
Apply moment distribution method to analyse statically indeterminate structures
Calculate deflections in structuresPEE2
Evaluate and construct shear force, normal force, and bending moment diagrams for beams and framesPEE2
Evaluate and construct shear force, normal force, and bending moment diagrams for beams and frames
Calculate deflections in structures
Apply matrix structural analysis to analyse complex indeterminate structures using computer toolsEngineers Australia - Engineering Technologist (Stage 1
Apply the force method to analyse statically indeterminate structures
Apply the force method to analyse statically indeterminate structuresEngineers Australia - Engineering Technologist (Stage 1
Apply matrix structural analysis to analyse complex indeterminate structures using computer toolsET1
Apply matrix structural analysis to analyse complex indeterminate structures using computer tools
Apply moment distribution method to analyse statically indeterminate structuresEngineers Australia - Engineering Technologist (Stage 1","Course Description: Fundamental to structural engineering is the ability to make predictions about how structures will behave when they are subject to some actions. For example, when the Sydney Harbour Bridge was designed by engineers, they needed to be able to predict how it would behave so that they could be confident that it would not fail when loaded by cars, trucks and trains. Making such predictions is never easy. There are however a range of mathematically based analytical techniques which can be used to make reliable and accurate predictions.
Course Aims: The course aims to introduce the students to some of the methods used in structural analysis.Thecourse covers the fundamental theorems of structural analysis and serves as an introduction to more advanced structural analysis methods.
Course Learning Outcomes: Apply moment distribution method to analyse statically indeterminate structuresPEE1
Calculate deflections in structuresEngineers Australia - Engineering Technologist (Stage 1
Evaluate and construct shear force, normal force, and bending moment diagrams for beams and framesEngineers Australia - Engineering Technologist (Stage 1
Apply the force method to analyse statically indeterminate structuresPEE2
Apply moment distribution method to analyse statically indeterminate structures
Calculate deflections in structuresPEE2
Evaluate and construct shear force, normal force, and bending moment diagrams for beams and framesPEE2
Evaluate and construct shear force, normal force, and bending moment diagrams for beams and frames
Calculate deflections in structures
Apply matrix structural analysis to analyse complex indeterminate structures using computer toolsEngineers Australia - Engineering Technologist (Stage 1
Apply the force method to analyse statically indeterminate structures
Apply the force method to analyse statically indeterminate structuresEngineers Australia - Engineering Technologist (Stage 1
Apply matrix structural analysis to analyse complex indeterminate structures using computer toolsET1
Apply matrix structural analysis to analyse complex indeterminate structures using computer tools
Apply moment distribution method to analyse statically indeterminate structuresEngineers Australia - Engineering Technologist (Stage 1",Structural analysis; Computational modeling in structural engineering; Static and dynamic analysis techniques,Structural analysis; Computational modeling in structural engineering; Static and dynamic analysis techniques,Force and moment distribution methods; Matrix structural analysis; Construction of force diagrams for structural components,Analysis of statically indeterminate structures; construction of shear force and bending moment diagrams; calculation of structural deflections,This course introduces students to analytical techniques for predicting structure behavior under various actions.
ZEIT3602,Geotechnical Design,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3602&activityGroupId=1,"The topics to be covered in this course are:
Shear strength of soilsPrinciples of laboratory direct shear and triaxial testingLateral earth pressure theory and design of retaining structuresStability of retaining structuresSlope stabilityGround InvestigationStress analysis in geotechnical engineeringIn-situ load transfer and settlement based on elastic theoryBearing capacity theory","Geotechnical engineering is the branch of civil engineering related to soil mechanics, stability of soil structures and soil/structure interaction. Geotechnical engineering covers problems in foundation design, design of retaining structures, design of earth and rock fill dams, slope stability analysis, groundwater flow modelling, earthquake engineering, landfill design, and more. Almost all man-made structures involve some type of geotechnical engineering problem.
This course builds on what you have learnt in Soil Mechanics and Engineering Geology in your Second year to learn more of the basic soil mechanics principles and to apply them to solve common geotechnical engineering problems","Students will learn how to apply geotechnical engineering theories for the analysis / design of retaining wall structures, slope stability, and shallow foundations
Understand how to determine geotechnical engineering soil parameter/properties such as seepage force, shear strength parameters, earth pressure coefficients, ultimate bearing capacity, and factor of safety values
Students will be able to explain soil mechanics principles including effective stress, shear strength, earth pressure, slope stability, and bearing capacity","Course Description: The topics to be covered in this course are:
Shear strength of soilsPrinciples of laboratory direct shear and triaxial testingLateral earth pressure theory and design of retaining structuresStability of retaining structuresSlope stabilityGround InvestigationStress analysis in geotechnical engineeringIn-situ load transfer and settlement based on elastic theoryBearing capacity theory
Course Aims: Geotechnical engineering is the branch of civil engineering related to soil mechanics, stability of soil structures and soil/structure interaction. Geotechnical engineering covers problems in foundation design, design of retaining structures, design of earth and rock fill dams, slope stability analysis, groundwater flow modelling, earthquake engineering, landfill design, and more. Almost all man-made structures involve some type of geotechnical engineering problem.
This course builds on what you have learnt in Soil Mechanics and Engineering Geology in your Second year to learn more of the basic soil mechanics principles and to apply them to solve common geotechnical engineering problems
Course Learning Outcomes: Students will learn how to apply geotechnical engineering theories for the analysis / design of retaining wall structures, slope stability, and shallow foundations
Understand how to determine geotechnical engineering soil parameter/properties such as seepage force, shear strength parameters, earth pressure coefficients, ultimate bearing capacity, and factor of safety values
Students will be able to explain soil mechanics principles including effective stress, shear strength, earth pressure, slope stability, and bearing capacity",Geotechnical engineering analysis; Soil mechanics principles; Structural stability assessment,Geotechnical engineering analysis; Soil mechanics principles; Structural stability assessment,"Shear strength of soils, stability of retaining structures, slope stability, ground investigation techniques, stress analysis in geotechnical contexts",Soil mechanics principles; geotechnical engineering theories; foundation design principles,"This course applies geotechnical engineering theories for analyzing/designing retaining walls, slope stability, and shallow foundations."
ZEIT3607,Transport Planning and Engineering,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3607&activityGroupId=1,"This course provides an introduction to the standard practice in transport planning and traffic engineering. It will cover the basic topics of travel demand forecasting and traffic flow theory for civil engineering applications.
The course contents include four-step transport planning method, trip generation, trip distribution, mode choice, traffic assignment, traffic flow diagrams, geometric design, and horizontal and vertical alignments of highways.
Basic knowledge in statistics, surveying and engineering drawing is required.","The goal of this course is to offer students a thorough comprehension of standard practices in transport planning and traffic engineering. Covering fundamental topics in transport studies for civil engineering applications, the course highlights the application of mathematical methods at different stages of transport planning and engineering. It also provides insight into the fundamental characteristics of transport systems. Furthermore, students will gain an understanding of the standard processes involved in strategic transport planning. Ultimately, the course aims to equip students with the knowledge and skills essential for proficiency in the realm of transport planning and traffic engineering.","Apply mathematical methods related to various stages of transport planning and travel demand forecastingPEE2
Explain the standard processes for strategic transport planning
Apply mathematical methods related to various stages of transport planning and travel demand forecasting
Explain the basic characteristics of  transport systemsPEE1
Explain the basic characteristics of  transport systemsEngineers Australia - Professional Engineer (Stage 1
Design vertical and horizontal alignments in geometric designPEE1
Explain the standard processes for strategic transport planningPEE3
Explain the standard processes for strategic transport planningEngineers Australia - Professional Engineer (Stage 1
Explain the basic characteristics of  transport systems
Design vertical and horizontal alignments in geometric design
Apply mathematical methods related to various stages of transport planning and travel demand forecastingEngineers Australia - Professional Engineer (Stage 1
Design vertical and horizontal alignments in geometric designEngineers Australia - Professional Engineer (Stage 1","Course Description: This course provides an introduction to the standard practice in transport planning and traffic engineering. It will cover the basic topics of travel demand forecasting and traffic flow theory for civil engineering applications.
The course contents include four-step transport planning method, trip generation, trip distribution, mode choice, traffic assignment, traffic flow diagrams, geometric design, and horizontal and vertical alignments of highways.
Basic knowledge in statistics, surveying and engineering drawing is required.
Course Aims: The goal of this course is to offer students a thorough comprehension of standard practices in transport planning and traffic engineering. Covering fundamental topics in transport studies for civil engineering applications, the course highlights the application of mathematical methods at different stages of transport planning and engineering. It also provides insight into the fundamental characteristics of transport systems. Furthermore, students will gain an understanding of the standard processes involved in strategic transport planning. Ultimately, the course aims to equip students with the knowledge and skills essential for proficiency in the realm of transport planning and traffic engineering.
Course Learning Outcomes: Apply mathematical methods related to various stages of transport planning and travel demand forecastingPEE2
Explain the standard processes for strategic transport planning
Apply mathematical methods related to various stages of transport planning and travel demand forecasting
Explain the basic characteristics of  transport systemsPEE1
Explain the basic characteristics of  transport systemsEngineers Australia - Professional Engineer (Stage 
Design vertical and horizontal alignments in geometric designPEE1
Explain the standard processes for strategic transport planningPEE3
Explain the standard processes for strategic transport planningEngineers Australia - Professional Engineer (Stage 1
Explain the basic characteristics of  transport systems
Design vertical and horizontal alignments in geometric design
Apply mathematical methods related to various stages of transport planning and travel demand forecastingEngineers Australia - Professional Engineer (Stage 1
Design vertical and horizontal alignments in geometric designEngineers Australia - Professional Engineer (Stage 1",Transport planning; Traffic engineering; Geometric design of roadways,Transport planning; Traffic engineering; Geometric design of roadways,"Travel demand forecasting, traffic flow theory, four-step transport planning method, strategic transport planning",Transport systems characteristics; strategic transport planning; engineering design principles,"This course introduces students to standard practices in transport planning and traffic engineering by applying mathematical methods to forecast demand, plan infrastructure, and analyze transportation systems."
ZEIT3750,"Naval Architecture Practice, Hydrostatics and Stability",School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3750&activityGroupId=1,"The Practice component of this course introduces surface ship and submarine terminology and the role of international and Australian independent and statutory authorities concerned with ship classification, naval and commercial standards, vessel registration, safety and survey; vessel stability measurement and assessment, and the professional practice of the naval architect. Excursions may include visits to drydock and harbour facilities, consultancies, and the conduct of an inclining experiment. The Hydrostatics and Stability component introduces ship and submarine geometry, hydrostatic particulars, intact and damaged stability, subdivision, launching and grounding. A practice-based introduction to relevant software is provided.","Undergraduates may take the course as an engineering electivein the BE programs of SET. The course is foundational to the standard BE (Hons) (Naval Architecture) program and its CDF variant (Year 3). The course provides a blend of essential specialised engineering knowledge, skills and application in the key areas of: Part A: Naval architectural practice, and; Part B: Hydrostatics and stability","Correctly apply stability criteria to various ship types and perform a range of analysesEngineers Australia - Professional Engineer (Stage 1
Develop professional practice, engaging and collaborating with ship design, construction and/or repair organisations through excursions, interviews and reportsPEE1
Recognise, recall, reference, interpret and correctly apply the requirements of domestic and international survey, flag and convention authorities using correct terminology
Understand and calculate hydrostatic principal particulars and stability analysis using first principles and computational methods using industry-standard softwareEngineers Australia - Professional Engineer (Stage 1
Understand and calculate hydrostatic principal particulars and stability analysis using first principles and computational methods using industry-standard softwarePEE1
Correctly apply stability criteria to various ship types and perform a range of analysesPEE1
Develop professional practice, engaging and collaborating with ship design, construction and/or repair organisations through excursions, interviews and reportsEngineers Australia - Professional Engineer (Stage 1
Understand and calculate hydrostatic principal particulars and stability analysis using first principles and computational methods using industry-standard software
Recognise, recall, reference, interpret and correctly apply the requirements of domestic and international survey, flag and convention authorities using correct terminologyPEE1
Recognise, recall, reference, interpret and correctly apply the requirements of domestic and international survey, flag and convention authorities using correct terminologyEngineers Australia - Professional Engineer (Stage 1
Correctly apply stability criteria to various ship types and perform a range of analyses
Develop professional practice, engaging and collaborating with ship design, construction and/or repair organisations through excursions, interviews and reports","Course Description: The Practice component of this course introduces surface ship and submarine terminology and the role of international and Australian independent and statutory authorities concerned with ship classification, naval and commercial standards, vessel registration, safety and survey; vessel stability measurement and assessment, and the professional practice of the naval architect. Excursions may include visits to drydock and harbour facilities, consultancies, and the conduct of an inclining experiment. The Hydrostatics and Stability component introduces ship and submarine geometry, hydrostatic particulars, intact and damaged stability, subdivision, launching and grounding. A practice-based introduction to relevant software is provided.
Course Aims: Undergraduates may take the course as an engineering electivein the BE programs of SET. The course is foundational to the standard BE (Hons) (Naval Architecture) program and its CDF variant (Year 3). The course provides a blend of essential specialised engineering knowledge, skills and application in the key areas of: Part A: Naval architectural practice, and; Part B: Hydrostatics and stability
Course Learning Outcomes: Correctly apply stability criteria to various ship types and perform a range of analysesEngineers Australia - Professional Engineer (Stage 1
Develop professional practice, engaging and collaborating with ship design, construction and/or repair organisations through excursions, interviews and reportsPEE1
Recognise, recall, reference, interpret and correctly apply the requirements of domestic and international survey, flag and convention authorities using correct terminology
Understand and calculate hydrostatic principal particulars and stability analysis using first principles and computational methods using industry-standard softwareEngineers Australia - Professional Engineer (Stage 1
Understand and calculate hydrostatic principal particulars and stability analysis using first principles and computational methods using industry-standard softwarePEE1
Correctly apply stability criteria to various ship types and perform a range of analysesPEE1
Develop professional practice, engaging and collaborating with ship design, construction and/or repair organisations through excursions, interviews and reportsEngineers Australia - Professional Engineer (Stage 1
Understand and calculate hydrostatic principal particulars and stability analysis using first principles and computational methods using industry-standard software
Recognise, recall, reference, interpret and correctly apply the requirements of domestic and international survey, flag and convention authorities using correct terminologyPEE1
Recognise, recall, reference, interpret and correctly apply the requirements of domestic and international survey, flag and convention authorities using correct terminologyEngineers Australia - Professional Engineer (Stage 1
Correctly apply stability criteria to various ship types and perform a range of analyses
Develop professional practice, engaging and collaborating with ship design, construction and/or repair organisations through excursions, interviews and reports",Naval architecture; Stability analysis; Professional standards in ship design and survey,"Ship design; Naval architecture; dynamic stability evaluation
","Ship and submarine hydrostatics, stability assessments, naval and commercial ship classification standards",Vessel stability assessment; naval standards compliance; computational methods,"This course introduces naval architectural practices, hydrostatics, and stability analysis using industry-standard software."
ZEIT3901,Engineering Research 3A,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT3901&activityGroupId=1,"This course is restricted to students undertaking the BE(Aero)(CDF), BE(Civil)(CDF), BE(Elec)(CDF), BE(Mech)(CDF), or BTech(Aero)(CDF) programs. Students undertake problem-based learning or research project on a nominated topic approved by the course authority in a specific discipline area that is commensurate with study at Year 3 level.
As one of the aims of the program is to further develop critical thinking and independent research skills, the project will involve ""hands on"" research experience in collaboration with a staff member and their research team. A supervisor, who will work closely with the student, will manage each project. Final assessment will be based on a written paper and an oral presentation, with appropriate weighting.","In this 6 unit of credit course you will undertake an individual research project under the supervision of an academic staff member. Students are expected to undertake a diverse range of projects over the length of their CDF program, to be determined in consultation with the CDF Coordinator.","Produce a survey of peer-reviewed background research literature
Demonstrate independent self-directed learning and critical thinking in approaching your research problem
Apply engineering theory to work towards achieving a project’s specific technical goals
Critically assess novel engineering theory and research projects
Prepare a substantial and logical discussion of the research project's progress, results and conclusions","Course Description: This course is restricted to students undertaking the BE(Aero)(CDF), BE(Civil)(CDF), BE(Elec)(CDF), BE(Mech)(CDF), or BTech(Aero)(CDF) programs. Students undertake problem-based learning or research project on a nominated topic approved by the course authority in a specific discipline area that is commensurate with study at Year 3 level.
As one of the aims of the program is to further develop critical thinking and independent research skills, the project will involve ""hands on"" research experience in collaboration with a staff member and their research team. A supervisor, who will work closely with the student, will manage each project. Final assessment will be based on a written paper and an oral presentation, with appropriate weighting.
Course Aims: In this 6 unit of credit course you will undertake an individual research project under the supervision of an academic staff member. Students are expected to undertake a diverse range of projects over the length of their CDF program, to be determined in consultation with the CDF Coordinator.
Course Learning Outcomes: Produce a survey of peer-reviewed background research literature
Demonstrate independent self-directed learning and critical thinking in approaching your research problem
Apply engineering theory to work towards achieving a project’s specific technical goals
Critically assess novel engineering theory and research projects
Prepare a substantial and logical discussion of the research project's progress, results and conclusions",Independent research; Critical thinking; Engineering application and assessment,Project management; Experience in conducting research; Presentation of research findings,"Problem-based learning, research methodology, student-centered projects",Conducting research projects; presenting findings; evaluating engineering theories,"This course guides students in conducting an individual research project under academic supervision, developing critical thinking, independent learning, and applying engineering theory to achieve technical goals."
ZEIT4003,Computational Fluid Dynamics,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4003&activityGroupId=1,"This is a 6 unit of credit (6UOC) course providing a hands-on introduction to Computational Fluid Dynamics using Matlab (and/or other languages such as Fortran and C/C++) and a variety of commercial CFD codes such as Fluent or CFX (as part of the Ansys software package). Treatment of different flow physics such as incompressible/compressible, steady/unsteady, laminar/turbulent is examined. Numerical techniques such as panel methods, finite difference and finite volume methods are developed. Numerical error, stability, convergence, and boundary conditions are examined in the application of CFD to engineering problems.
Primarily intended for those students intending to use CFD analysis as part of their final-year engineering thesis, the course provides a working proficiency in the Ansys software package; however the lessons learned are general and are applicable to all CFD packages including in-house codes.","The aim of this course is to provide a hands-on introduction to Computeration Fluid Dyamics using Matlab and a variety of commercial CFD codes such a Fluent, CFX, or Flowizard.","To learn how to verify and validate achieve high-quality CFD solutionsEngineers Australia - Engineering Technologist (Stage 1
To learn how to verify and validate achieve high-quality CFD solutionsET1
To learn how to verify and validate achieve high-quality CFD solutions
To learn how to apply a commercial CFD package and/or an in-house solver to be able to analyse fluid flows for typical engineering problems (e
To develop a good knowledge of the CFD methods applicable to various flow conditions, their theoretical background and limitations","Course Description: This is a 6 unit of credit (6UOC) course providing a hands-on introduction to Computational Fluid Dynamics using Matlab (and/or other languages such as Fortran and C/C++) and a variety of commercial CFD codes such as Fluent or CFX (as part of the Ansys software package). Treatment of different flow physics such as incompressible/compressible, steady/unsteady, laminar/turbulent is examined. Numerical techniques such as panel methods, finite difference and finite volume methods are developed. Numerical error, stability, convergence, and boundary conditions are examined in the application of CFD to engineering problems.
Primarily intended for those students intending to use CFD analysis as part of their final-year engineering thesis, the course provides a working proficiency in the Ansys software package; however the lessons learned are general and are applicable to all CFD packages including in-house codes.
Course Aims: The aim of this course is to provide a hands-on introduction to Computeration Fluid Dyamics using Matlab and a variety of commercial CFD codes such a Fluent, CFX, or Flowizard.
Course Learning Outcomes: To learn how to verify and validate achieve high-quality CFD solutionsEngineers Australia - Engineering Technologist (Stage 1
To learn how to verify and validate achieve high-quality CFD solutionsET1
To learn how to verify and validate achieve high-quality CFD solutions
To learn how to apply a commercial CFD package and/or an in-house solver to be able to analyse fluid flows for typical engineering problems (e
To develop a good knowledge of the CFD methods applicable to various flow conditions, their theoretical background and limitations",Computational Fluid Dynamics (CFD); Numerical modeling; Software proficiency in Matlab and Ansys,"MATLAB; Ansys; Computational Fluid Dynamics (CFD); fluid dynamics
","Numerical techniques in fluid dynamics, flow physics, CFD software application","hands-on proficiency with CFD tools; understanding of numerical error, stability, convergence, and boundary conditions; verification and validation of CFD models; theoretical underpinnings and limitations of various CFD methods","This course introduces students to Computational Fluid Dynamics using Matlab and commercial codes, enabling them to analyze fluid flows and verify high-quality solutions."
ZEIT4006,Structural Integrity Assessment,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4006&activityGroupId=1,"This is an Engineering elective course, specially designed for students wishing to specialise in the Aircraft or Ground/Marine Vehicle Maintenance. The aim of this course is to introduce you to the basic principles, theory and applications of the major non-destructive inspection (NDI) techniques employed in the manufacturing and maintenance environments in industry, and the application of the information gained from NDI, i.e. size and location of flaws, to structural integrity assessment.The first part of the course will provide an exposure to various traditional NDI techniques including liquid penetrant, ultrasonics, magnetic particle, radiography and eddy current testing, as well as an introduction to new and emerging health monitoring techniques. The second part of the course will focus on damage tolerance, durability assessment and fatigue life estimation, using failure criteria, fracture mechanics, stress life and fatigue crack growth theories.","The aim of this course is to introduce you to the basic principles, theory and applications of the major non-destructive inspection (NDI) techniques employed in the manufacturing and maintenance environments in industry, and the application of the information gained from NDI, ie. size and location of flaws, to structural integrity assessment.","On successful completion of this course, the student will be able to communicate effectively their understanding of the principles of NDT techniques and knowledge of strength criteria, fracture mechanics and fatigue
On successful completion of this course, the student will have an in-depth understanding of  the principles and theories of Strength Criteria, and Fracture Mechanics
On successful completion of this course, the student will have a comprehensive understanding of the underpinning natural and physical principles involved in the application of NDT techniques
On successful completion of this course, the student will be able to apply the techniques of Fracture Mechanics and Fatigue analysis for assessing the structural integrity of components with crack like defects","Course Description: This is an Engineering elective course, specially designed for students wishing to specialise in the Aircraft or Ground/Marine Vehicle Maintenance. The aim of this course is to introduce you to the basic principles, theory and applications of the major non-destructive inspection (NDI) techniques employed in the manufacturing and maintenance environments in industry, and the application of the information gained from NDI, i.e. size and location of flaws, to structural integrity assessment.The first part of the course will provide an exposure to various traditional NDI techniques including liquid penetrant, ultrasonics, magnetic particle, radiography and eddy current testing, as well as an introduction to new and emerging health monitoring techniques. The second part of the course will focus on damage tolerance, durability assessment and fatigue life estimation, using failure criteria, fracture mechanics, stress life and fatigue crack growth theories.
Course Aims: The aim of this course is to introduce you to the basic principles, theory and applications of the major non-destructive inspection (NDI) techniques employed in the manufacturing and maintenance environments in industry, and the application of the information gained from NDI, ie. size and location of flaws, to structural integrity assessment.
Course Learning Outcomes: On successful completion of this course, the student will be able to communicate effectively their understanding of the principles of NDT techniques and knowledge of strength criteria, fracture mechanics and fatigue
On successful completion of this course, the student will have an in-depth understanding of  the principles and theories of Strength Criteria, and Fracture Mechanics
On successful completion of this course, the student will have a comprehensive understanding of the underpinning natural and physical principles involved in the application of NDT techniques
On successful completion of this course, the student will be able to apply the techniques of Fracture Mechanics and Fatigue analysis for assessing the structural integrity of components with crack like defects",Non-destructive Inspection (NDI); Fracture mechanics; Fatigue analysis,Non-destructive Inspection (NDI); Fracture mechanics; Fatigue analysis,"NDI techniques, structural integrity assessment, damage tolerance",basic principles and applications of major NDT techniques; understanding and application of strength criteria and fracture mechanics; comprehensive grasp of the principles involved in NDT and their practical applications in engineering,"This course explores non-destructive inspection (NDI) techniques, introducing students to principles, theories, and applications in manufacturing and maintenance environments."
ZEIT4007,Rotorcraft Engineering,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4007&activityGroupId=1,"Students will be exposed to a number of topics in rotorcraft engineering. Basic helicopter configurations, such as co-axial, tandem and autogiro, are compared. Course starts with actuator disc theory and moves to more sophisticated blade element techniques for both vertical and forward flight. Special cases include autorotation an flight in ground effect. Students are introduced to the use of dimensional analysis to reduce rotorcraft flight test data and standardise test results.Design considerations such as ground resonance, crash worthiness and fatigue safe life will also be discussed. Linearised models of helicopter dynamics are developed proceeding to useful conclusions regarding helicopter stability and flight control.","The aim of this course is to expose students to a number of topics in rotorcraft engineering. Basic helicopter configurations, such as co-axial, tandem and autogiro are compared. Various rotor head designs are studied.","Compare basic helicopter configurations and rotor systemsPEE1
Compare basic helicopter configurations and rotor systems
Use actuator disc and blade element theories to predict helicopter performance
Describe the basic concepts of rotor aerodynamics in conditions of vertical flight, forward flight, autorotation and ground effect
Compare basic helicopter configurations and rotor systemsEngineers Australia - Professional Engineer (Stage 1","Course Description: Students will be exposed to a number of topics in rotorcraft engineering. Basic helicopter configurations, such as co-axial, tandem and autogiro, are compared. Course starts with actuator disc theory and moves to more sophisticated blade element techniques for both vertical and forward flight. Special cases include autorotation an flight in ground effect. Students are introduced to the use of dimensional analysis to reduce rotorcraft flight test data and standardise test results.Design considerations such as ground resonance, crash worthiness and fatigue safe life will also be discussed. Linearised models of helicopter dynamics are developed proceeding to useful conclusions regarding helicopter stability and flight control.
Course Aims: The aim of this course is to expose students to a number of topics in rotorcraft engineering. Basic helicopter configurations, such as co-axial, tandem and autogiro are compared. Various rotor head designs are studied.
Course Learning Outcomes: Compare basic helicopter configurations and rotor systemsPEE1
Compare basic helicopter configurations and rotor systems
Use actuator disc and blade element theories to predict helicopter performance
Describe the basic concepts of rotor aerodynamics in conditions of vertical flight, forward flight, autorotation and ground effect
Compare basic helicopter configurations and rotor systemsEngineers Australia - Professional Engineer (Stage 1",Rotorcraft engineering; Aerodynamic analysis; Helicopter dynamics,Rotorcraft engineering; Aerodynamic analysis; Helicopter dynamics,"Helicopter configurations, actuator disc theory, blade element theory","Proficient in analyzing basic helicopter configurations; Skilled in actuator disc and blade element theories; Applies dimensional analysis to standardize test data; Understands helicopter stability, flight control, design considerations.
","This course analyzes explores the principles and applications of rotorcraft engineering, examining helicopter configurations, dynamics, and performance."
ZEIT4014,Impact Dynamics,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4014&activityGroupId=1,"This course explores the science of impact. It will provide the student with a thorough understanding of the mechanisms behind collisions. This will include the study of how materials deform dynamically during impacts and how the deformation is affected by geometry, material properties and the size of the impact. This course will also explore ballistic penetration and the analytical and computational approaches that can be used to predict what happens to a material or structure during ballistic penetration. An overview of protection methodologies will be discussed including (and not limited to): ceramic armour; explosive reactive armour; concrete bunker approaches and protecting fortified structures and vehicles.",The aim of this course will be to provide an understanding of how materials and structures respond to impact where the velocity of collisions range from tens of metres per second to many thousands of metres per second.,"On successful completion of this course, the students will be able to show how stress waves propagate through materials and structures after a collision
On successful completion of this course, the students will be able to show how stress waves propagate through materials and structures after a collisionEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to explain the nature of a broad range of materials and the mechanisms of their deformation under high strain rates
On successful completion of this course, the students will be able to explain the experimental techniques used in laboratories to probe a material's dynamic response/Engineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to explain the mechanisms of projectile penetration and perforation
On successful completion of this course, the students will be able to explain the experimental techniques used in laboratories to probe a material's dynamic response/
On successful completion of this course, the students will be able to show how stress waves propagate through materials and structures after a collisionPEE1
On successful completion of this course, the students will be able to explain the experimental techniques used in laboratories to probe a material's dynamic response/PEE2
On successful completion of this course, the students will be able to explain the mechanisms of projectile penetration and perforationEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to show how computational codes can be used to study impact and penetration
On successful completion of this course, the students will be able to explain the mechanisms of projectile penetration and perforationPEE1
On successful completion of this course, the students will be able to show how computational codes can be used to study impact and penetrationEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to show how computational codes can be used to study impact and penetrationPEE1","Course Description: This course explores the science of impact. It will provide the student with a thorough understanding of the mechanisms behind collisions. This will include the study of how materials deform dynamically during impacts and how the deformation is affected by geometry, material properties and the size of the impact. This course will also explore ballistic penetration and the analytical and computational approaches that can be used to predict what happens to a material or structure during ballistic penetration. An overview of protection methodologies will be discussed including (and not limited to): ceramic armour; explosive reactive armour; concrete bunker approaches and protecting fortified structures and vehicles.
Course Aims: The aim of this course will be to provide an understanding of how materials and structures respond to impact where the velocity of collisions range from tens of metres per second to many thousands of metres per second.
Course Learning Outcomes: On successful completion of this course, the students will be able to show how stress waves propagate through materials and structures after a collision
On successful completion of this course, the students will be able to show how stress waves propagate through materials and structures after a collisionEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to explain the nature of a broad range of materials and the mechanisms of their deformation under high strain rates
On successful completion of this course, the students will be able to explain the experimental techniques used in laboratories to probe a material's dynamic response/Engineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to explain the mechanisms of projectile penetration and perforation
On successful completion of this course, the students will be able to explain the experimental techniques used in laboratories to probe a material's dynamic response/
On successful completion of this course, the students will be able to show how stress waves propagate through materials and structures after a collisionPEE1
On successful completion of this course, the students will be able to explain the experimental techniques used in laboratories to probe a material's dynamic response/PEE2
On successful completion of this course, the students will be able to explain the mechanisms of projectile penetration and perforationEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to show how computational codes can be used to study impact and penetration
On successful completion of this course, the students will be able to explain the mechanisms of projectile penetration and perforationPEE1
On successful completion of this course, the students will be able to show how computational codes can be used to study impact and penetrationEngineers Australia - Professional Engineer (Stage 1
On successful completion of this course, the students will be able to show how computational codes can be used to study impact and penetrationPEE1",Impact analysis; Computational modeling; Experimental techniques,dynamic material testing; Material deformation; ballistic penetration,"Material deformation, ballistic penetration, protective technologies","Expertise in dynamic deformation of materials during impacts; Analyzes how geometry and material properties affect deformation; Proficient in ballistic penetration analysis and predictive modeling; Familiar with protection methods like ceramic armor and reactive armor; Capable of using computational codes to simulate impacts and penetration; Understands propagation of stress waves in materials post-collision; Experienced in experimental techniques for dynamic material testing.
","This course examines how materials respond to impact by studying deformation mechanisms, stress wave propagation, and projectile penetration."
ZEIT4161,Algorithms for Robotics and Autonomous Systems,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4161&activityGroupId=1,"This course will provide engineering, computer science and cyber security students with insight into some of the modern algorithms used in the field of robotics and autonomous systems (RAS). Students will first be exposed to simulation techniques used to test algorithms for RAS. Topics covered will include methods for multi-robot coordination including formation control and swarming. Application of machine learning to robotics will be explored included reinforcement learning. The course will conclude with lectures on project validation and error analysis demonstrated through a student lab exercise.","This course aims to teach students how to apply and evaluate RAS algorithms, and give them the skills required to design algorithmic variants to solve specific problems. Algorithms for single and multi-agent systems will be covered, including learning, modelling, coordination and formation algorithms. Statistical methods for analysing the performance of algorithms will also be taught. Students will have the opportunity to work as individuals and in groups.","Apply a systematic approach to the design process of algorithms used for robotics and autonomous systemsET1
Conduct simulation, testing and validation of algorithms used in robotic and autonomous systems
Apply a systematic approach to the design process of algorithms used for robotics and autonomous systemsEngineers Australia - Engineering Technologist (Stage 1
Conduct simulation, testing and validation of algorithms used in robotic and autonomous systemsEngineers Australia - Engineering Technologist (Stage 1
Conduct simulation, testing and validation of algorithms used in robotic and autonomous systemsET1
Implement multi-robot command and control schemesEngineers Australia - Engineering Technologist (Stage 1
Implement multi-robot command and control schemes
Apply machine learning concepts to the solution of engineering problems in autonomous systems
Apply a systematic approach to the design process of algorithms used for robotics and autonomous systems
Implement multi-robot command and control schemesET2
Apply machine learning concepts to the solution of engineering problems in autonomous systemsEngineers Australia - Engineering Technologist (Stage 1
Apply machine learning concepts to the solution of engineering problems in autonomous systemsET3","Course Description: This course will provide engineering, computer science and cyber security students with insight into some of the modern algorithms used in the field of robotics and autonomous systems (RAS). Students will first be exposed to simulation techniques used to test algorithms for RAS. Topics covered will include methods for multi-robot coordination including formation control and swarming. Application of machine learning to robotics will be explored included reinforcement learning. The course will conclude with lectures on project validation and error analysis demonstrated through a student lab exercise.
Course Aims: This course aims to teach students how to apply and evaluate RAS algorithms, and give them the skills required to design algorithmic variants to solve specific problems. Algorithms for single and multi-agent systems will be covered, including learning, modelling, coordination and formation algorithms. Statistical methods for analysing the performance of algorithms will also be taught. Students will have the opportunity to work as individuals and in groups.
Course Learning Outcomes: Apply a systematic approach to the design process of algorithms used for robotics and autonomous systemsET1
Conduct simulation, testing and validation of algorithms used in robotic and autonomous systems
Apply a systematic approach to the design process of algorithms used for robotics and autonomous systemsEngineers Australia - Engineering Technologist (Stage 1
Conduct simulation, testing and validation of algorithms used in robotic and autonomous systemsEngineers Australia - Engineering Technologist (Stage 1
Conduct simulation, testing and validation of algorithms used in robotic and autonomous systemsET1
Implement multi-robot command and control schemesEngineers Australia - Engineering Technologist (Stage 1
Implement multi-robot command and control schemes
Apply machine learning concepts to the solution of engineering problems in autonomous systems
Apply a systematic approach to the design process of algorithms used for robotics and autonomous systems
Implement multi-robot command and control schemesET2
Apply machine learning concepts to the solution of engineering problems in autonomous systemsEngineers Australia - Engineering Technologist (Stage 1
Apply machine learning concepts to the solution of engineering problems in autonomous systemsET3",algorithm design; multi-robot coordination; simulation techniques; machine learning application; statistical performance analysis; error analysis,"robotics and autonomous systems; multi-robot command and control; reinforcement learning; formation control; swarming techniques; Robotics: robotic mapping algorithms like SLAM
",robotics and autonomous systems; multi-robot command and control; reinforcement learning; formation control; swarming techniques, project validation; algorithm testing; machine learning in engineering; systematic design processes; statistical methods for algorithms,"This course applies modern algorithms for robotics and autonomous systems, covering simulation, coordination, formation control, and machine learning techniques."
ZEIT4227,Radar Techniques and Applications,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4227&activityGroupId=1,"Radar Fundamentals; Radar Application; Pulse Radar Concepts: Range-Related Calculations, Blind Range, Range Resolution, Maximum Unambiguous Range; Radar Antennas; Radar Range Equation; Pulse Integration; Radar Cross Section; Continuous Wave Radar Concepts; Frequency-Modulated Continuous Wave Radar Concepts; Pulse Doppler Radar Concepts; Moving Target Identification Radar Concepts; Tracking Radar Techniques: Target Acquisition, Sequential Lobbing, Conical Scanning, Monopulse Tracking Techniques, Scan on Receive Only, Range Tracking, Velocity Tracking; Pulse Compression Radar Concepts: Range Resolution, Blind Range, Design Issues; Synthetic Aperture Radar Concepts: Unfocussed and Focussed Synthetic Aperture Radar, Beamwidth, Angular Resolution; Inverse Synthetic Aperture Radar Concepts; Radar Receiver Techniques; Imaging Radar; Range and Cross-Range Resolution; Image Formation and Characteristics; Backscatter Characteristics of Targets and Clutters.","This course aims at providing an introduction to radar fundamentals, principles and techniques used in both surveillance systems and environmental remote sensing programs.","Analyse the range and frequency resolutions of various radar systemsPEE1
Perform radar image processing for error correction and image classificationPEE1
Explain radar fundamentals and the parameters in range equations
Explain radar fundamentals and the parameters in range equationsPEE1
Perform radar image processing for error correction and image classification
Explain the concept of RCS and backscattering characteristics of various targets;Engineers Australia - Professional Engineer (Stage 1
Apply the learned concepts to radar system design and analyse trade-offs in the overall performance;
Explain the concept of RCS and backscattering characteristics of various targets;PEE1
Apply the learned concepts to radar system design and analyse trade-offs in the overall performance;PEE1
Analyse the range and frequency resolutions of various radar systems
Explain radar fundamentals and the parameters in range equationsEngineers Australia - Professional Engineer (Stage 1
Analyse the range and frequency resolutions of various radar systemsEngineers Australia - Professional Engineer (Stage 1
Apply the learned concepts to radar system design and analyse trade-offs in the overall performance;Engineers Australia - Professional Engineer (Stage 1
Perform radar image processing for error correction and image classificationEngineers Australia - Professional Engineer (Stage 1
Explain the concept of RCS and backscattering characteristics of various targets;","Course Description: Radar Fundamentals; Radar Application; Pulse Radar Concepts: Range-Related Calculations, Blind Range, Range Resolution, Maximum Unambiguous Range; Radar Antennas; Radar Range Equation; Pulse Integration; Radar Cross Section; Continuous Wave Radar Concepts; Frequency-Modulated Continuous Wave Radar Concepts; Pulse Doppler Radar Concepts; Moving Target Identification Radar Concepts; Tracking Radar Techniques: Target Acquisition, Sequential Lobbing, Conical Scanning, Monopulse Tracking Techniques, Scan on Receive Only, Range Tracking, Velocity Tracking; Pulse Compression Radar Concepts: Range Resolution, Blind Range, Design Issues; Synthetic Aperture Radar Concepts: Unfocussed and Focussed Synthetic Aperture Radar, Beamwidth, Angular Resolution; Inverse Synthetic Aperture Radar Concepts; Radar Receiver Techniques; Imaging Radar; Range and Cross-Range Resolution; Image Formation and Characteristics; Backscatter Characteristics of Targets and Clutters.
Course Aims: This course aims at providing an introduction to radar fundamentals, principles and techniques used in both surveillance systems and environmental remote sensing programs.
Course Learning Outcomes: Analyse the range and frequency resolutions of various radar systemsPEE1
Perform radar image processing for error correction and image classificationPEE1
Explain radar fundamentals and the parameters in range equations
Explain radar fundamentals and the parameters in range equationsPEE1
Perform radar image processing for error correction and image classification
Explain the concept of RCS and backscattering characteristics of various targets;Engineers Australia - Professional Engineer (Stage 1
Apply the learned concepts to radar system design and analyse trade-offs in the overall performance;
Explain the concept of RCS and backscattering characteristics of various targets;PEE1
Apply the learned concepts to radar system design and analyse trade-offs in the overall performance;PEE1
Analyse the range and frequency resolutions of various radar systems
Explain radar fundamentals and the parameters in range equationsEngineers Australia - Professional Engineer (Stage 1
Analyse the range and frequency resolutions of various radar systemsEngineers Australia - Professional Engineer (Stage 1
Apply the learned concepts to radar system design and analyse trade-offs in the overall performance;Engineers Australia - Professional Engineer (Stage 1
Perform radar image processing for error correction and image classificationEngineers Australia - Professional Engineer (Stage 1
Explain the concept of RCS and backscattering characteristics of various targets;",radar system analysis; radar image processing; error correction techniques; radar system design,radar image processing; error correction techniques; radar system design,radar fundamentals; pulse radar concepts; continuous wave and pulse Doppler radar; synthetic aperture radar; radar cross section (RCS); radar receiver techniques; radar tracking techniques,radar range equations; radar resolution calculations; radar antenna behavior; backscatter characteristics of targets; design and performance trade-offs in radar systems,"This course analyzes and applies fundamental concepts, techniques, and trade-offs in radar systems, including surveillance and remote sensing programs."
ZEIT4230,Electrical Engineering Design Project 2,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4230&activityGroupId=1,"In this course the knowledge and skills gained in the first three years of the Electrical Engineering program are applied to solve a specified electronic system design task. Students work individually and in small groups to design, construct and test various sub-systems, and then integrate these components to produce the final system solution. A strong project management philosophy underpins the engineering approach adopted in this course. The final stage of the course focuses on an evaluation of the design methodology, the completed system's performance as compared to the initial requirements, and a reflection of the overall project experience and lessons learned.","The purpose of this course is to further develop your skills with the electronic system design process, entailing the analysis, design, construction, test and evaluation of electronic systems to achieve a user need, from which you will articulate a set of specifications or performance goal(s). The details vary depending on the project, but range from the high level functional design and milestone identification to component level analysis, design and development engineering (part selection, component pin out and ratings identification, component value calculation, operating point selection, etc). In this course you will draw on the knowledge and skills you have acquired in previous courses. On completion of the course you will have had the opportunity to apply electrical engineering discipline and project management skills to achieve the project outcomes.","Apply Electrical Engineering foundational knowledge, techniques and tools and to meet a user requirement
Work effectively in a team environment to achieve the project's goals
Select the most suitable design methodologies and technologies in developing engineering solutions
Develop, apply and document comprehensive test and characterisation procedures to capture system performance
Communicate appropriate design information verbally and through documents, using the language of the discipline, mathematics and drawings","Course Description: In this course the knowledge and skills gained in the first three years of the Electrical Engineering program are applied to solve a specified electronic system design task. Students work individually and in small groups to design, construct and test various sub-systems, and then integrate these components to produce the final system solution. A strong project management philosophy underpins the engineering approach adopted in this course. The final stage of the course focuses on an evaluation of the design methodology, the completed system's performance as compared to the initial requirements, and a reflection of the overall project experience and lessons learned.
Course Aims: The purpose of this course is to further develop your skills with the electronic system design process, entailing the analysis, design, construction, test and evaluation of electronic systems to achieve a user need, from which you will articulate a set of specifications or performance goal(s). The details vary depending on the project, but range from the high level functional design and milestone identification to component level analysis, design and development engineering (part selection, component pin out and ratings identification, component value calculation, operating point selection, etc). In this course you will draw on the knowledge and skills you have acquired in previous courses. On completion of the course you will have had the opportunity to apply electrical engineering discipline and project management skills to achieve the project outcomes.
Course Learning Outcomes: Apply Electrical Engineering foundational knowledge, techniques and tools and to meet a user requirement
Work effectively in a team environment to achieve the project's goals
Select the most suitable design methodologies and technologies in developing engineering solutions
Develop, apply and document comprehensive test and characterisation procedures to capture system performance
Communicate appropriate design information verbally and through documents, using the language of the discipline, mathematics and drawings",electronic system design; project management; system integration; performance evaluation; team collaboration,Project management; team collaboration; electronic system design,design methodology; component analysis and selection; system testing and characterization; project documentation and communication,application of electrical engineering principles; selection of design methodologies; effective communication in engineering contexts; teamwork dynamics in engineering projects,This course applies learned knowledge and skills to solve a specified electronic system design task through individual and group work.
ZEIT4297,Engineering Project Extension,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4297&activityGroupId=1,"This course is only avalilable to those students who have finished their ZEIT4500 Engineering Project Awith high standard (normally at least a DN grade) as a 6 UoC expansion of the original project as a technical elective course. In general, an expansion of the scope of the original project is required.",The main aim of this course is to provide an opportunity for undergraduate students to integrate all technical and management knowledges gained during their studies and use them to undertake an in-depth research investigation in an engineering topic selected by the students.,"Demonstrate information and digital literacy in defining the scope of the research in the broader context science and engineering
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate in-depth knowledge of a niche research area, as reported for assessment
Demonstrate rigour in analysis, critique and reflection within a design or research task
Indicated an insight into the diversity of Engineering through a course in specialist lectures","Course Description: This course is only avalilable to those students who have finished their ZEIT4500 Engineering Project Awith high standard (normally at least a DN grade) as a 6 UoC expansion of the original project as a technical elective course. In general, an expansion of the scope of the original project is required.
Course Aims: The main aim of this course is to provide an opportunity for undergraduate students to integrate all technical and management knowledges gained during their studies and use them to undertake an in-depth research investigation in an engineering topic selected by the students.
Course Learning Outcomes: Demonstrate information and digital literacy in defining the scope of the research in the broader context science and engineering
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate in-depth knowledge of a niche research area, as reported for assessment
Demonstrate rigour in analysis, critique and reflection within a design or research task
Indicated an insight into the diversity of Engineering through a course in specialist lectures",advanced research and analysis; project management; digital and information literacy; effective communication in various formats,Project management; Experience in conducting research; Presentation of research findings,in-depth research methodologies; integration of technical and management knowledge; scope definition in engineering projects; documentation and reporting of research findings,in-depth research methodologies; technical and management integration; project scope definition; professional communication standards.,This course enables students to integrate technical and management knowledge by conducting in-depth research investigations in engineering topics.
ZEIT4500,Engineering Project A,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4500&activityGroupId=1,This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so students will learn and refine skills in managing a low risk project.,The main aim of this course is to provide an opportunity for undergraduate students to integrate all technical and management knowledges gained during their studies and use them to undertake an in-depth research investigation in an engineering topic selected by the students.,"Demonstrate information and digital literacy in defining the scope of the research in the broader context science and engineering
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate in-depth knowledge of a niche research area, as reported for assessment
Demonstrate rigour in analysis, critique and reflection within a design or research task
Indicated an insight into the diversity of Engineering through a course in specialist lectures","Course Description: This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so students will learn and refine skills in managing a low risk project.
Course Aims: The main aim of this course is to provide an opportunity for undergraduate students to integrate all technical and management knowledges gained during their studies and use them to undertake an in-depth research investigation in an engineering topic selected by the students.
Course Learning Outcomes: Demonstrate information and digital literacy in defining the scope of the research in the broader context science and engineering
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate in-depth knowledge of a niche research area, as reported for assessment
Demonstrate rigour in analysis, critique and reflection within a design or research task
Indicated an insight into the diversity of Engineering through a course in specialist lectures",project management; advanced research; professional communication; digital literacy,Project management; Experience in conducting research; Presentation of research findings,capstone project execution; research scope definition; communication strategies; industry-related research documentation,integration of technical and managerial aspects; in-depth investigation techniques; niche area expertise; engineering diversity insights.,This course enables students to consolidate skills and knowledge by conducting an in-depth research investigation in an engineering topic of their choice.
ZEIT4501,Engineering Project B,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4501&activityGroupId=1,This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so students will learn and refine skills in managing a low risk project.,The main aim of this course is to provide an opportunity for undergraduate students to integrate all technical and management knowledges gained during their studies and use them to undertake an in-depth research investigation in an engineering topic selected by the students.,"Demonstrate information and digital literacy in defining the scope of the research in the broader context science and engineering
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate in-depth knowledge of a niche research area, as reported for assessment
Demonstrate rigour in analysis, critique and reflection within a design or research task
Indicated an insight into the diversity of Engineering through a course in specialist lectures","Course Description: This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so students will learn and refine skills in managing a low risk project.
Course Aims: The main aim of this course is to provide an opportunity for undergraduate students to integrate all technical and management knowledges gained during their studies and use them to undertake an in-depth research investigation in an engineering topic selected by the students.
Course Learning Outcomes: Demonstrate information and digital literacy in defining the scope of the research in the broader context science and engineering
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate in-depth knowledge of a niche research area, as reported for assessment
Demonstrate rigour in analysis, critique and reflection within a design or research task
Indicated an insight into the diversity of Engineering through a course in specialist lectures",project management; advanced research; professional communication; digital literacy,Project management; Experience in conducting research; Presentation of research findings,capstone project execution; research scope definition; communication strategies; industry-related research documentation,technical and managerial integration; research investigation techniques; niche area expertise; engineering diversity insights.,"This course synthesizes students' skills and knowledge by allowing them to undertake a low-risk research project, developing their management, communication, and problem-solving abilities."
ZEIT4502,Aircraft and Systems Design 2,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4502&activityGroupId=1,"Students in Aircraft and Systems Design 2 will generally continue the preliminary design that they began in the first semester of the class with a greater focus on detailed design and testing. Advanced students will be given an option to explore a new design, moving through both ASD1 and ASD2 material. After a revision of flight performance, the course develops much more detailed estimates of the design lift, drag, and weight and balance distributions. A propulsion system design is undertaken, coupled with a more detailed estimate of the aircraft's performance. Third, simulated flight testing is conducted to evaluate the aircraft’s dynamic stability characteristics. Finally, the methods of wind tunnel testing are used to measure drag and compare with predictions. Students work in design teams on their open-ended aircraft design project.
This course is a 6 UOC capstone course and relies on the entire scope of knowledge gained in the undergraduate Aeronautical engineering program, with a particular focus on the Fundamentals of Flight, Structures, Controls, and Aerodynamics courses. The course places a heavy emphasis on group work, open-ended design, and oral and written communication skills.",,"Perform an open-ended detail design of an aspect of aeronautical engineering related to aircraft design
Estimate aerodynamic, stability, control, and weight and balance parameters and compare with prediction and testing
Communicate your work to professionals and peers within the aviation community via oral and written presentations and design reviews
Evaluate the dynamic stability and control aspects of an aircraft design and relate it to simulated flight testing
Develop an aircraft propulsion design and relate it to aircraft performance and the overall aircraft design process","Course Description: Students in Aircraft and Systems Design 2 will generally continue the preliminary design that they began in the first semester of the class with a greater focus on detailed design and testing. Advanced students will be given an option to explore a new design, moving through both ASD1 and ASD2 material. After a revision of flight performance, the course develops much more detailed estimates of the design lift, drag, and weight and balance distributions. A propulsion system design is undertaken, coupled with a more detailed estimate of the aircraft's performance. Third, simulated flight testing is conducted to evaluate the aircraft’s dynamic stability characteristics. Finally, the methods of wind tunnel testing are used to measure drag and compare with predictions. Students work in design teams on their open-ended aircraft design project.
This course is a 6 UOC capstone course and relies on the entire scope of knowledge gained in the undergraduate Aeronautical engineering program, with a particular focus on the Fundamentals of Flight, Structures, Controls, and Aerodynamics courses. The course places a heavy emphasis on group work, open-ended design, and oral and written communication skills. Course Learning Outcomes: Perform an open-ended detail design of an aspect of aeronautical engineering related to aircraft design
Estimate aerodynamic, stability, control, and weight and balance parameters and compare with prediction and testing
Communicate your work to professionals and peers within the aviation community via oral and written presentations and design reviews
Evaluate the dynamic stability and control aspects of an aircraft design and relate it to simulated flight testing
Develop an aircraft propulsion design and relate it to aircraft performance and the overall aircraft design process",detailed aircraft design; propulsion system design; dynamic stability evaluation; wind tunnel testing,Team collaboration; aircraft design; propulsion system design; dynamic stability evaluation; wind tunnel testing,advanced aircraft design concepts; flight performance analysis; aerodynamic parameter estimation; group collaboration in design projects,fundamentals of flight; aircraft structures; control systems; aerodynamics principles.,"This course develops: An open-ended detailed design of an aircraft aspect, integrating aerodynamics, stability, control, weight, and balance parameters."
ZEIT4600,Civil Design Practice,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4600&activityGroupId=1,"Scrutiny of the Bachelor of Civil Engineering (Hons) reveals that it is currently highly focused on engineering science and technical courses with limited integration of topics compared to real-world practice. Engineers today must constantly deal with regulatory uncertainty, data limitations, evolving methodologies, and a range of conflicting demands and opinions from clients, governments, public authorities and the community. Consequently, they need to understand (and be able to apply) sound engineering principles to the projects they undertake.These principles involve technical competence, ethical practice, appropriate management, professionalism, courtesy, safety awareness, and thorough task execution. Relevant skills include (but are not limited to) problem-solving expertise, proficiency in liaison and negotiation (with both professional bodies and individuals), research and report preparation competence, and good communication ability. In addition, engineers must cope with continual technological and organisational change in the workplace and the commercial realities of industry practice. They should also be generally aware of the legal and environmental consequences of their professional actions and commit to ongoing learning and contributions to their organisation, profession, and the community.Therefore, to facilitate the transition of the final-year students and prepare them for the tasks they will likely face once they join their respective services, the courseaims to enhance the learning process through authentic problem-solving. Students pursuing this course must work in teams and attend supplementary lectures, demonstration sessions and other regular meetings. These may include both team meetings and other project-related activities.
The course has been developed as a “project-based” assessment scheme, focusing on students taking the leadership in project activities under minimum supervision. Students must understand that the outcomes of the course will not only consider the learnings from this unit but will recapture the whole learning experience in a four-year degree period. Therefore, the intention of the lecture series is to provide additional knowledge in broader areas of civil engineering, not just focus on the project itself. The scheduled regular teaching session is 6hours weekly. Extra consultation can be arranged with teaching staff at the agreed time and in various forms. Students areanticipated to work 7additional hours onaverage each week on the project, conducting weekly project meetings and project-related activities.","The aim of this course is to give the best opportunity for the students to familiarize with the design procedure of a typical civil engineering project, and to acquire the knowledge and experience required to work in a team on the design of a civil engineering project under minimal supervision after graduation.","Practice effective and persuasive communication to technical and nontechnical audiences
Apply and analyse a complex civil engineering project to determine design requirements and constraintsAustralian Institute of Project Management (AIPM
Show ability to work in diversified groups and collaboratively in project activities, as well as effective communication in a team environment
Formulate a possible solution to a complex problem, question or issue relevant to civil engineering
Show ability to demonstrate leadership in Civil Engineering projects making decisions independently, executing them and achieving outcomes
Apply and analyse a complex civil engineering project to determine design requirements and constraintsPEE2
Practice effective and persuasive communication to technical and nontechnical audiencesPEE3
Apply concepts and principles of Construction management in the practice
Practice effective and persuasive communication to technical and nontechnical audiencesAustralian Institute of Project Management (AIPM
Apply and analyse a complex civil engineering project to determine design requirements and constraints
Formulate a possible solution to a complex problem, question or issue relevant to civil engineeringAustralian Institute of Project Management (AIPM
Formulate a possible solution to a complex problem, question or issue relevant to civil engineeringPEE1","Course Description: Scrutiny of the Bachelor of Civil Engineering (Hons) reveals that it is currently highly focused on engineering science and technical courses with limited integration of topics compared to real-world practice. Engineers today must constantly deal with regulatory uncertainty, data limitations, evolving methodologies, and a range of conflicting demands and opinions from clients, governments, public authorities and the community. Consequently, they need to understand (and be able to apply) sound engineering principles to the projects they undertake.These principles involve technical competence, ethical practice, appropriate management, professionalism, courtesy, safety awareness, and thorough task execution. Relevant skills include (but are not limited to) problem-solving expertise, proficiency in liaison and negotiation (with both professional bodies and individuals), research and report preparation competence, and good communication ability. In addition, engineers must cope with continual technological and organisational change in the workplace and the commercial realities of industry practice. They should also be generally aware of the legal and environmental consequences of their professional actions and commit to ongoing learning and contributions to their organisation, profession, and the community.Therefore, to facilitate the transition of the final-year students and prepare them for the tasks they will likely face once they join their respective services, the courseaims to enhance the learning process through authentic problem-solving. Students pursuing this course must work in teams and attend supplementary lectures, demonstration sessions and other regular meetings. These may include both team meetings and other project-related activities.
The course has been developed as a “project-based” assessment scheme, focusing on students taking the leadership in project activities under minimum supervision. Students must understand that the outcomes of the course will not only consider the learnings from this unit but will recapture the whole learning experience in a four-year degree period. Therefore, the intention of the lecture series is to provide additional knowledge in broader areas of civil engineering, not just focus on the project itself. The scheduled regular teaching session is 6hours weekly. Extra consultation can be arranged with teaching staff at the agreed time and in various forms. Students areanticipated to work 7additional hours onaverage each week on the project, conducting weekly project meetings and project-related activities.
Course Aims: The aim of this course is to give the best opportunity for the students to familiarize with the design procedure of a typical civil engineering project, and to acquire the knowledge and experience required to work in a team on the design of a civil engineering project under minimal supervision after graduation.
Course Learning Outcomes: Practice effective and persuasive communication to technical and nontechnical audiences
Apply and analyse a complex civil engineering project to determine design requirements and constraintsAustralian Institute of Project Management (AIPM
Show ability to work in diversified groups and collaboratively in project activities, as well as effective communication in a team environment
Formulate a possible solution to a complex problem, question or issue relevant to civil engineering
Show ability to demonstrate leadership in Civil Engineering projects making decisions independently, executing them and achieving outcomes
Apply and analyse a complex civil engineering project to determine design requirements and constraintsPEE2
Practice effective and persuasive communication to technical and nontechnical audiencesPEE3
Apply concepts and principles of Construction management in the practice
Practice effective and persuasive communication to technical and nontechnical audiencesAustralian Institute of Project Management (AIPM
Apply and analyse a complex civil engineering project to determine design requirements and constraints
Formulate a possible solution to a complex problem, question or issue relevant to civil engineeringAustralian Institute of Project Management (AIPM
Formulate a possible solution to a complex problem, question or issue relevant to civil engineeringPEE1",project management; effective communication; leadership; persuasive negotiation,Project management; Experience in conducting research; Presentation of research findings,civil engineering design processes; team collaboration; ethical engineering practices; construction management principles,technical engineering competence; regulatory and environmental awareness; professional and ethical responsibilities; continuous learning and adaptation in engineering practice.,This course develops students' skills in applying sound engineering principles to real-world projects through authentic problem-solving and project-based learning.
ZEIT4603,Finite Element Method,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4603&activityGroupId=1,"These days the analysis of all but the simple structures is carried out with the aid of computer programs based on the finite element method (FE). The user of the FE method has to decide what kind of elements should be used, and how many of them? Where should the mesh be fine and where may it be coarse? Can the model be simplified? How accurate will the answers be, and how can they be checked? One need not understand all the mathematics of the finite element to answer these questions. However a competent user must have an understanding of the preliminary mathematics and must be able to understand how elements behave in order to choose suitable kinds, sizes and shapes of elements, and to guard against misinterpretations and unrealistically high expectations. This course is a balanced theoretical and practical introduction to the use of the FE method. The first part deals with mathematical preliminaries such as the weighted residual methods, finite element approximation and numerical integration. The second part is an application of the finite element method to linear plane elasticity problems. The third part deals with heat transfer. All the lectures include computational work in which problems are to be solved using Matlab and ABAQUS.",This course aims to provide a balanced theoretical and practical introduction to the use of the FE method.,"To write  MATLAB codes to analyse continuum elasticity problemsPEE2
To understand the theory of finite element approximation and numerical integration
Apply the theory of weighted residual methods to discretise a continuous differential equation to an algebraic one
To understand the theory of finite element approximation and numerical integrationEngineers Australia - Professional Engineer (Stage 1
To write  MATLAB codes to analyse continuum elasticity problemsEngineers Australia - Professional Engineer (Stage 1
To use a commercial finite element software to carry out finite element analysis in solid mechanics and heat transfer
To understand the theory of finite element approximation and numerical integrationPEE2
To write  MATLAB codes to analyse continuum elasticity problems","Course Description: These days the analysis of all but the simple structures is carried out with the aid of computer programs based on the finite element method (FE). The user of the FE method has to decide what kind of elements should be used, and how many of them? Where should the mesh be fine and where may it be coarse? Can the model be simplified? How accurate will the answers be, and how can they be checked? One need not understand all the mathematics of the finite element to answer these questions. However a competent user must have an understanding of the preliminary mathematics and must be able to understand how elements behave in order to choose suitable kinds, sizes and shapes of elements, and to guard against misinterpretations and unrealistically high expectations. This course is a balanced theoretical and practical introduction to the use of the FE method. The first part deals with mathematical preliminaries such as the weighted residual methods, finite element approximation and numerical integration. The second part is an application of the finite element method to linear plane elasticity problems. The third part deals with heat transfer. All the lectures include computational work in which problems are to be solved using Matlab and ABAQUS.
Course Aims: This course aims to provide a balanced theoretical and practical introduction to the use of the FE method.
Course Learning Outcomes: To write  MATLAB codes to analyse continuum elasticity problemsPEE2
To understand the theory of finite element approximation and numerical integration
Apply the theory of weighted residual methods to discretise a continuous differential equation to an algebraic one
To understand the theory of finite element approximation and numerical integrationEngineers Australia - Professional Engineer (Stage 1
To write  MATLAB codes to analyse continuum elasticity problemsEngineers Australia - Professional Engineer (Stage 1
To use a commercial finite element software to carry out finite element analysis in solid mechanics and heat transfer
To understand the theory of finite element approximation and numerical integrationPEE2
To write  MATLAB codes to analyse continuum elasticity problems",finite element analysis; numerical integration; MATLAB programming; commercial software application,finite element method; MATLAB,finite element method; mesh optimization; problem-solving with software tools; heat transfer analysis,weighted residual methods; plane elasticity problems; practical application of theoretical concepts; software-driven engineering analysis.,"This course introduces students to the use of the Finite Element (FE) method, covering mathematical preliminaries and practical applications in solid mechanics and heat transfer."
ZEIT4604,Hydrology and Environmental Engineering Practice,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4604&activityGroupId=1,"This final-year undergraduate course exposes students to the principles and engineeringpractice of hydrology and environmental engineering. This includes the analysis of hydrological processes in surface and groundwater, precipitation, runoff, evapotranspiration, infiltration, recharge and discharge, catchment hydrologyandwater resources management. This course also examines the practice of environmental engineering of interest to civil engineering industry and Defence, includingcontamination site investigations and remediation, water and wastewater treatment, air pollution management,environmental managementand environmental impact assessment.","The aim of this course is to gain a comprehensiveunderstanding of the concepts and practice of hydrology, and the practice ofenvironmental engineering. This 6UoC course builds onthe fundamentalprinciples and application of knowledge gained in ZEIT2602 HydraulicEngineering and ZEIT3601 Environmental Engineering, for the purpose of teachingthe practiceof hydrology and environmental engineering.","Understand the principles of wastewater and water treatment, air pollution management, and contaminated site investigation and monitoring (building upon the fundamental principles learnt in previous hydraulic and environmental engineering courses
Understand the water cycle, its impacts on stormwater-based engineering design, and in the dynamics of streamflow and methods for assessing and monitoring flow levels
Demonstrate competence in engineering practice in wastewater and water treatment, air pollution management, and/or contaminated site investigation and remediation
Understand the legal, social and philosophical context and the practice of environmental management
Understand the issues associated with the management of flood routing
Demonstrate competence in assessing a catchment, in modelling the movement and retention of rainwater, and in developing appropriate stormwater designs","Course Description: This final-year undergraduate course exposes students to the principles and engineeringpractice of hydrology and environmental engineering. This includes the analysis of hydrological processes in surface and groundwater, precipitation, runoff, evapotranspiration, infiltration, recharge and discharge, catchment hydrologyandwater resources management. This course also examines the practice of environmental engineering of interest to civil engineering industry and Defence, includingcontamination site investigations and remediation, water and wastewater treatment, air pollution management,environmental managementand environmental impact assessment.
Course Aims: The aim of this course is to gain a comprehensiveunderstanding of the concepts and practice of hydrology, and the practice ofenvironmental engineering. This 6UoC course builds onthe fundamentalprinciples and application of knowledge gained in ZEIT2602 HydraulicEngineering and ZEIT3601 Environmental Engineering, for the purpose of teachingthe practiceof hydrology and environmental engineering.
Course Learning Outcomes: Understand the principles of wastewater and water treatment, air pollution management, and contaminated site investigation and monitoring (building upon the fundamental principles learnt in previous hydraulic and environmental engineering courses
Understand the water cycle, its impacts on stormwater-based engineering design, and in the dynamics of streamflow and methods for assessing and monitoring flow levels
Demonstrate competence in engineering practice in wastewater and water treatment, air pollution management, and/or contaminated site investigation and remediation
Understand the legal, social and philosophical context and the practice of environmental management
Understand the issues associated with the management of flood routing
Demonstrate competence in assessing a catchment, in modelling the movement and retention of rainwater, and in developing appropriate stormwater designs",hydrological analysis; environmental impact assessment; wastewater treatment; air pollution management,hydrological analysis; environmental impact assessment; wastewater treatment; air pollution management,hydrology principles and practices; catchment hydrology; environmental engineering applications; site contamination and remediation,water cycle dynamics; stormwater management; legal and ethical considerations in environmental engineering; practical applications of hydraulic and environmental engineering principles.,"This course develops understanding of hydrology and environmental engineering principles, practices, and applications through analysis of water cycles, treatment methods, and site investigations."
ZEIT4707,Mechanical Design 2,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4707&activityGroupId=1,"This course fits in the design stream for mechanical engineering program. It follows on from ZEIT1501 Engineering Practice and Design, ZEIT2501 Mechanical and Electronic Design and ZEIT4706 Mechanical Design 1.
It is assumed that you have successfully completed all core courses to the end of Third Year in the program 4474 Mechanical Engineering: if you have not done so, you should consult with the lecturer before commencing this course.
Mechanical design uses appropriate techniques to apply knowledge so that machines and systems can be constructed to satisfy requirements. Although the requirements are the yardstick for successful design, the design engineer is often presented with ones which are inadequate to specify the design completely and must negotiate expanded requirements to do so. It is the objective of this course to engage the participants in all aspects of the design process on a well-defined “machine”. The course also introduces principles of design optimization that is increasingly becoming an integral part of the design process.
This 6-unit course is divided into two parts: Design Optimization (50%) and Mechanical Design Project (50%). Lectures and Studio sessions will be used throughout the session to cover the above two aspects.",This course aims to introduce students to designing real life systems using multidisciplinary analysis in the face of uncertainty and methods to model and solve such classes of problems.,"Understand the fundamental principles behind formulation of optimization problems and optimization techniques
Show a deep understanding of the concepts and computational methods and tools for optimization, demonstrated through their choice and usage
Find the available information relevant to a design question posed to you
Assess the quality of the potential solutions, negotiate conflicts between systems solutions and adapt to changes to the design and associated planning during the process
Produce and/or supervise the integration of CAD models for the design
Understand the fundamental principles behind formulation of optimization problems and optimization techniquesPEE1
Understand the fundamental principles behind formulation of optimization problems and optimization techniquesEngineers Australia - Professional Engineer (Stage 1","Course Description: This course fits in the design stream for mechanical engineering program. It follows on from ZEIT1501 Engineering Practice and Design, ZEIT2501 Mechanical and Electronic Design and ZEIT4706 Mechanical Design 1.
It is assumed that you have successfully completed all core courses to the end of Third Year in the program 4474 Mechanical Engineering: if you have not done so, you should consult with the lecturer before commencing this course.
Mechanical design uses appropriate techniques to apply knowledge so that machines and systems can be constructed to satisfy requirements. Although the requirements are the yardstick for successful design, the design engineer is often presented with ones which are inadequate to specify the design completely and must negotiate expanded requirements to do so. It is the objective of this course to engage the participants in all aspects of the design process on a well-defined “machine”. The course also introduces principles of design optimization that is increasingly becoming an integral part of the design process.
This 6-unit course is divided into two parts: Design Optimization (50%) and Mechanical Design Project (50%). Lectures and Studio sessions will be used throughout the session to cover the above two aspects.
Course Aims: This course aims to introduce students to designing real life systems using multidisciplinary analysis in the face of uncertainty and methods to model and solve such classes of problems.
Course Learning Outcomes: Understand the fundamental principles behind formulation of optimization problems and optimization techniques
Show a deep understanding of the concepts and computational methods and tools for optimization, demonstrated through their choice and usage
Find the available information relevant to a design question posed to you
Assess the quality of the potential solutions, negotiate conflicts between systems solutions and adapt to changes to the design and associated planning during the process
Produce and/or supervise the integration of CAD models for the design
Understand the fundamental principles behind formulation of optimization problems and optimization techniquesPEE1
Understand the fundamental principles behind formulation of optimization problems and optimization techniquesEngineers Australia - Professional Engineer (Stage 1",optimization techniques; mechanical design; multidisciplinary analysis; CAD modeling,optimization; mechanical engineering; CAD 3D modeling,design process and optimization; real-life system design; negotiation and adaptation in design engineering,principles of mechanical engineering; computational methods for optimization; conflict resolution in system integration; continuous adaptation in design projects.,"This course applies techniques to construct machines and systems that satisfy requirements, introducing students to designing real-life systems using multidisciplinary analysis."
ZEIT4750,Ship Design 1,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4750&activityGroupId=1,"In response to a nominated design brief, all essential ship design tasks are individually completed to a preliminary stage in Ship Design 1: Principal particulars; hull lines; general arrangement; estimate of weights and centres; resistance calculation; machinery selection; performance prediction and structural design, culminating in a presentation and defence.","The course is capstone in nature and forms the first stage of a final-year ship design in the standard BE (Hons) (Naval Architecture) program and its CDF variant (Level 4 Core Course).The course provides the opportunity to develop, practice and apply skills in the key area of Ship Design.","Develop a systematic process to collect basis ship data from the literature and analyse it to decide on a set of preliminary principal particulars to meet the requirements of the provided design brief
Practice and develop the skills required to electronically generate a ship’s hullform and translate it into a preliminary lines plan and general arrangement electronic drawing set
Be capable of selecting an appropriate structural rule, commence the calculation of the scantlings of the principal structure using electronic rule sets and prepare a preliminary electronic structural general arrangement drawingEngineers Australia - Professional Engineer (Stage 1
Develop a systematic process to collect basis ship data from the literature and analyse it to decide on a set of preliminary principal particulars to meet the requirements of the provided design briefEngineers Australia - Professional Engineer (Stage 1
Perform an initial weight estimate for the vessel and produce a editable record of item masses and centres for stability assessment
Be capable of selecting an appropriate structural rule, commence the calculation of the scantlings of the principal structure using electronic rule sets and prepare a preliminary electronic structural general arrangement drawingPEE1
Practice and develop the skills required to electronically generate a ship’s hullform and translate it into a preliminary lines plan and general arrangement electronic drawing setEngineers Australia - Professional Engineer (Stage 1
Perform an initial weight estimate for the vessel and produce a editable record of item masses and centres for stability assessmentPEE1
Calculate the resistance of the vessel, derive and specify the preliminary power required to achieve the required speed, make initial engine(s
Be capable of selecting an appropriate structural rule, commence the calculation of the scantlings of the principal structure using electronic rule sets and prepare a preliminary electronic structural general arrangement drawing
Develop a systematic process to collect basis ship data from the literature and analyse it to decide on a set of preliminary principal particulars to meet the requirements of the provided design briefPEE1
Perform an initial weight estimate for the vessel and produce a editable record of item masses and centres for stability assessmentEngineers Australia - Professional Engineer (Stage 1
Practice and develop the skills required to electronically generate a ship’s hullform and translate it into a preliminary lines plan and general arrangement electronic drawing setPEE1","Course Description: In response to a nominated design brief, all essential ship design tasks are individually completed to a preliminary stage in Ship Design 1: Principal particulars; hull lines; general arrangement; estimate of weights and centres; resistance calculation; machinery selection; performance prediction and structural design, culminating in a presentation and defence.
Course Aims: The course is capstone in nature and forms the first stage of a final-year ship design in the standard BE (Hons) (Naval Architecture) program and its CDF variant (Level 4 Core Course).The course provides the opportunity to develop, practice and apply skills in the key area of Ship Design.
Course Learning Outcomes: Develop a systematic process to collect basis ship data from the literature and analyse it to decide on a set of preliminary principal particulars to meet the requirements of the provided design brief
Practice and develop the skills required to electronically generate a ship’s hullform and translate it into a preliminary lines plan and general arrangement electronic drawing set
Be capable of selecting an appropriate structural rule, commence the calculation of the scantlings of the principal structure using electronic rule sets and prepare a preliminary electronic structural general arrangement drawingEngineers Australia - Professional Engineer (Stage 1
Develop a systematic process to collect basis ship data from the literature and analyse it to decide on a set of preliminary principal particulars to meet the requirements of the provided design briefEngineers Australia - Professional Engineer (Stage 1
Perform an initial weight estimate for the vessel and produce a editable record of item masses and centres for stability assessment
Be capable of selecting an appropriate structural rule, commence the calculation of the scantlings of the principal structure using electronic rule sets and prepare a preliminary electronic structural general arrangement drawingPEE1
Practice and develop the skills required to electronically generate a ship’s hullform and translate it into a preliminary lines plan and general arrangement electronic drawing setEngineers Australia - Professional Engineer (Stage 1
Perform an initial weight estimate for the vessel and produce a editable record of item masses and centres for stability assessmentPEE1
Calculate the resistance of the vessel, derive and specify the preliminary power required to achieve the required speed, make initial engine(s
Be capable of selecting an appropriate structural rule, commence the calculation of the scantlings of the principal structure using electronic rule sets and prepare a preliminary electronic structural general arrangement drawing
Develop a systematic process to collect basis ship data from the literature and analyse it to decide on a set of preliminary principal particulars to meet the requirements of the provided design briefPEE1
Perform an initial weight estimate for the vessel and produce a editable record of item masses and centres for stability assessmentEngineers Australia - Professional Engineer (Stage 1
Practice and develop the skills required to electronically generate a ship’s hullform and translate it into a preliminary lines plan and general arrangement electronic drawing setPEE1",electronic drafting and design; structural analysis; stability assessment; resistance calculation,ship design; hullform generation; marine machinery design; structural integrity assessments,ship design processes; hullform generation; machinery selection for marine applications; structural integrity assessments,naval architecture fundamentals; utilization of electronic rule sets in design; principles of weight estimation and center of gravity analysis; performance prediction techniques in ship design.,"This course develops a systematic process to complete essential ship design tasks, including hull design, structural calculation, and performance prediction."
ZEIT4752,Ship Propulsion and Marine Engineering,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4752&activityGroupId=1,"This fourth-year course equips students with knowledge and skills required to analyse and design marine thermo-fluid engineering equipment used on board a variety of ship types. This knowledge can then be applied to obtaining effective engineering design solutions for these systems, so that they can meet their functional purposes within international statutory and regulatory frameworks.","The course aim is to provide students with a solid understanding of the workings, weaknesses, and integration of various propulsion and auxiliary systems in ships, to have the informed knowledge and be successful in their professional roles during the equipment sizing and selection process of current and future ship designs.","Explain the design features and practical constraints of marine machinery systems and components
Design ship's machinery, piping, and systems, with due consideration to classification and statutory regulations
Apply considerations of occupational health and safety and environmental protection issues to the design of marine machinery systems
Select and specify the appropriate equipment for marine power plant with due regard to reliability and maintainability
Analyse fluid and air flows in ducted pipework systems and determine appropriate pump/fan and cooler duties","Course Description: This fourth-year course equips students with knowledge and skills required to analyse and design marine thermo-fluid engineering equipment used on board a variety of ship types. This knowledge can then be applied to obtaining effective engineering design solutions for these systems, so that they can meet their functional purposes within international statutory and regulatory frameworks.
Course Aims: The course aim is to provide students with a solid understanding of the workings, weaknesses, and integration of various propulsion and auxiliary systems in ships, to have the informed knowledge and be successful in their professional roles during the equipment sizing and selection process of current and future ship designs.
Course Learning Outcomes: Explain the design features and practical constraints of marine machinery systems and components
Design ship's machinery, piping, and systems, with due consideration to classification and statutory regulations
Apply considerations of occupational health and safety and environmental protection issues to the design of marine machinery systems
Select and specify the appropriate equipment for marine power plant with due regard to reliability and maintainability
Analyse fluid and air flows in ducted pipework systems and determine appropriate pump/fan and cooler duties",marine machinery design; equipment selection; fluid dynamics analysis; regulatory compliance,marine machinery design; equipment selection; fluid dynamics analysis; regulatory compliance,propulsion system integration; auxiliary system design; environmental and safety considerations in marine engineering,ship machinery and component constraints; classification and statutory regulations in marine design; reliability and maintainability of marine power plants.,"This course equips students to analyze and design marine thermo-fluid engineering equipment, enabling effective engineering solutions that meet international statutory and regulatory frameworks."
ZEIT4901,Engineering Research 4A,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4901&activityGroupId=1,"Students will undertake a problem-based learning project of scope commensurate with the level of attainment expected of a final-year Electrical Engineering student in the CDF Students Program. The project will take the form of a piece of research or investigation, or a feasibility study or design chosen from a list of topics selected or approved by the Head of School. In each case at least one staff member will be nominated as a supervisor to provide guidance and general supervision during the project. Students will be assessed through their seminar presentations, attended by other students and members of staff, and the project thesis. Evidence of sufficient progress may be required from time to time. The thesis, which will have a nominal length of 20,000 words, is to be presented both typed and suitably bound and in electronic form.
During the year students will be required to participate in a series of specialist lectures and seminars. Specialist lectures will normally take the form of attendance by students on at least 8 occasions during the year at nominated meetings of the local professional societies.
This is the first half of a year-long course.","This research-based set of courses extends over two semesters, each with 12 UOC. Since the assessment for each is linked they are combined in this single course outline. Successful completion of two of these courses on the same topic is required. Topics for study are selected in the year previous to this enrolment, usually from a list of topics provided by the School that are closely aligned to current research directions and development platforms within the School. Provided a suitable supervisor is found within the School, topics may differ from those suggested and even may be conducted outside the School.
This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so you will learn and refine skills in managing a low risk project.","Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction, 
Exhibited communication skills for oral seminar, oral panel, and written medium, to a quality that has 
Demonstrated an in-depth knowledge of a niche research area, as reported for assessment, and,PEE2
Demonstrated an in-depth knowledge of a niche research area, as reported for assessment, and,Engineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction, Engineers Australia - Professional Engineer (Stage 1
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering, and Engineers Australia - Professional Engineer (Stage 1
Exhibited communication skills for oral seminar, oral panel, and written medium, to a quality that has PEE3
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering, and PEE2
Documented and adopted findings from work experience in Engineering in Industry, and PEE2
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering, and 
Demonstrated rigour in analysis, critique and reflection within a design or research task
Documented and adopted findings from work experience in Engineering in Industry, and 
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction, PEE2
Documented and adopted findings from work experience in Engineering in Industry, and Engineers Australia - Professional Engineer (Stage 1
Demonstrated an in-depth knowledge of a niche research area, as reported for assessment, and,
Exhibited communication skills for oral seminar, oral panel, and written medium, to a quality that has Engineers Australia - Professional Engineer (Stage 1
Indicated an insight into the diversity of Engineering through a course in specialist lectures","Course Description: Students will undertake a problem-based learning project of scope commensurate with the level of attainment expected of a final-year Electrical Engineering student in the CDF Students Program. The project will take the form of a piece of research or investigation, or a feasibility study or design chosen from a list of topics selected or approved by the Head of School. In each case at least one staff member will be nominated as a supervisor to provide guidance and general supervision during the project. Students will be assessed through their seminar presentations, attended by other students and members of staff, and the project thesis. Evidence of sufficient progress may be required from time to time. The thesis, which will have a nominal length of 20,000 words, is to be presented both typed and suitably bound and in electronic form.
During the year students will be required to participate in a series of specialist lectures and seminars. Specialist lectures will normally take the form of attendance by students on at least 8 occasions during the year at nominated meetings of the local professional societies.
This is the first half of a year-long course.
Course Aims: This research-based set of courses extends over two semesters, each with 12 UOC. Since the assessment for each is linked they are combined in this single course outline. Successful completion of two of these courses on the same topic is required. Topics for study are selected in the year previous to this enrolment, usually from a list of topics provided by the School that are closely aligned to current research directions and development platforms within the School. Provided a suitable supervisor is found within the School, topics may differ from those suggested and even may be conducted outside the School.
This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so you will learn and refine skills in managing a low risk project.
Course Learning Outcomes: Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction, 
Exhibited communication skills for oral seminar, oral panel, and written medium, to a quality that has 
Demonstrated an in-depth knowledge of a niche research area, as reported for assessment, and,PEE2
Demonstrated an in-depth knowledge of a niche research area, as reported for assessment, and,Engineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction, Engineers Australia - Professional Engineer (Stage 1
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering, and Engineers Australia - Professional Engineer (Stage 1
Exhibited communication skills for oral seminar, oral panel, and written medium, to a quality that has PEE3
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering, and PEE2
Documented and adopted findings from work experience in Engineering in Industry, and PEE2
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering, and 
Demonstrated rigour in analysis, critique and reflection within a design or research task
Documented and adopted findings from work experience in Engineering in Industry, and 
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction, PEE2
Documented and adopted findings from work experience in Engineering in Industry, and Engineers Australia - Professional Engineer (Stage 1
Demonstrated an in-depth knowledge of a niche research area, as reported for assessment, and,
Exhibited communication skills for oral seminar, oral panel, and written medium, to a quality that has Engineers Australia - Professional Engineer (Stage 1
Indicated an insight into the diversity of Engineering through a course in specialist lectures",Project management; digital literacy; communication; research and analysis,Project management; Experience in conducting research; Presentation of research findings,Electrical engineering project design; seminar presentation; thesis writing; professional development,Niche research areas in electrical engineering; application of academic learning to practical research; integration of industry experience into academic projects; compliance with professional standards set by Engineers Australia.,"This course involves a problem-based learning project, requiring students to undertake research or investigation on a topic of their choice, with guidance from a staff supervisor."
ZEIT4902,Engineering Research 4B,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT4902&activityGroupId=1,"Students will undertake a problem-based learning project of scope commensurate with the level of attainment expected of a final-year Engineering student in the CDF Students Program. The project will take the form of a piece of research or investigation, or a feasibility study or design chosen from a list of topics selected or approved by the Head of School. In each case at least one staff member will be nominated as a supervisor to provide guidance and general supervision during the project. Students will be assessed through their seminar presentations, attended by other students and members of staff, and the project thesis. Evidence of sufficient progress may be required from time to time. The thesis, which will have a nominal length of 20,000 words, is to be presented not later than the first day of the examination period. Theses must be presented both typed and suitably bound and in electronic form.
This is the second half of a year-long course.","This research-based set of courses extends over two semesters, each with 12 UOC. Since the assessment for each is linked they are combined in this single course outline. Successful completion of two of these courses on the same topic is required. Topics for study are selected in the year previous to this enrolment, usually from a list of topics provided by the School that are closely aligned to current research directions and development platforms within the School. Provided a suitable supervisor is found within the School, topics may differ from those suggested and even may be conducted outside the School.
This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so you will learn and refine skills in managing a low risk project.","Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Indicated an insight into the diversity of engineering through a course in specialist lectures
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering
Demonstrated rigour in analysis, critique and reflection within a design or research task
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate an in-depth knowledge of a niche research area, as reported for assessment","Course Description: Students will undertake a problem-based learning project of scope commensurate with the level of attainment expected of a final-year Engineering student in the CDF Students Program. The project will take the form of a piece of research or investigation, or a feasibility study or design chosen from a list of topics selected or approved by the Head of School. In each case at least one staff member will be nominated as a supervisor to provide guidance and general supervision during the project. Students will be assessed through their seminar presentations, attended by other students and members of staff, and the project thesis. Evidence of sufficient progress may be required from time to time. The thesis, which will have a nominal length of 20,000 words, is to be presented not later than the first day of the examination period. Theses must be presented both typed and suitably bound and in electronic form.
This is the second half of a year-long course.
Course Aims: This research-based set of courses extends over two semesters, each with 12 UOC. Since the assessment for each is linked they are combined in this single course outline. Successful completion of two of these courses on the same topic is required. Topics for study are selected in the year previous to this enrolment, usually from a list of topics provided by the School that are closely aligned to current research directions and development platforms within the School. Provided a suitable supervisor is found within the School, topics may differ from those suggested and even may be conducted outside the School.
This course is the “capstone” of your degree. It consolidates findings and the skills developed and refined throughout the degree. It affords the opportunity to take these skills and knowledge from other courses in the degree and forge a valuable contribution by research to the discipline. Students can take significant ownership of a minor body of research and reflect this to the wider community by presentation and written submission. In doing so you will learn and refine skills in managing a low risk project.
Course Learning Outcomes: Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that has
Documented and adopted findings from work experience in Engineering, in Industry
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasEngineers Australia - Professional Engineer (Stage 1
Experienced and refined methodology for management of a small project, as also observed through panel and peer interaction
Indicated an insight into the diversity of engineering through a course in specialist lectures
Shown application of knowledge obtained herein, and building on that learnt throughout the degree, to solve a minor research problem
Demonstrated information and digital literacy in defining the scope of the research in the broader context science and engineering
Demonstrated rigour in analysis, critique and reflection within a design or research task
Exhibit communication skills for oral seminar, oral panel, and written medium, to a quality that hasPEE3
Demonstrate an in-depth knowledge of a niche research area, as reported for assessment",Project management; effective communication; digital literacy; critical analysis and reflection,"Project management; Experience in conducting research; Presentation of research findings
",Engineering research methods; project presentation techniques; thesis writing and formatting; professional ethics and standards,Specialized knowledge in a chosen engineering field; integrating industry experience with academic research; application of theoretical knowledge to practical problems; compliance with professional standards set by Engineers Australia.,This course consolidates findings and skills developed throughout the degree by guiding students through a problem-based learning project.
ZEIT8007,Space Operations,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8007&activityGroupId=1,"Space Operations examines issues in space operations, such as orbits (including orbit perturbations and orbit determination), launch, rendezvous, re-entry, space environment, space law, coordination. Operations aspects of space applications are examined, such as communications, navigation, remote sensing, space surveillance and space situational awareness. Mission analysis and design aspects of these applications are also examined.
The major goal of the course is to challenge students to conceive space mission concepts that solve problems facing society and will help grow Australia's capability in the space domain. Students are expected to understand and identify who the end users of their space mission are and form a coherent and sustained argument for the value of their proposed mission. Achieving this aim requires understanding key multidisciplinary space operations concepts, from the basic spacecraft types, the most common orbit types and their parameters, how to investigate the most suitable orbit(s) for a particular task, and the regulatory, strategic, economic, and ethical context in which the mission must operate. The course equips students with the ability to define the mission design and operational requirements to achieve mission goals, providing a suitable requirements brief for subsequent lower level subsystem design to commence","This course aims to:

Provide students with a multidisciplinary view of the technical, strategic, regulatory, and commercial drivers that underpin space activity
Highlight the rapid change and evolution in the space sector for commercial, civilian, and defence actors
Equip students with the technical ability devise novel and creative space missions to meet emerging needs within Australia's domestic and international context
Provide students with the technical ability to perform mission analyses, mission design, and mission operations","On successful completion of this course, students will have proposed a novel and creative space mission and justified its value to society through a critical and scholarly analysis of the literature using an appropriate disciplinary style
On successful completion of this course, students will have optimized a space mission to meet defined mission goals through the application of expert technical knowledge and skills derived from the theory of orbits, mission analysis, and payload performance metrics
On successful completion of this course, students will have developed an advanced multidisciplinary view of the technical, strategic, regulatory, and commercial drivers that underpin space activity through presenting coherent and sustained arguments within an online forum
On successful completion of this course, students will have analysed the performance of different spacecraft types, orbit types and orbital parameters within a space mission proposal using an advanced and integrated understanding of the dynamic space environment","Course Description: Space Operations examines issues in space operations, such as orbits (including orbit perturbations and orbit determination), launch, rendezvous, re-entry, space environment, space law, coordination. Operations aspects of space applications are examined, such as communications, navigation, remote sensing, space surveillance and space situational awareness. Mission analysis and design aspects of these applications are also examined.
The major goal of the course is to challenge students to conceive space mission concepts that solve problems facing society and will help grow Australia's capability in the space domain. Students are expected to understand and identify who the end users of their space mission are and form a coherent and sustained argument for the value of their proposed mission. Achieving this aim requires understanding key multidisciplinary space operations concepts, from the basic spacecraft types, the most common orbit types and their parameters, how to investigate the most suitable orbit(s) for a particular task, and the regulatory, strategic, economic, and ethical context in which the mission must operate. The course equips students with the ability to define the mission design and operational requirements to achieve mission goals, providing a suitable requirements brief for subsequent lower level subsystem design to commence
Course Aims: This course aims to:

Provide students with a multidisciplinary view of the technical, strategic, regulatory, and commercial drivers that underpin space activity
Highlight the rapid change and evolution in the space sector for commercial, civilian, and defence actors
Equip students with the technical ability devise novel and creative space missions to meet emerging needs within Australia's domestic and international context
Provide students with the technical ability to perform mission analyses, mission design, and mission operations
Course Learning Outcomes: On successful completion of this course, students will have proposed a novel and creative space mission and justified its value to society through a critical and scholarly analysis of the literature using an appropriate disciplinary style
On successful completion of this course, students will have optimized a space mission to meet defined mission goals through the application of expert technical knowledge and skills derived from the theory of orbits, mission analysis, and payload performance metrics
On successful completion of this course, students will have developed an advanced multidisciplinary view of the technical, strategic, regulatory, and commercial drivers that underpin space activity through presenting coherent and sustained arguments within an online forum
On successful completion of this course, students will have analysed the performance of different spacecraft types, orbit types and orbital parameters within a space mission proposal using an advanced and integrated understanding of the dynamic space environment",Multidisciplinary analysis; mission planning and design; critical thinking; advanced technical proficiency in space operations,Orbit dynamics and determination; spacecraft mission design; space law and policy; strategic planning in space operations,Orbit dynamics and determination; spacecraft mission design; space law and policy; strategic planning in space operations,Understanding of spacecraft types and orbits; expertise in the regulatory and commercial aspects of space operations; ability to conceive and justify space missions with societal value; technical skills in mission analysis and payload optimization.,"This course conceptualizes innovative space mission solutions to societal problems, requiring multidisciplinary understanding of space operations concepts."
ZEIT8012,Space Systems Engineering Management,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8012&activityGroupId=1,"Space Systems Engineering provides those studying the engineering of space systems with a grounding in the discipline of systems engineering, applying that body of knowledge to space systems by way of example throughout the course. The course begins by providing a framework within which to develop an understanding of the processes and management practises associated with the systems engineering discipline. The underlying systems engineering process is presented and is shown to be applied repeatedly throughout the entire system lifecycle. Attention then focuses on the broad topic of systems engineering management and some of the activities normally associated with engineering management are detailed. The course also introduces tools commonly used in systems engineering and details how systems engineering coexists with other disciplines (particularly Project Management, Quality Management and Integrated Logistics Support Management). The systems engineering body of knowledge is reinforced by the use of example and tutorials throughout the course. Students are further practised though a series of individual exercises that reinforce the application of the discipline of systems engineering to the specific nature of space systems.","This course aims to:

provide those studying the engineering of space systems with a grounding in the discipline of systems engineering, applying that body of knowledge to space systems by way of example throughout the course;
provide a framework within which to develop an understanding of the processes and management practises associated with the systems engineering discipline;
present the underlying systems engineering process which is shown to be applied repeatedly throughout the entire system lifecycle;
focus on the broad topic of systems engineering management and some of the activities normally associated with engineering management are detailed;
introduce the tools commonly used in systems engineering; and
detail how systems engineering coexists with other disciplines (particularly Project Management, Quality Management and Integrated Logistics Support Management).","On successful completion of this course, students will have synthesized an advanced and integrated understanding of the space and systems engineering disciplines to develop a tailored systems engineering management plan for a given space system
On successful completion of this course, students will have developed a physical description of a space system from a set of functional requirements using systems thinking and life-cycle theories and techniques
On successful completion of this course, students will be capable of applying the core systems engineering body of knowledge to space systems problems
On successful completion of this course, students will have researched and applied contemporary systems engineering theories to break down a space programme into a sequence of appropriate reviews and phases
On successful completion of this course, students will have critically evaluated the utility of the systems-engineering body of knowledge for the design, development, implementation and sustainment of a space mission concept within an online forum","Course Description: Space Systems Engineering provides those studying the engineering of space systems with a grounding in the discipline of systems engineering, applying that body of knowledge to space systems by way of example throughout the course. The course begins by providing a framework within which to develop an understanding of the processes and management practises associated with the systems engineering discipline. The underlying systems engineering process is presented and is shown to be applied repeatedly throughout the entire system lifecycle. Attention then focuses on the broad topic of systems engineering management and some of the activities normally associated with engineering management are detailed. The course also introduces tools commonly used in systems engineering and details how systems engineering coexists with other disciplines (particularly Project Management, Quality Management and Integrated Logistics Support Management). The systems engineering body of knowledge is reinforced by the use of example and tutorials throughout the course. Students are further practised though a series of individual exercises that reinforce the application of the discipline of systems engineering to the specific nature of space systems.
Course Aims: This course aims to:

provide those studying the engineering of space systems with a grounding in the discipline of systems engineering, applying that body of knowledge to space systems by way of example throughout the course;
provide a framework within which to develop an understanding of the processes and management practises associated with the systems engineering discipline;
present the underlying systems engineering process which is shown to be applied repeatedly throughout the entire system lifecycle;
focus on the broad topic of systems engineering management and some of the activities normally associated with engineering management are detailed;
introduce the tools commonly used in systems engineering; and
detail how systems engineering coexists with other disciplines (particularly Project Management, Quality Management and Integrated Logistics Support Management).
Course Learning Outcomes: On successful completion of this course, students will have synthesized an advanced and integrated understanding of the space and systems engineering disciplines to develop a tailored systems engineering management plan for a given space system
On successful completion of this course, students will have developed a physical description of a space system from a set of functional requirements using systems thinking and life-cycle theories and techniques
On successful completion of this course, students will be capable of applying the core systems engineering body of knowledge to space systems problems
On successful completion of this course, students will have researched and applied contemporary systems engineering theories to break down a space programme into a sequence of appropriate reviews and phases
On successful completion of this course, students will have critically evaluated the utility of the systems-engineering body of knowledge for the design, development, implementation and sustainment of a space mission concept within an online forum",Systems engineering; project management; critical evaluation; technical writing and documentation,Project management; Presentation of research findings; Space systems engineering,Systems engineering processes; integration with project and quality management; systems lifecycle management; functional requirement analysis,Space systems engineering principles; systems lifecycle management; interdisciplinary integration techniques; functional requirements analysis.,"This course equips students with systems engineering principles, applies them to space systems, and integrates management practices and tools through examples and exercises."
ZEIT8016,Capability Development,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8016&activityGroupId=1,"This 6 UOC Capability and Technology Management College (CTMC) course aims to provide students with an opportunity to develop an understanding of the contemporary processes and practices associated with the development and management of capability and capability systems in Australia.
An overview is provided of the major aspects of Australia’s One Defence Capability Development System (ODCS) including defining the joint capability need, the operational concept(s) underpinning the capability definition, technology readiness, systems acquisition, project and program management, classic and model-based systems engineering approaches, requirements engineering, conceptual design, systems integration, enterprise architecture, systems safety, technical control and experimentation and test and evaluation.
Related skills are introduced including operational and business case development, cost estimation, schedule management, modelling and simulation and risk assessment.
Practical experience is provided with the definition and development of operational needs and stakeholder needs and requirements, and system requirements that are necessary for the various Defence Capability Committees and submissions to Government.
The intent is to prepare you for playing a meaningful role in delivering Australian and our Allies defence capabilities that are fit for purpose in the future Australian operating environment – one in which the nature of war may not have changed but one in which the operational tempo will challenge human decision making and cognitive abilities, intelligent and autonomous systems are endemic and lethal autonomous weapon systems are the new reality.",,"On successful completion of this program, students should be able to develop appropriate capability development artefacts for an example project
On successful completion of this program, students should be able to assess strengths and weaknesses of accepted capability development methodologies and processes
On successful completion of this program, students should be able to develop major capability development plans and artefacts
On successful completion of this program, students should be able to articulate the need for the development and management of capability
On successful completion of this program, students should be able to articulate the processes and management practices associated with the development of capability
On successful completion of this program, students should be able to assess the role and contribution of capability development in project and business contexts","Course Description: This 6 UOC Capability and Technology Management College (CTMC) course aims to provide students with an opportunity to develop an understanding of the contemporary processes and practices associated with the development and management of capability and capability systems in Australia.
An overview is provided of the major aspects of Australia’s One Defence Capability Development System (ODCS) including defining the joint capability need, the operational concept(s) underpinning the capability definition, technology readiness, systems acquisition, project and program management, classic and model-based systems engineering approaches, requirements engineering, conceptual design, systems integration, enterprise architecture, systems safety, technical control and experimentation and test and evaluation.
Related skills are introduced including operational and business case development, cost estimation, schedule management, modelling and simulation and risk assessment.
Practical experience is provided with the definition and development of operational needs and stakeholder needs and requirements, and system requirements that are necessary for the various Defence Capability Committees and submissions to Government.
The intent is to prepare you for playing a meaningful role in delivering Australian and our Allies defence capabilities that are fit for purpose in the future Australian operating environment – one in which the nature of war may not have changed but one in which the operational tempo will challenge human decision making and cognitive abilities, intelligent and autonomous systems are endemic and lethal autonomous weapon systems are the new reality. Course Learning Outcomes: On successful completion of this program, students should be able to develop appropriate capability development artefacts for an example project
On successful completion of this program, students should be able to assess strengths and weaknesses of accepted capability development methodologies and processes
On successful completion of this program, students should be able to develop major capability development plans and artefacts
On successful completion of this program, students should be able to articulate the need for the development and management of capability
On successful completion of this program, students should be able to articulate the processes and management practices associated with the development of capability
On successful completion of this program, students should be able to assess the role and contribution of capability development in project and business contexts",Capability assessment; project management; systems engineering; risk assessment; modeling and simulation.,Project management; Defence capability development,Defence capability development; systems acquisition and integration; operational needs analysis; technology readiness levels; enterprise architecture.,Capability development processes; systems acquisition and integration; operational and technology readiness assessment; defense systems project management.,This course enables students to develop an understanding of contemporary processes and practices for managing capability and systems in Australia.
ZEIT8213,Communications and Information Systems,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8213&activityGroupId=1,"Communications and Information Systems is a 6UOC course that introduces essential principles of data communication and computer networks. The data communication part focuses on the fundamentals of communication providing basic definitions. This part also introduces the Physical and Data-link layers of the network stack, specifically addressing the representation/encoding of transmitted information, hardware addresses, as well as media access control and reliable communication at the data-link layer.
The computer network part delves into the Network and Transport layers of the network stack, forming the foundation of modern communication networks, including the Internet. The discussion covers package routing at the Network layer, reliable communication at the Transport layers, and potential attacks. Finally, the Application layer, the top layer of the network stack, is introduced, with HTTP presented as an example of the Application layer protocol. The course is accompanied by practical exercises aimed at acquiring the basics of using computers to solve problems.
This practical component seeks to bridge the gap between the theory covered in lectures and the practical skills needed to solve real-world problems. Furthermore, the programming skills acquired during the course provide the means to expand beyond the covered material.",The goal of this course is to provide students with an opportunity to develop an understanding of the design and use of modern telecommunication in order to reliably and securely communicate between information systems. The course allows the students to assess any current or future communication system via understanding the underlying technologies and constituent elements of the communication protocols that forms the foundation of the Internet and other networks.,"Acquire computer-based problem solving skills and practical experience implementing algorithms forming the foundation of modern communication
Understand the functional principles of the Network Layer and the responsibilities of corresponding network-level protocols
Understand how the Physical and Data Link layers ensure information is transmitted over various physical media e
Understand the fundamental principles of telecommunication and the hierarchical structure of modern telecommunication
Understand the functional principles of the Transport Layer, the purpose of unreliable or reliable delivery, how network packets are delivered to a specific application out tens or hundreds of applications running on a single communication device
Acquire basics of cryptography and secure communication
Understand how data frames are delivered and what are the functional principles of network media access, traffic flow control, and error detection/correction at the bit-stream level","Course Description: Communications and Information Systems is a 6UOC course that introduces essential principles of data communication and computer networks. The data communication part focuses on the fundamentals of communication providing basic definitions. This part also introduces the Physical and Data-link layers of the network stack, specifically addressing the representation/encoding of transmitted information, hardware addresses, as well as media access control and reliable communication at the data-link layer.
The computer network part delves into the Network and Transport layers of the network stack, forming the foundation of modern communication networks, including the Internet. The discussion covers package routing at the Network layer, reliable communication at the Transport layers, and potential attacks. Finally, the Application layer, the top layer of the network stack, is introduced, with HTTP presented as an example of the Application layer protocol. The course is accompanied by practical exercises aimed at acquiring the basics of using computers to solve problems.
This practical component seeks to bridge the gap between the theory covered in lectures and the practical skills needed to solve real-world problems. Furthermore, the programming skills acquired during the course provide the means to expand beyond the covered material.
Course Aims: The goal of this course is to provide students with an opportunity to develop an understanding of the design and use of modern telecommunication in order to reliably and securely communicate between information systems. The course allows the students to assess any current or future communication system via understanding the underlying technologies and constituent elements of the communication protocols that forms the foundation of the Internet and other networks.
Course Learning Outcomes: Acquire computer-based problem solving skills and practical experience implementing algorithms forming the foundation of modern communication
Understand the functional principles of the Network Layer and the responsibilities of corresponding network-level protocols
Understand how the Physical and Data Link layers ensure information is transmitted over various physical media e
Understand the fundamental principles of telecommunication and the hierarchical structure of modern telecommunication
Understand the functional principles of the Transport Layer, the purpose of unreliable or reliable delivery, how network packets are delivered to a specific application out tens or hundreds of applications running on a single communication device
Acquire basics of cryptography and secure communication
Understand how data frames are delivered and what are the functional principles of network media access, traffic flow control, and error detection/correction at the bit-stream level","Computer-based problem-solving; Algorithm implementation; Practical application of network protocols; Cryptography for secure communication
","Network protocol design and analysis; network security; network programming; cryptography; network architecture
","Data communication fundamentals; Network architecture (Physical, Data-link, Network, Transport, and Application layers); Packet routing and reliable communication in networks; Cryptography and network security practices
","Principles of data communication and network layers; Design and function of telecommunication systems; Cryptography and secure communication techniques; Network protocol functionalities and security implications
","This course explores the fundamental principles of data communication and computer networks, enabling students to develop problem-solving skills and understand underlying technologies for reliable and secure communication."
ZEIT8219,Satellite Communications,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8219&activityGroupId=1,"Satellite communication are now a major part of most telecommunications networks as well as every-day lives through mobile communication systems and broadcast television. A fundamental understanding of such systems is therefore important to a wide range of system designers, engineers, and communications system users.
This course covers the fundamentals of satellites, including: the basic building blocks of a satellite; orbits; radio wave propagation and link calculations; signal and noise power; system hardware for space and ground segments; multiplexing and multiple access techniques; coding schemes; error rates, detection and correction;data rates.The course also considers incoming technologies and future trends
This is a 6 UoC course","The course is focused on the fundamental principles underlying satellite communication systems, treating each with sufficient depth to provide a balanced overview of the constituentsystem elements.","Evaluate the advantages and disadvantages of the different types of satellite orbits
Describe the following aspects of a satellite communications system: satellite subsystems, satellite orbits, frequency bands, antennas and electromagnetic wave propagation for communications between earth stations and satellites
Perform calculations required to conduct a link budget analysis of a satellite system
Perform calculations to determine properties of earth station antennas and satellite footprints
Explain the following analogue and digital communications techniques: modulation, multiplexing, channel coding and multiple access techniques as they relate to satellite communications","Course Description: Satellite communication are now a major part of most telecommunications networks as well as every-day lives through mobile communication systems and broadcast television. A fundamental understanding of such systems is therefore important to a wide range of system designers, engineers, and communications system users.
This course covers the fundamentals of satellites, including: the basic building blocks of a satellite; orbits; radio wave propagation and link calculations; signal and noise power; system hardware for space and ground segments; multiplexing and multiple access techniques; coding schemes; error rates, detection and correction;data rates.The course also considers incoming technologies and future trends
This is a 6 UoC course
Course Aims: The course is focused on the fundamental principles underlying satellite communication systems, treating each with sufficient depth to provide a balanced overview of the constituentsystem elements.
Course Learning Outcomes: Evaluate the advantages and disadvantages of the different types of satellite orbits
Describe the following aspects of a satellite communications system: satellite subsystems, satellite orbits, frequency bands, antennas and electromagnetic wave propagation for communications between earth stations and satellites
Perform calculations required to conduct a link budget analysis of a satellite system
Perform calculations to determine properties of earth station antennas and satellite footprints
Explain the following analogue and digital communications techniques: modulation, multiplexing, channel coding and multiple access techniques as they relate to satellite communications",Satellite system analysis; link budget calculation; antenna property assessment; communication technique application.,Satellite system analysis; link budget calculation; antenna property assessment; Satellite communication,Satellite subsystems and orbits; signal propagation and link calculations; multiplexing and multiple access methods; coding schemes and error correction in satellite communications.,Satellite communication principles; radio wave propagation; system hardware for satellite communications; current and emerging satellite technologies.,"This course examines the fundamental principles of satellite communication systems, covering topics like orbits, radio wave propagation, and system hardware."
ZEIT8303,Project Management Body of Knowledge,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8303&activityGroupId=1,"Restricted to students enrolled in the Graduate Diploma or Masters programs.This course focuses on the distinctive nature of project management in Defence, the public sector generally and higher corporate levels of the private sector where the project manager is orchestrating (rather than controlling) a political, bureaucratic, technical and contractual environment. The course ranges broadly across key facets of project management, such as quality management, configuration management, risk management and contract management.","The aim of the course is to introduce students to the principles of Project Management, while recognising the need for the consistent application of a body of knowledge to achieve the required outcomes.","Explain the inception and requirement for a project management body of knowledge
Apply the application of the project management body of knowledge in a complex project
Demonstrate the value that a project management body of knowledge brings to successfully manage projects; and","Course Description: Restricted to students enrolled in the Graduate Diploma or Masters programs.This course focuses on the distinctive nature of project management in Defence, the public sector generally and higher corporate levels of the private sector where the project manager is orchestrating (rather than controlling) a political, bureaucratic, technical and contractual environment. The course ranges broadly across key facets of project management, such as quality management, configuration management, risk management and contract management.
Course Aims: The aim of the course is to introduce students to the principles of Project Management, while recognising the need for the consistent application of a body of knowledge to achieve the required outcomes.
Course Learning Outcomes: Explain the inception and requirement for a project management body of knowledge
Apply the application of the project management body of knowledge in a complex project
Demonstrate the value that a project management body of knowledge brings to successfully manage projects; and",Project management application; risk and contract management; quality and configuration management.,Project management,Principles of project management in complex environments; project management body of knowledge application; strategic orchestration in project management.,"Project management principles in defense and public sectors; political, bureaucratic, and technical project management dynamics; contract and quality management in projects.","This course introduces students to principles of Project Management, emphasizing application of a body of knowledge in Defence, public sector, and corporate environments."
ZEIT8310,Project Schedule and Budget Control,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8310&activityGroupId=1,"The success of projects and the project management team is often measured through achieving the targeted projects’ time, cost and scope which have been set or estimated during the creating of the projects. Therefore, it is critical to know the basic knowledge, tools and techniques for developing a proper project scope, scheduling and budgeting it and also control (i.e., examine the progress over time). 
This course introduces students to the underlying principles and practice of managing projects. It covers the body of knowledge needed for effective management of projects addressing techniques for project planning, scheduling and budgeting, managing resources, project progress reporting and project control. This course enables students to understand the concepts of time, resources and cost management and the measures and techniques to control projects.",,"Be able to control the project progress by evaluating Earned Value Management (EVM
Develop project plan, schedule and budget baselines using techniques such as PERT, CPM (e
Understand the processes for project scheduling, budgeting, and control
Understand how to plan and approach in the face of changing project requirements (Handling uncertainties in project schedules","Course Description: The success of projects and the project management team is often measured through achieving the targeted projects’ time, cost and scope which have been set or estimated during the creating of the projects. Therefore, it is critical to know the basic knowledge, tools and techniques for developing a proper project scope, scheduling and budgeting it and also control (i.e., examine the progress over time). 
This course introduces students to the underlying principles and practice of managing projects. It covers the body of knowledge needed for effective management of projects addressing techniques for project planning, scheduling and budgeting, managing resources, project progress reporting and project control. This course enables students to understand the concepts of time, resources and cost management and the measures and techniques to control projects. Course Learning Outcomes: Be able to control the project progress by evaluating Earned Value Management (EVM
Develop project plan, schedule and budget baselines using techniques such as PERT, CPM (e
Understand the processes for project scheduling, budgeting, and control
Understand how to plan and approach in the face of changing project requirements (Handling uncertainties in project schedules",Project planning and scheduling; budget development and management; progress tracking and reporting; Earned Value Management (EVM).,Project management,"Project scope definition; scheduling techniques (PERT, CPM); budgeting processes; resource management; project control mechanisms.","Principles of project management; techniques for effective project control; approaches to managing uncertainties in projects; foundational tools for project planning, scheduling, and budgeting.","This course teaches students to manage projects by developing a proper scope, schedule, and budget, as well as controlling progress over time through techniques like Earned Value Management."
ZEIT8510,Explosive Ordnance Design and Systems,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8510&activityGroupId=1,"This course provides a critical understanding of the construction and function of various EO systems and subsystems required for delivery to the target. The course develops an understanding of how explosives are harnessed to achieve the required capability, and the use of parametric / sensitivity analysis for iterative design. Aero-ballistic properties will also be discussed in light of subsonic, transonic, supersonic and hypersonic effects. Insensitive munition (IM) design principles will also be explored.
Enrolment in this course is only available to students nominated by the Department of Defence.",This course aims to provide a critical understanding of the construction and function of various EO systems and subsystems required for delivery to the target.,"Describe the subsystems used in EO systems with regards to target detection, tracking, propulsion, control, and on-board power systems
Evaluate the systems specification and design of an EO system in terms of efficiency, functionality and capability
Critically evaluate the challenges for delivery of supersonic, hypersonic and submerged weapon systems
Describe the design philosophy behind IM-compliant systems
Critically evaluate the requirements definition as well as the function and performance specifications (FPS","Course Description: This course provides a critical understanding of the construction and function of various EO systems and subsystems required for delivery to the target. The course develops an understanding of how explosives are harnessed to achieve the required capability, and the use of parametric / sensitivity analysis for iterative design. Aero-ballistic properties will also be discussed in light of subsonic, transonic, supersonic and hypersonic effects. Insensitive munition (IM) design principles will also be explored.
Enrolment in this course is only available to students nominated by the Department of Defence.
Course Aims: This course aims to provide a critical understanding of the construction and function of various EO systems and subsystems required for delivery to the target.
Course Learning Outcomes: Describe the subsystems used in EO systems with regards to target detection, tracking, propulsion, control, and on-board power systems
Evaluate the systems specification and design of an EO system in terms of efficiency, functionality and capability
Critically evaluate the challenges for delivery of supersonic, hypersonic and submerged weapon systems
Describe the design philosophy behind IM-compliant systems
Critically evaluate the requirements definition as well as the function and performance specifications (FPS",Systems specification and design evaluation; parametric and sensitivity analysis; aero-ballistic properties analysis; IM-compliant system design.,Explosive ordnance (EO) system functionalities; harnessing explosives for desired capabilities; iterative design techniques in defense systems; challenges in advanced weapon system delivery,Construction and function of EO systems; subsystems for target engagement; design principles of insensitive munitions; performance evaluation of supersonic and hypersonic systems.,Explosive ordnance (EO) system functionalities; harnessing explosives for desired capabilities; iterative design techniques in defense systems; challenges in advanced weapon system delivery.,"This course analyzes and designs explosive ordnance systems, exploring subsystems, aero-ballistic properties, and insensitive munition principles."
ZEIT8511,Testing and Evaluation of Explosive Ordnance,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8511&activityGroupId=1,"This course provides a critical understanding of how initiation reactions in energetic materials can transition to detonation and an energetic material's response to stimuli. The course will develop knowledge and practical application of test methods, test standards, test instrumentation and measuring equipment, test requirements, and surveillance techniques for explosives and EO.
Enrolment in this course is only available to students nominated by the Department of Defence.",,"Describe the available test standards
Detail experimental design methodology, testing techniques and procedures to evaluate energetic material safety
Critically evaluate different surveillance techniques for explosives and EO
Describe the available energetic materials test standards:
Describe the various computational techniques and material models that can be used to evaluate energetic systems
Critically evaluate ageing and life assessment of weapons and other systems containing energetic materials:
Critically evaluate different surveillance techniques for explosives and EO:
Discuss the physics of deflagration-to-detonation and shock-to-detonation mechanisms:
Describe the physics of deflagration-to-detonation and shock-to-detonation mechanisms
Apply experimental methodology, testing techniques and procedures used to evaluate energetic material safety:
Describe the various computational techniques and material models that can be used to evaluate energetic systems:
Critically evaluate ageing and life assessment of weapons and other systems containing energetic materials","Course Description: This course provides a critical understanding of how initiation reactions in energetic materials can transition to detonation and an energetic material's response to stimuli. The course will develop knowledge and practical application of test methods, test standards, test instrumentation and measuring equipment, test requirements, and surveillance techniques for explosives and EO.
Enrolment in this course is only available to students nominated by the Department of Defence. Course Learning Outcomes: Describe the available test standards
Detail experimental design methodology, testing techniques and procedures to evaluate energetic material safety
Critically evaluate different surveillance techniques for explosives and EO
Describe the available energetic materials test standards:
Describe the various computational techniques and material models that can be used to evaluate energetic systems
Critically evaluate ageing and life assessment of weapons and other systems containing energetic materials:
Critically evaluate different surveillance techniques for explosives and EO:
Discuss the physics of deflagration-to-detonation and shock-to-detonation mechanisms:
Describe the physics of deflagration-to-detonation and shock-to-detonation mechanisms
Apply experimental methodology, testing techniques and procedures used to evaluate energetic material safety:
Describe the various computational techniques and material models that can be used to evaluate energetic systems:
Critically evaluate ageing and life assessment of weapons and other systems containing energetic materials",Experimental design and methodology for energetic materials; critical evaluation of test standards and surveillance techniques; application of computational techniques in material assessment.,Physics of deflagration-to-detonation transitions; test standards for energetic materials; computational modeling for energetic systems; life cycle assessment of weapons containing energetic materials; Explosive ordnance (EO) system functionalities,Initiation reactions and detonation physics; test methods and instrumentation for explosives; aging and life assessment of energetic systems; surveillance and safety evaluation techniques.,Physics of deflagration-to-detonation transitions; test standards for energetic materials; computational modeling for energetic systems; life cycle assessment of weapons containing energetic materials.,"This course investigates how initiation reactions transition to detonation in energetic materials, applying test methods, instrumentation, and surveillance techniques for explosives and EO."
ZEIT8512,Explosive Ordnance Effects,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZEIT8512&activityGroupId=1,"This course develops an understanding of the use of explosives with regards to how effects are realized during and after detonation of a warhead. This includes aspects of shock, spall, fragmentation and fragment characteristics (including velocity, shape and size). Additionally, the theory behind shaped-charge penetration will be examined and applied to such systems as anti-tank guided missiles. The effects that could be expected on concrete structures will also be evaluated. Finally the matching of the warhead to the target (weaponeering) will be covered.
Enrolment in this course is only available to students nominated by the Department of Defence.",This course aims to give the students the tools to evaluate how a specific warhead would function to deliver damage to its target.,"Match a particular warhead to a specific target
Evaluate the range of wounding and damage mechanisms to human, soft and hard targets from a range of ammunition natures
Describe how and why shock waves propagate during an explosion or penetration
Describe the mechanisms of blast, material deformation and fragmentation that occurs during a dynamic event
Describe the design and mechanisms of attack of the various natures of ammunition","Course Description: This course develops an understanding of the use of explosives with regards to how effects are realized during and after detonation of a warhead. This includes aspects of shock, spall, fragmentation and fragment characteristics (including velocity, shape and size). Additionally, the theory behind shaped-charge penetration will be examined and applied to such systems as anti-tank guided missiles. The effects that could be expected on concrete structures will also be evaluated. Finally the matching of the warhead to the target (weaponeering) will be covered.
Enrolment in this course is only available to students nominated by the Department of Defence.
Course Aims: This course aims to give the students the tools to evaluate how a specific warhead would function to deliver damage to its target.
Course Learning Outcomes: Match a particular warhead to a specific target
Evaluate the range of wounding and damage mechanisms to human, soft and hard targets from a range of ammunition natures
Describe how and why shock waves propagate during an explosion or penetration
Describe the mechanisms of blast, material deformation and fragmentation that occurs during a dynamic event
Describe the design and mechanisms of attack of the various natures of ammunition",Warhead evaluation and weaponeering; shock wave and blast effects analysis; fragmentation analysis and assessment; shaped-charge design and functionality.,Warhead evaluation and weaponeering; shock wave and blast effects analysis; fragmentation analysis and assessment; shaped-charge design and functionality,Effects of explosives and detonation dynamics; warhead-target matching principles; mechanisms of blast and material deformation; shaped-charge penetration in military applications.,"Propagation of shock and spall effects; characteristics of fragments from detonations; theoretical aspects of shaped charges; evaluation of effects on various target types (concrete, armored, etc.).","This course applies knowledge on explosives to understand warhead effects, including shock, spall, fragmentation, and shaped-charge penetration, matching warheads with targets."
ZINT2501,Engineering Materials and Chemistry,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZINT2501&activityGroupId=1,"This course provides the foundation for understanding material and environmental properties and behaviour in engineering and technology. It includes electronic structure of atoms and molecules, intermolecular forces, thermodynamic driving forces for chemical reactions, chemical equilibria, electrochemistry, corrosion and redox reactions, solution chemistry, acids and bases, kinetics and rates of reactions, complex molecular structures in metals, polymers and ceramics, crystalline lattices, yielding and lastic flow, strengthening mechanisms in metals, phase systems and alloys, ferrous and non-ferrous metallurgy, mechanical behaviour and properties of materials.",,"Ability to work in a group and also independently
Enhanced ability to undertake problem identification, formulation and solutionEngineers Australia - Professional Engineer (Stage 1
Ability to work in a group and also independentlyPEE3
In-depth understanding and technical competence in the discipline of materials science as it applies to engineering practice and an appreciation of sustainability in engineeringPEE1
Enhanced ability to undertake problem identification, formulation and solutionPEE1
In-depth understanding and technical competence in the discipline of materials science as it applies to engineering practice and an appreciation of sustainability in engineering
Apply knowledge of basic science and engineering fundamentals of chemistry and materialsPEE1
Apply knowledge of basic science and engineering fundamentals of chemistry and materialsEngineers Australia - Professional Engineer (Stage 1
Ability to work in a group and also independentlyEngineers Australia - Professional Engineer (Stage 1
In-depth understanding and technical competence in the discipline of materials science as it applies to engineering practice and an appreciation of sustainability in engineeringEngineers Australia - Professional Engineer (Stage 1
Apply knowledge of basic science and engineering fundamentals of chemistry and materials
Enhanced ability to undertake problem identification, formulation and solution","Course Description: This course provides the foundation for understanding material and environmental properties and behaviour in engineering and technology. It includes electronic structure of atoms and molecules, intermolecular forces, thermodynamic driving forces for chemical reactions, chemical equilibria, electrochemistry, corrosion and redox reactions, solution chemistry, acids and bases, kinetics and rates of reactions, complex molecular structures in metals, polymers and ceramics, crystalline lattices, yielding and lastic flow, strengthening mechanisms in metals, phase systems and alloys, ferrous and non-ferrous metallurgy, mechanical behaviour and properties of materials. Course Learning Outcomes: Ability to work in a group and also independently
Enhanced ability to undertake problem identification, formulation and solutionEngineers Australia - Professional Engineer (Stage 1
Ability to work in a group and also independentlyPEE3
In-depth understanding and technical competence in the discipline of materials science as it applies to engineering practice and an appreciation of sustainability in engineeringPEE1
Enhanced ability to undertake problem identification, formulation and solutionPEE1
In-depth understanding and technical competence in the discipline of materials science as it applies to engineering practice and an appreciation of sustainability in engineering
Apply knowledge of basic science and engineering fundamentals of chemistry and materialsPEE1
Apply knowledge of basic science and engineering fundamentals of chemistry and materialsEngineers Australia - Professional Engineer (Stage 1
Ability to work in a group and also independentlyEngineers Australia - Professional Engineer (Stage 1
In-depth understanding and technical competence in the discipline of materials science as it applies to engineering practice and an appreciation of sustainability in engineeringEngineers Australia - Professional Engineer (Stage 1
Apply knowledge of basic science and engineering fundamentals of chemistry and materials
Enhanced ability to undertake problem identification, formulation and solution","Group collaboration and independent work; problem identification, formulation, and solution; application of engineering fundamentals in materials science.",Material science engineering; team collaboration; Basic scientific principles in chemistry and materials science; environmental engineering,"Electronic structure of atoms and molecules; intermolecular forces and thermodynamics in reactions; electrochemistry and corrosion; solution chemistry and reaction kinetics; mechanical and physical properties of metals, polymers, and ceramics; phase systems and alloy metallurgy.",Basic scientific principles in chemistry and materials science; environmental and material properties critical to engineering; sustainability considerations in engineering practices; technical competence in materials science disciplines.,"This course develops students' understanding and technical competence in materials science, applying fundamental concepts of chemistry and materials to engineering practice while emphasizing sustainability."
ZINT8301,Lethality and Survivability,School of Engineering and Technology,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Semester%201&deliveryMode=In%20Person&deliveryFormat=Standard&teachingPeriod=Z1&deliveryLocation=UNSW%20Canberra%20at%20ADFA&courseCode=ZINT8301&activityGroupId=1,"This 6UOC course provides an overview of the technical factors that affect the military use of explosives and propellants, armour materials, guns, guided weapons and light weapons. Topics include military ballistics, gun design, gun fire control, warhead design (including guided weapons), terminal effects and the penetration of armour. This course is restricted to CTMC members and guests.",,"On successful completion of this course, the student will be able to recognise weapon and ammunition design principles, and their implications for weapons systems design, selection and performance
On successful completion of this course, the student will be able to explain the properties and effects of explosives when used as propellants, in warheads and demolitions
On successful completion of this course, the student will be able to describe the qualities, properties, characteristics and manufacture of materials used in the construction of armour, guns and ammunition
On successful completion of this course, the student will be able to describe gun design principles and their implications for equipment selection
On successful completion of this course, the student will be able to appraise the influence of interior, intermediate, exterior and terminal ballistics on ammunition and weapon systems design","Course Description: This 6UOC course provides an overview of the technical factors that affect the military use of explosives and propellants, armour materials, guns, guided weapons and light weapons. Topics include military ballistics, gun design, gun fire control, warhead design (including guided weapons), terminal effects and the penetration of armour. This course is restricted to CTMC members and guests. Course Learning Outcomes: On successful completion of this course, the student will be able to recognise weapon and ammunition design principles, and their implications for weapons systems design, selection and performance
On successful completion of this course, the student will be able to explain the properties and effects of explosives when used as propellants, in warheads and demolitions
On successful completion of this course, the student will be able to describe the qualities, properties, characteristics and manufacture of materials used in the construction of armour, guns and ammunition
On successful completion of this course, the student will be able to describe gun design principles and their implications for equipment selection
On successful completion of this course, the student will be able to appraise the influence of interior, intermediate, exterior and terminal ballistics on ammunition and weapon systems design",Weapons and ammunition design principles; explosives and propellants evaluation; armor materials analysis; ballistic effects assessment.,Weapons and ammunition design principles; explosives and propellants evaluation; armor materials analysis; ballistic effects assessment,Military ballistics and their implications on weapon systems; gun design and fire control systems; warhead design for guided weapons; terminal effects and armor penetration.,Technical factors affecting military use of explosives; properties of materials used in firearms and ammunition construction; comprehensive understanding of gun design principles; appraisal of all phases of ballistics in weapon and ammunition design.,"This course examines technical factors affecting military use of explosives, propellants, armour materials, guns, guided weapons, and light weapons, enabling recognition of weapon design principles and effects."
ZZEN9021,Principles of Programming,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%202&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KF&deliveryLocation=Kensington&courseCode=ZZEN9021&activityGroupId=1,"This is a first programming course. It provides an introduction to programming in Python and covers the followingessentials:
Program design and implementation in a high level language, with procedural and object oriented constructs and somefunctional features. Fundamental programming techniques, data structures and algorithms. Debugging and testing.Simulation. Applications in different areas, including those involving graphical user interfaces and animations.","The aim of the course is to provide students with a solid foundation on fundamental programming concepts and principles, and to become proficient in the programming language Python, mostly in itsimperative features, but also partially in its functional and object-oriented features. Attention will be given to special modules such as matplolib that are particularly relevant to data science tasks. Students will learn to design solutions to a broad range of problems and implement those solutions in the form of small to medium programs, using appropriate programming techniques and tools.","Ability to design and implement algorithmic solutions to problems that require writing small to medium-sized programs
Ability to successfully tackle a variety of programming tasks for a broad range of applications, in particular in analysing data, plotting data, running simulations
Demonstrated understanding and a good command of programming techniques that borrow from the procedural, functional and object-oriented paradigms
Acquisition of a disciplined, rigorous and methodical approach for program design and development, with special attention given to effective debugging and testing","Course Description: This is a first programming course. It provides an introduction to programming in Python and covers the followingessentials:
Program design and implementation in a high level language, with procedural and object oriented constructs and somefunctional features. Fundamental programming techniques, data structures and algorithms. Debugging and testing.Simulation. Applications in different areas, including those involving graphical user interfaces and animations.
Course Aims: The aim of the course is to provide students with a solid foundation on fundamental programming concepts and principles, and to become proficient in the programming language Python, mostly in itsimperative features, but also partially in its functional and object-oriented features. Attention will be given to special modules such as matplolib that are particularly relevant to data science tasks. Students will learn to design solutions to a broad range of problems and implement those solutions in the form of small to medium programs, using appropriate programming techniques and tools.
Course Learning Outcomes: Ability to design and implement algorithmic solutions to problems that require writing small to medium-sized programs
Ability to successfully tackle a variety of programming tasks for a broad range of applications, in particular in analysing data, plotting data, running simulations
Demonstrated understanding and a good command of programming techniques that borrow from the procedural, functional and object-oriented paradigms
Acquisition of a disciplined, rigorous and methodical approach for program design and development, with special attention given to effective debugging and testing",Python programming; program design; debugging; testing; data structures; algorithms,"Python; data structures; algorithm design; algorithm analysis; code debugging and testing; data visualization; object-oriented design; problem-solving

",Python programming; program implementation; data simulation,procedural programming; object-oriented programming; functional programming; data plotting; algorithm design,"This course introduces students to fundamental programming concepts and principles in Python, focusing on imperative features, data structures, and algorithms."
ZZEN9201,Foundations of Cyber Security,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%202&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KF&deliveryLocation=Kensington&courseCode=ZZEN9201&activityGroupId=1,"Cybersecurity is headline news and a rapidly growing challenge worldwide. Digital technology now pervades nearly every aspect of our citizens' personal and professional lives. This technology brings enormous benefits to humanity, but at the same time, it also brings serious problems. The many forms of cyber-threats – including disruption, data theft, surveillance, and system compromise – have become tools of activism, organised crime, corporate and state espionage, warfare, terrorism, Orwellian surveillance, suppression of liberty, and privacy compromise.
Cybersecurity is one of the global challenges for humanity to tackle, along with climate change, poverty, and human health. Left unchecked, a lack of cybersecurity poses an existential threat to enlightenment values and modern civilisation as we know it – so you've selected something important and worthwhile to master.
This foundational course is designed to equip students with a broad understanding of current and emerging cybersecurity concepts, issues, practices, and trends, as well as help them start to develop a security engineering mindset, that is, how cybersecurity professionals approach problems and view situations.","This course aims to equip students with security mindset, by giving them various opportunities (learning opportunities) to think like an attacker or a defender. Developing a security mindset is an extremely crucial part of security domain. We cannot built secure systems until we read the mind of our adversary and provide secure system accordingly. Moreover, this course also aims to providestudents on understand human vulnerabilities and how humans play a vital role in making any security protocol strong or weak. It also intends to prepare students for handling data securely, delving into the principles of privacy, and providing insights on securely identifying, managing, and responding to security and privacy risks within extensive datasets. Additionally, the course covers current trends and best practices in the ever-evolving global security landscape including cyber warfare and operational security.","Apply an understanding of human behavioural factors, human error, and social engineering to cyber security contexts
Demonstrate professional competencies including time and project management, teamwork, community building, ethical professional behaviour and effective communication
Demonstrate an understanding of the relationship of cybersecurity to related fields including psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Analyse real world problems and apply theoretical cyber security frameworks to make decisions taking into consideration key factors such as cost, risk, and privacy
Understand the historical context of cyber security, current developments in the field, and so make reasonable assessments of likely future trends and emerging risks
Identify the major principles and concepts which characterise contemporary cybersecurity","Course Description: Cybersecurity is headline news and a rapidly growing challenge worldwide. Digital technology now pervades nearly every aspect of our citizens' personal and professional lives. This technology brings enormous benefits to humanity, but at the same time, it also brings serious problems. The many forms of cyber-threats – including disruption, data theft, surveillance, and system compromise – have become tools of activism, organised crime, corporate and state espionage, warfare, terrorism, Orwellian surveillance, suppression of liberty, and privacy compromise.
Cybersecurity is one of the global challenges for humanity to tackle, along with climate change, poverty, and human health. Left unchecked, a lack of cybersecurity poses an existential threat to enlightenment values and modern civilisation as we know it – so you've selected something important and worthwhile to master.
This foundational course is designed to equip students with a broad understanding of current and emerging cybersecurity concepts, issues, practices, and trends, as well as help them start to develop a security engineering mindset, that is, how cybersecurity professionals approach problems and view situations.
Course Aims: This course aims to equip students with security mindset, by giving them various opportunities (learning opportunities) to think like an attacker or a defender. Developing a security mindset is an extremely crucial part of security domain. We cannot built secure systems until we read the mind of our adversary and provide secure system accordingly. Moreover, this course also aims to providestudents on understand human vulnerabilities and how humans play a vital role in making any security protocol strong or weak. It also intends to prepare students for handling data securely, delving into the principles of privacy, and providing insights on securely identifying, managing, and responding to security and privacy risks within extensive datasets. Additionally, the course covers current trends and best practices in the ever-evolving global security landscape including cyber warfare and operational security.
Course Learning Outcomes: Apply an understanding of human behavioural factors, human error, and social engineering to cyber security contexts
Demonstrate professional competencies including time and project management, teamwork, community building, ethical professional behaviour and effective communication
Demonstrate an understanding of the relationship of cybersecurity to related fields including psychology, organisational culture, physical and electronic security, cybercrime, military, intelligence, communication, and disaster planning and response
Analyse real world problems and apply theoretical cyber security frameworks to make decisions taking into consideration key factors such as cost, risk, and privacy
Understand the historical context of cyber security, current developments in the field, and so make reasonable assessments of likely future trends and emerging risks
Identify the major principles and concepts which characterise contemporary cybersecurity",security engineering mindset; risk management; ethical hacking; data privacy management; social engineering awareness; project management,"Security engineering in web development; risk management; Privacy and Security: differential privacy, secure aggregation; cybersecurity; project management",cybersecurity trends; attacker and defender strategies; human vulnerabilities in security; cybersecurity frameworks; cyber warfare,principles of cybersecurity; historical and current cybersecurity context; relationship of cybersecurity with other fields; real-world cybersecurity problem-solving; operational security,"This course educates students on developing a security mindset by analyzing human vulnerabilities, understanding cybersecurity concepts, and applying frameworks to real-world problems."
ZZEN9212,Advanced Penetration Testing,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%203&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KJ&deliveryLocation=Kensington&courseCode=ZZEN9212&activityGroupId=1,"This course follows on from the introductory Penetration Testing course, which is a prerequisite.
This course teaches offensive security. Coverage will be updated to remain current and includes topics drawn from advanced web application attacks, hand crafted multi stage and non-tool based attacks, layer 2 attacks, social engineering, stealth, exploit generation and delivery, physical attacks, insider attacks, negotiating appropriate rules of engagement and managing legal risk, reporting and ethical professional frameworks for advanced penetration testing and red teaming.
assumed knowledge: Students are expected to be familiar with TCP/IP networking across OSI layers 2-7 and programming / scripting in python or equivalent.","This course follows on from the introductory Penetration Testing course, which is a prerequisite.
The course covers advanced penetration testing skills for those who are interested in a career in penetration testing.It follows on from and builds on the core level penetration testing course.Students learn and apply advanced offensive skills including red teaming and stealth, and the theoretical basis which supports them.
This course is a requirement for the technical masters, and provides both the theoretical and practical knowledge required by industry.
This course maps to the program in the following ways:2. Graduates will have a global contemporary perspective of the discipline of cyber security, and current issues, an awareness of the history of the discipline and ability to anticipate future trends.3. Graduates will be able to communicate effectively to a range of audiences to effect change, foster culture, and manage and lead up and down in large organisations.5. Graduates will have demonstrated the ethical and professional application of knowledge and skills in Cyber Security with high level personal autonomy and accountability.","Conduct advanced network attacks in accordance with professional ethical and legal best practice frameworks
Explain the principles required for stealthy infiltration, exfiltration, and persistence and an understanding of potential
Explain network attacks across at OSI network layers 2-7 and the common protocols across them including operation
Design and effectively conduct a multi stage adaptive attack including some or all of recon, vulnerability detection","Course Description: This course follows on from the introductory Penetration Testing course, which is a prerequisite.
This course teaches offensive security. Coverage will be updated to remain current and includes topics drawn from advanced web application attacks, hand crafted multi stage and non-tool based attacks, layer 2 attacks, social engineering, stealth, exploit generation and delivery, physical attacks, insider attacks, negotiating appropriate rules of engagement and managing legal risk, reporting and ethical professional frameworks for advanced penetration testing and red teaming.
assumed knowledge: Students are expected to be familiar with TCP/IP networking across OSI layers 2-7 and programming / scripting in python or equivalent.
Course Aims: This course follows on from the introductory Penetration Testing course, which is a prerequisite.
The course covers advanced penetration testing skills for those who are interested in a career in penetration testing.It follows on from and builds on the core level penetration testing course.Students learn and apply advanced offensive skills including red teaming and stealth, and the theoretical basis which supports them.
This course is a requirement for the technical masters, and provides both the theoretical and practical knowledge required by industry.
This course maps to the program in the following ways:2. Graduates will have a global contemporary perspective of the discipline of cyber security, and current issues, an awareness of the history of the discipline and ability to anticipate future trends.3. Graduates will be able to communicate effectively to a range of audiences to effect change, foster culture, and manage and lead up and down in large organisations.5. Graduates will have demonstrated the ethical and professional application of knowledge and skills in Cyber Security with high level personal autonomy and accountability.
Course Learning Outcomes: Conduct advanced network attacks in accordance with professional ethical and legal best practice frameworks
Explain the principles required for stealthy infiltration, exfiltration, and persistence and an understanding of potential
Explain network attacks across at OSI network layers 2-7 and the common protocols across them including operation
Design and effectively conduct a multi stage adaptive attack including some or all of recon, vulnerability detection",advanced penetration testing; red teaming; ethical hacking; network attack strategies; stealth tactics; exploit development,Python; cybersecurity; penetration testing,advanced web application attacks; social engineering techniques; legal aspects of penetration testing; ethical frameworks in cybersecurity,OSI model and TCP/IP networking; scripting with Python; stealth and infiltration principles; multi-stage attack planning; ethical and legal standards in cybersecurity,"This course executes advanced penetration testing skills, covering topics such as stealthy infiltration, exfiltration, and persistence, and multi-stage adaptive attacks."
ZZEN9216,Fundamentals of Coding: C and Assembler,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%203&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KJ&deliveryLocation=Kensington&courseCode=ZZEN9216&activityGroupId=1,"Learn how to program to C and low level assembly language. This course provides an introduction to programming in C and a low level understanding of the underlying operation of modern computers.
C is introduced slowly and at each step we see how C programs are compiled into corresponding machine code and the details of how the computer actually then executes the program.
This course is suitable for those who have never programmed before, or those who have programmed but are not familiar with C or assembly, or who would like a refresher from the point of view of cyber security.","This course provides an introduction to coding using both C and machine code and examines the relationships between them.It is suitable for those who have previously programmed but only in higher level languages (such as java or python) and also for those who have not yet learned to code. This optional course teaches coding skills that might already be covered in a related undergraduate degree, but will provide significant new insights for students who have graduated in the past with a modest amount of coding, focusing on the critical relationship between high level code, compilation and linkage to produce machine code from a cyber security perspective.This course, or an existing background in C and assembly, is a foundational requirement to understand reverse engineering.
This course maps to the program in the following ways:
1. Graduates will have advanced technical knowledge and skills in Cyber Security and related disciplines, and an ability to apply these in a range of professional contexts.4. Graduates will be capable of independent and collaborative inquiry, working effectively with others.","Effectively collaborate with others in accordance with modern software design practices including pair programming and team review
Be able to write programs in a simple assembly language
Design, write and debug programs in C
Develop an understanding of the principles of secure coding and given a C program be able to identify common security vulnerabilities in it
Explain how C programs are compiled, linked, and executed including memory allocation, stack frames, system calls, the role of static and dynamically linked libraries and how to inspect this using a debugger","Course Description: Learn how to program to C and low level assembly language. This course provides an introduction to programming in C and a low level understanding of the underlying operation of modern computers.
C is introduced slowly and at each step we see how C programs are compiled into corresponding machine code and the details of how the computer actually then executes the program.
This course is suitable for those who have never programmed before, or those who have programmed but are not familiar with C or assembly, or who would like a refresher from the point of view of cyber security.
Course Aims: This course provides an introduction to coding using both C and machine code and examines the relationships between them.It is suitable for those who have previously programmed but only in higher level languages (such as java or python) and also for those who have not yet learned to code. This optional course teaches coding skills that might already be covered in a related undergraduate degree, but will provide significant new insights for students who have graduated in the past with a modest amount of coding, focusing on the critical relationship between high level code, compilation and linkage to produce machine code from a cyber security perspective.This course, or an existing background in C and assembly, is a foundational requirement to understand reverse engineering.
This course maps to the program in the following ways:
1. Graduates will have advanced technical knowledge and skills in Cyber Security and related disciplines, and an ability to apply these in a range of professional contexts.4. Graduates will be capable of independent and collaborative inquiry, working effectively with others.
Course Learning Outcomes: Effectively collaborate with others in accordance with modern software design practices including pair programming and team review
Be able to write programs in a simple assembly language
Design, write and debug programs in C
Develop an understanding of the principles of secure coding and given a C program be able to identify common security vulnerabilities in it
Explain how C programs are compiled, linked, and executed including memory allocation, stack frames, system calls, the role of static and dynamically linked libraries and how to inspect this using a debugger",C programming; assembly language programming; secure coding practices; debugging and software analysis; understanding of compilation and execution process,"C; software system design; software vulnerability detection
",C language fundamentals; assembly language basics; compilation and linkage; security vulnerabilities in programming; software design practices,principles of secure coding; memory management in C programs; system calls and stack frames; use of debuggers and static/dynamic libraries; collaboration in software development,"This course teaches programming skills in C and low-level assembly language, introducing students to the relationship between high-level code, compilation, and linkage from a cyber security perspective."
ZZEN9311,Database Systems,School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%203&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KJ&deliveryLocation=Kensington&courseCode=ZZEN9311&activityGroupId=1,A first course on database systems. Data modelling; principles of database design; data manipulation languages; database application teachniques; introduction to DBMS internals. Prac work: design and implementation of a database application using SQL and stored procedures.,"This course aims to explore in depth the practice of developing database applications, including SQL schemas and queries. It also examines the theory behind relational database management systems (RDBMSs).","Students will be able toimplement stored procedures and triggers
Students will be able to formulate queries via the full range of SQL constructs
Students will have a high-level understanding of DBMS internals
Students willbe able to analyse and improve redundancy in relational models
Students will be able to realise data models as relational database schemas
Students will be able to develop accurate, non-redundant data models","Course Description: A first course on database systems. Data modelling; principles of database design; data manipulation languages; database application teachniques; introduction to DBMS internals. Prac work: design and implementation of a database application using SQL and stored procedures.
Course Aims: This course aims to explore in depth the practice of developing database applications, including SQL schemas and queries. It also examines the theory behind relational database management systems (RDBMSs).
Course Learning Outcomes: Students will be able toimplement stored procedures and triggers
Students will be able to formulate queries via the full range of SQL constructs
Students will have a high-level understanding of DBMS internals
Students willbe able to analyse and improve redundancy in relational models
Students will be able to realise data models as relational database schemas
Students will be able to develop accurate, non-redundant data models",SQL programming; database design; stored procedures and triggers; redundancy analysis; relational modeling,"SQL; database design and management: NoSQL, MySQL, PostgreSQL, MongoDB
",data manipulation languages; database application techniques; DBMS internals; relational database management systems,SQL schema development; query formulation; understanding of DBMS architecture; development of efficient and accurate data models; optimization of relational databases,"This course introduces students to developing database applications, exploring SQL schema design, query formulation, and DBMS internals through hands-on practice."
ZZEN9444,"Neural Networks, Deep Learning",School of Computer Science and Engineering,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KB&deliveryLocation=Kensington&courseCode=ZZEN9444&activityGroupId=1,"Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, Hopfield and Kohonen networks, restricted Boltzmann machine and autoencoders, deep convolutional networks for image processing; geometric and complexity analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; designing successful applications of neural networks; recent developments in neural networks and deep learning.","This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning,ranging from traditional neural network models to the latest research and applications of deep learning.","Students will be able to analyse a solution to a neural network problem in terms of the relevant NN and DL
Students will have an awareness of the computational theory underlying the various NN methods
Students will demonstrate an understanding of aspects of the social, intellectual, and neuro-biological context of neural networks and deep learning
Students will be able to program neural network and deep learning applications
Students will demonstrate a working knowledge of one or more neural network simulation packages, and be able to
Students will demonstrate an understanding of a variety of NN and DL techniques","Course Description: Neural networks and deep learning play a critical role in pushing the boundaries of what AI can achieve, making them indispensable for various industries and applications. Their ability to learn and adapt from data has revolutionised many fields and opened up new opportunities for solving complex problems. This course provides an introduction to and deep exploration of neural networks and deep learning principles and practice.
Topics chosen from: perceptrons, feedforward neural networks, backpropagation, Hopfield and Kohonen networks, restricted Boltzmann machine and autoencoders, deep convolutional networks for image processing; geometric and complexity analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; designing successful applications of neural networks; recent developments in neural networks and deep learning.
Course Aims: This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning,ranging from traditional neural network models to the latest research and applications of deep learning.
Course Learning Outcomes: Students will be able to analyse a solution to a neural network problem in terms of the relevant NN and DL
Students will have an awareness of the computational theory underlying the various NN methods
Students will demonstrate an understanding of aspects of the social, intellectual, and neuro-biological context of neural networks and deep learning
Students will be able to program neural network and deep learning applications
Students will demonstrate a working knowledge of one or more neural network simulation packages, and be able to
Students will demonstrate an understanding of a variety of NN and DL techniques",neural network programming; deep learning application development; computational theory analysis; neural network simulation,Neural networks; deep learning; NLP,feedforward and recurrent neural networks; deep convolutional networks; backpropagation; autoencoders; language processing; semantic analysis,foundational principles of neural networks and deep learning; social and intellectual context of neural networks; neuro-biological implications of neural network models; latest research and applications in deep learning,"This course explores neural networks and deep learning principles and practice, introducing students to traditional models and latest research and applications."
ZZSC5806,Regression Analysis for Data Scientists,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KB&deliveryLocation=Kensington&courseCode=ZZSC5806&activityGroupId=1,"Regression is a set of statistical techniques widely used to analyse relationships between several variables. In this course, students will explore the applications of a range of regression techniques, including: linear regression; analysis of variance (ANOVA) and analysis of covariance (ANCOVA); generalised linear and generalised additive models; generalised local likelihood; Poisson, logistic and log-linear regression models; penalised regression methods; testing GLMs and diagnostics; variable selection and cross-validation; splines, penalised splines, thin plate splines and multidimensional splines; smoothing splines and regression splines and kernel smoothing.
The lectures will be complemented with worked examples using the R data analysis and statistical programming software.This online course covers the same topics as in MATH5806 and is only available to students enrolled in the online Diploma of Data Science and the online Master of Data Science.","The aim of this course is to introduce students to modern regression models and to provide hands-on experience with computing methods needed for applications to real data. The content, activities and assessments for the course will help students to gain the ability of thinking analytically and critically to find proper methods for data analysis. Besides, they provide students with “capability and motivation for intellectual development” and “communication” as the core science graduate attributes. The ideas, required skills and methods for regression analysis are introduced, discussed and demonstrated in the lectures. Then students develop these skills by applying them to specific tasks in tutorial-like periods and in assessments. Active student participation in tutorial-like periods is expected.","Apply the appropriate regression technique to analyse a given data set
Present the results of regression analysis in an appropriate format for a range of intended audiences
Compare and utilise various regression models and techniques along with their applications, intuitions, strengths and weaknesses
Use output of statistical software along with the theoretical formulas to provide a logical model for a given data set
Interpret the output of statistical software to describe the results of the regression analysis
Choose the appropriate R packages/functions to apply an appropriate regression technique in the analysis of a given data set","Course Description: Regression is a set of statistical techniques widely used to analyse relationships between several variables. In this course, students will explore the applications of a range of regression techniques, including: linear regression; analysis of variance (ANOVA) and analysis of covariance (ANCOVA); generalised linear and generalised additive models; generalised local likelihood; Poisson, logistic and log-linear regression models; penalised regression methods; testing GLMs and diagnostics; variable selection and cross-validation; splines, penalised splines, thin plate splines and multidimensional splines; smoothing splines and regression splines and kernel smoothing.
The lectures will be complemented with worked examples using the R data analysis and statistical programming software.This online course covers the same topics as in MATH5806 and is only available to students enrolled in the online Diploma of Data Science and the online Master of Data Science.
Course Aims: The aim of this course is to introduce students to modern regression models and to provide hands-on experience with computing methods needed for applications to real data. The content, activities and assessments for the course will help students to gain the ability of thinking analytically and critically to find proper methods for data analysis. Besides, they provide students with “capability and motivation for intellectual development” and “communication” as the core science graduate attributes. The ideas, required skills and methods for regression analysis are introduced, discussed and demonstrated in the lectures. Then students develop these skills by applying them to specific tasks in tutorial-like periods and in assessments. Active student participation in tutorial-like periods is expected.
Course Learning Outcomes: Apply the appropriate regression technique to analyse a given data set
Present the results of regression analysis in an appropriate format for a range of intended audiences
Compare and utilise various regression models and techniques along with their applications, intuitions, strengths and weaknesses
Use output of statistical software along with the theoretical formulas to provide a logical model for a given data set
Interpret the output of statistical software to describe the results of the regression analysis
Choose the appropriate R packages/functions to apply an appropriate regression technique in the analysis of a given data set",regression analysis; statistical software proficiency (R); data analysis and interpretation; model selection and evaluation,Regression; R; data analysis; linear regression; ANOVA and ANCOVA; generalized linear models (GLMs); logistic regression; smoothing techniques; variable selection; cross-validation,linear regression; ANOVA and ANCOVA; generalized linear models (GLMs); logistic regression; smoothing techniques; variable selection and cross-validation,statistical analysis techniques; application of regression models; use of R for statistical computing; critical and analytical thinking in data science; communication of statistical findings,"This course explores and applies various regression techniques, including linear, generalized, and penalized models, using R software."
ZZSC5836,Data Mining and Machine Learning,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%203&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KJ&deliveryLocation=Kensington&courseCode=ZZSC5836&activityGroupId=1,"Recent technological advances have given organisations access to enormous data sets that raise challenges for data analysis. Hence, a wide range of data mining methods and tools have been developed to extract information, discover patterns, and enable predictive decision making. Machine learning is the algorithmic approach to learning from data. This course covers the key techniques in data mining and machine learning together with theoretical background and applications.
The following topics will be covered in this course: regression and classification problems, data mining performance evaluation, gradient descent learning and backpropagation neural networks, tree-based learning and ensemble methods, clustering and dimensionality reduction, and practical aspects of machine learning applications.","This course is designed to introduce students interested in machine learning to some programming tools and analytical reasoning that may be related to, and useful in, their future professions. The course features programming foundations and related mathematical concepts which some of the world's data mining and machine learning advancements have rested on or are related to. The course is not designed to be over-technical in terms of theoretical mathematics, rather it features a range of incredibly useful fundamental concepts that are at the core of today’s data mining and machine learning.","Apply key concepts from the foundations of computational and statistical learning theory and demonstrate their applicability in Machine Learning
Select and define an appropriate representation for data to be used as input to and output from a machine learning algorithm
Use Machine Learning algorithms on real-world data sets and collect results to enable evaluation and comparison of their performance
Compare different algorithms according to the properties of their inputs and outputs and in terms of similarities and differences in their mathematical and computational aspects
Develop machine learning algorithms using computational and mathematical techniques to solve learning problems
Understand the limitations of machine learning and data mining concepts","Course Description: Recent technological advances have given organisations access to enormous data sets that raise challenges for data analysis. Hence, a wide range of data mining methods and tools have been developed to extract information, discover patterns, and enable predictive decision making. Machine learning is the algorithmic approach to learning from data. This course covers the key techniques in data mining and machine learning together with theoretical background and applications.
The following topics will be covered in this course: regression and classification problems, data mining performance evaluation, gradient descent learning and backpropagation neural networks, tree-based learning and ensemble methods, clustering and dimensionality reduction, and practical aspects of machine learning applications.
Course Aims: This course is designed to introduce students interested in machine learning to some programming tools and analytical reasoning that may be related to, and useful in, their future professions. The course features programming foundations and related mathematical concepts which some of the world's data mining and machine learning advancements have rested on or are related to. The course is not designed to be over-technical in terms of theoretical mathematics, rather it features a range of incredibly useful fundamental concepts that are at the core of today’s data mining and machine learning.
Course Learning Outcomes: Apply key concepts from the foundations of computational and statistical learning theory and demonstrate their applicability in Machine Learning
Select and define an appropriate representation for data to be used as input to and output from a machine learning algorithm
Use Machine Learning algorithms on real-world data sets and collect results to enable evaluation and comparison of their performance
Compare different algorithms according to the properties of their inputs and outputs and in terms of similarities and differences in their mathematical and computational aspects
Develop machine learning algorithms using computational and mathematical techniques to solve learning problems
Understand the limitations of machine learning and data mining concepts",machine learning algorithm development; data analysis; model evaluation and comparison; use of programming tools for machine learning,"Machine learning; data mining; data analysis; Regression; Classification

",regression and classification; gradient descent and backpropagation; tree-based learning and ensemble methods; clustering and dimensionality reduction; practical machine learning applications,computational and statistical learning theory; data representation for machine learning; real-world application of machine learning algorithms; understanding the limitations of data mining and machine learning,"This course applies key concepts from computational and statistical learning theory, equipping students with machine learning fundamentals."
ZZSC5905,Statistical Inference for Data Scientists,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%203&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KJ&deliveryLocation=Kensington&courseCode=ZZSC5905&activityGroupId=1,"This intensive course provides an introduction to probability and distribution theory and introductory Statistical Inference. Students will learn the fundamental principles of inference: sufficiency, likelihoods, maximum likelihood and Bayesian methods.
Estimation, confidence set construction and hypothesis testing, and computationally intensive methods such as the bootstrap method are also discussed.
This course will take the flipped classroom approach and is delivered completely online. Students are assigned the “homework” of watching video lectures and reading materials relevant to the online lecture session. During the session, a recap and overview of the content will be given and students will practice what they’ve learned through examples and tutorial problems.
This course is only available to students enrolled in the postgraduate Data Science programs 7446, 5646, 8646.",The aim of the course is to introduce the main ideas and principles behind parametric inference procedures. The course activities will guide students in selecting and performing appropriate inference procedures to analyse data and draw conclusions regarding the underlying population of interest..,"Calculate key population parameters of interest to test hypotheses and to construct confidence regions
Apply key methods of statistical inference from first principles of probability theory
Apply fundamental principles of statistical inference to solve appropriate problems
Use computer packages to generate output for the most common inference procedures and for computer-intensive calculations such as bootstrapping
Apply various likelihood-based and Bayesian inference methods to analyse data and solve problems","Course Description: This intensive course provides an introduction to probability and distribution theory and introductory Statistical Inference. Students will learn the fundamental principles of inference: sufficiency, likelihoods, maximum likelihood and Bayesian methods.
Estimation, confidence set construction and hypothesis testing, and computationally intensive methods such as the bootstrap method are also discussed.
This course will take the flipped classroom approach and is delivered completely online. Students are assigned the “homework” of watching video lectures and reading materials relevant to the online lecture session. During the session, a recap and overview of the content will be given and students will practice what they’ve learned through examples and tutorial problems.
This course is only available to students enrolled in the postgraduate Data Science programs 7446, 5646, 8646.
Course Aims: The aim of the course is to introduce the main ideas and principles behind parametric inference procedures. The course activities will guide students in selecting and performing appropriate inference procedures to analyse data and draw conclusions regarding the underlying population of interest..
Course Learning Outcomes: Calculate key population parameters of interest to test hypotheses and to construct confidence regions
Apply key methods of statistical inference from first principles of probability theory
Apply fundamental principles of statistical inference to solve appropriate problems
Use computer packages to generate output for the most common inference procedures and for computer-intensive calculations such as bootstrapping
Apply various likelihood-based and Bayesian inference methods to analyse data and solve problems",statistical inference; probability theory; use of statistical software; data analysis and interpretation; Bayesian methods,"statistical inference; probability theory; Bayesian statistics; data analysis; data management and interpretation; hypothesis testing; bootstrap methods; R
",distribution theory; maximum likelihood estimation; confidence intervals; hypothesis testing; bootstrap methods,foundational principles of statistical inference; parametric inference procedures; computational techniques in statistics; application of likelihood and Bayesian methods in data analysis,"This course introduces students to probability, distribution theory, and statistical inference, guiding them in applying key principles and methods to analyze data and draw conclusions."
ZZSC5960,Bayesian Inference and Computation for Data Scientists,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%202&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KF&deliveryLocation=Kensington&courseCode=ZZSC5960&activityGroupId=1,"After describing the fundamentals of Bayesian inference, this course will examine several detailed aspects including: the specification of prior and posterior distributions, Bayesian decision theoretic concepts, the ideas behind Bayesian hypothesis tests, model choice and model averaging, and various model types such as hierarchical and mixture models. An important part of Bayesian inference is the requirement to numerically evaluate complex integrals on a routine basis. Accordingly this course will also introduce the ideas behind Monte Carlo integration, importance sampling, rejection sampling, Markov chain Monte Carlo samplers such as the Gibbs sampler and the Metropolis-Hastings algorithm. This course is only available to students enrolled in the Online Masters or Graduate Diploma of Data Science.
Material is delivered 100% online through a series of self-guided lessons which include challenges, practice questions and videos. Questions can be asked on the discussion forum. Webinars will be held to guide students through the material and to help answer further questions that cannot be raised in the discussion forum.","This course aims to:
Provide a strong background in the concepts and philosophy of Bayesian inference;Instill an appreciation of the benefits of the Bayesian framework;Provide extensive practical opportunities to implement Bayesian data analyses;Gain skills in applying Bayesian inference to real world problems","Extend statistical knowledge beyond classical statistical techniques to demonstrate when the Bayesian approach can be beneficial
Identify and explain the importance of computational techniques that are critical for Bayesian inference
Perform Bayesian analysis on real-world data
Construct Bayesian models for practical examples and discuss their advantages and disadvantages
Explain the philosophy and background concepts underlying Bayesian inference","Course Description: After describing the fundamentals of Bayesian inference, this course will examine several detailed aspects including: the specification of prior and posterior distributions, Bayesian decision theoretic concepts, the ideas behind Bayesian hypothesis tests, model choice and model averaging, and various model types such as hierarchical and mixture models. An important part of Bayesian inference is the requirement to numerically evaluate complex integrals on a routine basis. Accordingly this course will also introduce the ideas behind Monte Carlo integration, importance sampling, rejection sampling, Markov chain Monte Carlo samplers such as the Gibbs sampler and the Metropolis-Hastings algorithm. This course is only available to students enrolled in the Online Masters or Graduate Diploma of Data Science.
Material is delivered 100% online through a series of self-guided lessons which include challenges, practice questions and videos. Questions can be asked on the discussion forum. Webinars will be held to guide students through the material and to help answer further questions that cannot be raised in the discussion forum.
Course Aims: This course aims to:
Provide a strong background in the concepts and philosophy of Bayesian inference;Instill an appreciation of the benefits of the Bayesian framework;Provide extensive practical opportunities to implement Bayesian data analyses;Gain skills in applying Bayesian inference to real world problems
Course Learning Outcomes: Extend statistical knowledge beyond classical statistical techniques to demonstrate when the Bayesian approach can be beneficial
Identify and explain the importance of computational techniques that are critical for Bayesian inference
Perform Bayesian analysis on real-world data
Construct Bayesian models for practical examples and discuss their advantages and disadvantages
Explain the philosophy and background concepts underlying Bayesian inference",Bayesian inference techniques; computational statistical methods; Monte Carlo simulations; Markov chain Monte Carlo (MCMC) methods,"Markov chain Monte Carlo; hypothesis testing; Monte Carlo simulation; Bayesian statistics; numerical methods

",Bayesian hypothesis testing; model choice and averaging; hierarchical and mixture models; Monte Carlo integration and sampling methods,foundational concepts of Bayesian statistics; numerical evaluation of complex integrals; practical application of Bayesian models in real-world data analysis; understanding computational challenges in Bayesian inference,"This course applies statistical concepts by examining Bayesian inference fundamentals, including prior and posterior distributions, decision theory, and model types."
ZZSC9001,Foundations of Data Science,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%201&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KB&deliveryLocation=Kensington&courseCode=ZZSC9001&activityGroupId=1,"This is an intensive course that covers the fundamentals of Data Science as it is applied in Computer Science, Economics, Mathematics and Statistics. The course will introduce topics such as databases, data analytics, data mining, Bayesian statistics, statistical software, econometrics, machine learning, and business forecasting. The course also introduces the Data Science and Decisions program, indicating the relevance of the courses that follow in the program (including electives) and their place in data science and its applications.
This course includes lectures, tutorials, and workshops and is delivered completely online. The course will take the flipped classroom approach. Students are assigned the “homework” of watching video lectures and reading materials relevant to the online lecture session. During each session, a recap and overview of the content will be given and students will practice what they’ve learned through examples and tutorial problems.","The aim of this course is to provide a broad overview of modern Data Science techniques that are broadly applicable in Computer Science, Economics, Mathematics and Statistics. This course provides a platform for further studies in Data Science. The course activities and content will also provide a foundation to analyse and address problems that data scientists face in the modern world.","Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply various data visualisation tools, perform regression analysis and draw casual inference from data
Apply key methods of statistical inference in applied settings
Use key theoretical tools to explore the properties of random variables
Apply fundamental data science techniques and tools, including machine learning, Naïve Bayes classification, Decision trees, K-Nearest Neighbour, unsupervised learning and neural networks","Course Description: This is an intensive course that covers the fundamentals of Data Science as it is applied in Computer Science, Economics, Mathematics and Statistics. The course will introduce topics such as databases, data analytics, data mining, Bayesian statistics, statistical software, econometrics, machine learning, and business forecasting. The course also introduces the Data Science and Decisions program, indicating the relevance of the courses that follow in the program (including electives) and their place in data science and its applications.
This course includes lectures, tutorials, and workshops and is delivered completely online. The course will take the flipped classroom approach. Students are assigned the “homework” of watching video lectures and reading materials relevant to the online lecture session. During each session, a recap and overview of the content will be given and students will practice what they’ve learned through examples and tutorial problems.
Course Aims: The aim of this course is to provide a broad overview of modern Data Science techniques that are broadly applicable in Computer Science, Economics, Mathematics and Statistics. This course provides a platform for further studies in Data Science. The course activities and content will also provide a foundation to analyse and address problems that data scientists face in the modern world.
Course Learning Outcomes: Use R/RStudio to perform statistical computations and simulations
Apply probability rules in a given setting to calculate key quantities
Apply various data visualisation tools, perform regression analysis and draw casual inference from data
Apply key methods of statistical inference in applied settings
Use key theoretical tools to explore the properties of random variables
Apply fundamental data science techniques and tools, including machine learning, Naïve Bayes classification, Decision trees, K-Nearest Neighbour, unsupervised learning and neural networks",statistical computing with R/RStudio; data visualization; regression analysis; statistical inference; machine learning application,R; data visualization; regression; statistical inference; machine learning; data mining; Bayesian statistics; econometrics; business forecasting; data analysis; SQL,databases and data analytics; data mining; Bayesian statistics; econometrics; business forecasting; key machine learning algorithms,"fundamental data science techniques; application of probability and statistics in real-world scenarios; use of data science in various fields like Computer Science, Economics, Mathematics, and Statistics; understanding and applying modern data science tools and techniques","This course explores Data Science fundamentals by introducing topics such as databases, analytics, mining, statistics, and machine learning through lectures, tutorials, and workshops."
ZZSC9020,Data Science Project,School of Mathematics & Statistics,https://www.unsw.edu.au/course-outlines/course-outline#year=2024&term=Hexamester%202&deliveryMode=Online&deliveryFormat=Standard&teachingPeriod=KF&deliveryLocation=Kensington&courseCode=ZZSC9020&activityGroupId=1,This course exposes students to research methods in applying data science techniques to a research project. The course serves as a capstone in the Master of Data Science program. Students will be required to apply and demonstrate their learning from the courses in the program. It also requires students to present their work in visual and verbal forms including a presentation.,,"Students will be able to manage their time effectively, and make reasoned trade-offs over competing demands
Students will be able to critically reflect on a specialist body of knowledge related to data science
Students will be able to communicate technical information clearly, both verbally and in writing
Students will be able to work from a set of requirements, elaborate them, and produce a specification
Students will be able to apply robust research methods to design, build, or evaluate a project as it relates to data science
Students will be able to work effectively in aproject team, and lead when required","Course Description: This course exposes students to research methods in applying data science techniques to a research project. The course serves as a capstone in the Master of Data Science program. Students will be required to apply and demonstrate their learning from the courses in the program. It also requires students to present their work in visual and verbal forms including a presentation. Course Learning Outcomes: Students will be able to manage their time effectively, and make reasoned trade-offs over competing demands
Students will be able to critically reflect on a specialist body of knowledge related to data science
Students will be able to communicate technical information clearly, both verbally and in writing
Students will be able to work from a set of requirements, elaborate them, and produce a specification
Students will be able to apply robust research methods to design, build, or evaluate a project as it relates to data science
Students will be able to work effectively in aproject team, and lead when required",project management and leadership; critical reflection and analysis; technical communication; research design and implementation,Project management; team collaboration; ,application of data science techniques in research; verbal and visual presentation of research findings; effective teamwork in data science projects, integration and application of data science knowledge; time management in project settings; communication of complex technical information; execution of robust research methods in data science,"This course applies data science techniques to a research project, allowing students to demonstrate their learning from previous courses through presentation and visual communication."